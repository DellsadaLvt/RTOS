
TASK_Delete_ChangeTaskPriority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052ac  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080053bc  080053bc  000153bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054c0  080054c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080054c0  080054c0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054c0  080054c0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054c0  080054c0  000154c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054c4  080054c4  000154c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080054c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a1c  20000074  0800553c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a90  0800553c  00021a90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018445  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034c0  00000000  00000000  000384e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  0003b9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  0003ccc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d8d  00000000  00000000  0003de60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d0e  00000000  00000000  00057bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094053  00000000  00000000  0006c8fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010094e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052bc  00000000  00000000  001009a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080053a4 	.word	0x080053a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080053a4 	.word	0x080053a4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000166:	4a10      	ldr	r2, [pc, #64]	; (80001a8 <MX_FREERTOS_Init+0x48>)
 8000168:	2100      	movs	r1, #0
 800016a:	4810      	ldr	r0, [pc, #64]	; (80001ac <MX_FREERTOS_Init+0x4c>)
 800016c:	f001 ff3e 	bl	8001fec <osThreadNew>
 8000170:	4603      	mov	r3, r0
 8000172:	4a0f      	ldr	r2, [pc, #60]	; (80001b0 <MX_FREERTOS_Init+0x50>)
 8000174:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(vLed1Handler, "LED-1", 256u, NULL, 20u, &xLed1Handler);
 8000176:	4b0f      	ldr	r3, [pc, #60]	; (80001b4 <MX_FREERTOS_Init+0x54>)
 8000178:	9301      	str	r3, [sp, #4]
 800017a:	2314      	movs	r3, #20
 800017c:	9300      	str	r3, [sp, #0]
 800017e:	2300      	movs	r3, #0
 8000180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000184:	490c      	ldr	r1, [pc, #48]	; (80001b8 <MX_FREERTOS_Init+0x58>)
 8000186:	480d      	ldr	r0, [pc, #52]	; (80001bc <MX_FREERTOS_Init+0x5c>)
 8000188:	f002 fdfc 	bl	8002d84 <xTaskCreate>
  xTaskCreate(vLed2Handler, "LED-2", 256u, NULL, 10u, &xLed2Handler);
 800018c:	4b0c      	ldr	r3, [pc, #48]	; (80001c0 <MX_FREERTOS_Init+0x60>)
 800018e:	9301      	str	r3, [sp, #4]
 8000190:	230a      	movs	r3, #10
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2300      	movs	r3, #0
 8000196:	f44f 7280 	mov.w	r2, #256	; 0x100
 800019a:	490a      	ldr	r1, [pc, #40]	; (80001c4 <MX_FREERTOS_Init+0x64>)
 800019c:	480a      	ldr	r0, [pc, #40]	; (80001c8 <MX_FREERTOS_Init+0x68>)
 800019e:	f002 fdf1 	bl	8002d84 <xTaskCreate>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001a2:	bf00      	nop
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	08005450 	.word	0x08005450
 80001ac:	080001cd 	.word	0x080001cd
 80001b0:	200019b0 	.word	0x200019b0
 80001b4:	20000090 	.word	0x20000090
 80001b8:	080053c8 	.word	0x080053c8
 80001bc:	080001e1 	.word	0x080001e1
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080053d0 	.word	0x080053d0
 80001c8:	080002a9 	.word	0x080002a9

080001cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    vTaskDelay(1000);
 80001d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001d8:	f002 ff82 	bl	80030e0 <vTaskDelay>
 80001dc:	e7fa      	b.n	80001d4 <StartDefaultTask+0x8>
	...

080001e0 <vLed1Handler>:
  /* USER CODE END StartDefaultTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void vLed1Handler( void *argument ){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b09e      	sub	sp, #120	; 0x78
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
	UBaseType_t xLed1TaskPriority, xLed2TaskPriority;
	uint8_t msg[100];

	while(1){
		/* get priority value of each task  */
		xLed1TaskPriority = uxTaskPriorityGet(xLed1Handler);
 80001e8:	4b28      	ldr	r3, [pc, #160]	; (800028c <vLed1Handler+0xac>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4618      	mov	r0, r3
 80001ee:	f002 ffab 	bl	8003148 <uxTaskPriorityGet>
 80001f2:	6778      	str	r0, [r7, #116]	; 0x74
		xLed2TaskPriority = uxTaskPriorityGet(xLed2Handler);
 80001f4:	4b26      	ldr	r3, [pc, #152]	; (8000290 <vLed1Handler+0xb0>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4618      	mov	r0, r3
 80001fa:	f002 ffa5 	bl	8003148 <uxTaskPriorityGet>
 80001fe:	6738      	str	r0, [r7, #112]	; 0x70
		sprintf((char*)msg, "The priority of Task 1 and Task 2: %d - %d \n", (int)xLed1TaskPriority, (int)xLed2TaskPriority);
 8000200:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000204:	f107 000c 	add.w	r0, r7, #12
 8000208:	4922      	ldr	r1, [pc, #136]	; (8000294 <vLed1Handler+0xb4>)
 800020a:	f004 fc9f 	bl	8004b4c <siprintf>
		HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 30u);
 800020e:	f107 030c 	add.w	r3, r7, #12
 8000212:	4618      	mov	r0, r3
 8000214:	f7ff ff9c 	bl	8000150 <strlen>
 8000218:	4603      	mov	r3, r0
 800021a:	b29a      	uxth	r2, r3
 800021c:	f107 010c 	add.w	r1, r7, #12
 8000220:	231e      	movs	r3, #30
 8000222:	481d      	ldr	r0, [pc, #116]	; (8000298 <vLed1Handler+0xb8>)
 8000224:	f001 fd11 	bl	8001c4a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"Task 1 handle\n", 15u, 30u);
 8000228:	231e      	movs	r3, #30
 800022a:	220f      	movs	r2, #15
 800022c:	491b      	ldr	r1, [pc, #108]	; (800029c <vLed1Handler+0xbc>)
 800022e:	481a      	ldr	r0, [pc, #104]	; (8000298 <vLed1Handler+0xb8>)
 8000230:	f001 fd0b 	bl	8001c4a <HAL_UART_Transmit>
		prvDelay(1000u);
 8000234:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000238:	f000 f88a 	bl	8000350 <prvDelay>
		vTaskDelay(1000);
 800023c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000240:	f002 ff4e 	bl	80030e0 <vTaskDelay>
		if(0U == HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) ){
 8000244:	2140      	movs	r1, #64	; 0x40
 8000246:	4816      	ldr	r0, [pc, #88]	; (80002a0 <vLed1Handler+0xc0>)
 8000248:	f000 fdd6 	bl	8000df8 <HAL_GPIO_ReadPin>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d102      	bne.n	8000258 <vLed1Handler+0x78>
			vTaskDelete(NULL);
 8000252:	2000      	movs	r0, #0
 8000254:	f002 fed2 	bl	8002ffc <vTaskDelete>
		}
		if( u8Flag == 1u ){
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <vLed1Handler+0xc4>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	b2db      	uxtb	r3, r3
 800025e:	2b01      	cmp	r3, #1
 8000260:	d1c2      	bne.n	80001e8 <vLed1Handler+0x8>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000262:	b672      	cpsid	i
}
 8000264:	bf00      	nop
			/* clear flag */
			__disable_irq();
			u8Flag = 0u;
 8000266:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <vLed1Handler+0xc4>)
 8000268:	2200      	movs	r2, #0
 800026a:	701a      	strb	r2, [r3, #0]
			/* set priority of eack task */
			vTaskPrioritySet(xLed2Handler, xLed1TaskPriority);
 800026c:	4b08      	ldr	r3, [pc, #32]	; (8000290 <vLed1Handler+0xb0>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000272:	4618      	mov	r0, r3
 8000274:	f002 ff82 	bl	800317c <vTaskPrioritySet>
			vTaskPrioritySet(xLed1Handler, xLed2TaskPriority);
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <vLed1Handler+0xac>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800027e:	4618      	mov	r0, r3
 8000280:	f002 ff7c 	bl	800317c <vTaskPrioritySet>
  __ASM volatile ("cpsie i" : : : "memory");
 8000284:	b662      	cpsie	i
}
 8000286:	bf00      	nop
		xLed1TaskPriority = uxTaskPriorityGet(xLed1Handler);
 8000288:	e7ae      	b.n	80001e8 <vLed1Handler+0x8>
 800028a:	bf00      	nop
 800028c:	20000090 	.word	0x20000090
 8000290:	20000094 	.word	0x20000094
 8000294:	080053d8 	.word	0x080053d8
 8000298:	200019fc 	.word	0x200019fc
 800029c:	08005408 	.word	0x08005408
 80002a0:	40010800 	.word	0x40010800
 80002a4:	20000098 	.word	0x20000098

080002a8 <vLed2Handler>:
			__enable_irq();
		}
	}
}

void vLed2Handler( void *argument ){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b09e      	sub	sp, #120	; 0x78
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	UBaseType_t xLed1TaskPriority, xLed2TaskPriority;
	uint8_t msg[100];
	while(1){
		/* get priority value of each task  */
		xLed1TaskPriority = uxTaskPriorityGet(xLed1Handler);
 80002b0:	4b21      	ldr	r3, [pc, #132]	; (8000338 <vLed2Handler+0x90>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4618      	mov	r0, r3
 80002b6:	f002 ff47 	bl	8003148 <uxTaskPriorityGet>
 80002ba:	6778      	str	r0, [r7, #116]	; 0x74
		xLed2TaskPriority = uxTaskPriorityGet(xLed2Handler);
 80002bc:	4b1f      	ldr	r3, [pc, #124]	; (800033c <vLed2Handler+0x94>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4618      	mov	r0, r3
 80002c2:	f002 ff41 	bl	8003148 <uxTaskPriorityGet>
 80002c6:	6738      	str	r0, [r7, #112]	; 0x70
		sprintf((char*)msg, "The priority of Task 1 and Task 2: %d - %d \n", (int)xLed1TaskPriority, (int)xLed2TaskPriority);
 80002c8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80002ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80002cc:	f107 000c 	add.w	r0, r7, #12
 80002d0:	491b      	ldr	r1, [pc, #108]	; (8000340 <vLed2Handler+0x98>)
 80002d2:	f004 fc3b 	bl	8004b4c <siprintf>
		HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 30u);
 80002d6:	f107 030c 	add.w	r3, r7, #12
 80002da:	4618      	mov	r0, r3
 80002dc:	f7ff ff38 	bl	8000150 <strlen>
 80002e0:	4603      	mov	r3, r0
 80002e2:	b29a      	uxth	r2, r3
 80002e4:	f107 010c 	add.w	r1, r7, #12
 80002e8:	231e      	movs	r3, #30
 80002ea:	4816      	ldr	r0, [pc, #88]	; (8000344 <vLed2Handler+0x9c>)
 80002ec:	f001 fcad 	bl	8001c4a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"Task 2 handle\n", 15u, 30u);
 80002f0:	231e      	movs	r3, #30
 80002f2:	220f      	movs	r2, #15
 80002f4:	4914      	ldr	r1, [pc, #80]	; (8000348 <vLed2Handler+0xa0>)
 80002f6:	4813      	ldr	r0, [pc, #76]	; (8000344 <vLed2Handler+0x9c>)
 80002f8:	f001 fca7 	bl	8001c4a <HAL_UART_Transmit>
		prvDelay(1000u);
 80002fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000300:	f000 f826 	bl	8000350 <prvDelay>

		if( u8Flag == 1u ){
 8000304:	4b11      	ldr	r3, [pc, #68]	; (800034c <vLed2Handler+0xa4>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	b2db      	uxtb	r3, r3
 800030a:	2b01      	cmp	r3, #1
 800030c:	d1d0      	bne.n	80002b0 <vLed2Handler+0x8>
  __ASM volatile ("cpsid i" : : : "memory");
 800030e:	b672      	cpsid	i
}
 8000310:	bf00      	nop
			__disable_irq();
			/* clear flag */
			u8Flag = 0u;
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <vLed2Handler+0xa4>)
 8000314:	2200      	movs	r2, #0
 8000316:	701a      	strb	r2, [r3, #0]
			/* set priority of eack task */
			vTaskPrioritySet(xLed1Handler, xLed2TaskPriority);
 8000318:	4b07      	ldr	r3, [pc, #28]	; (8000338 <vLed2Handler+0x90>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800031e:	4618      	mov	r0, r3
 8000320:	f002 ff2c 	bl	800317c <vTaskPrioritySet>
			vTaskPrioritySet(xLed2Handler, xLed1TaskPriority);
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <vLed2Handler+0x94>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800032a:	4618      	mov	r0, r3
 800032c:	f002 ff26 	bl	800317c <vTaskPrioritySet>
  __ASM volatile ("cpsie i" : : : "memory");
 8000330:	b662      	cpsie	i
}
 8000332:	bf00      	nop
		xLed1TaskPriority = uxTaskPriorityGet(xLed1Handler);
 8000334:	e7bc      	b.n	80002b0 <vLed2Handler+0x8>
 8000336:	bf00      	nop
 8000338:	20000090 	.word	0x20000090
 800033c:	20000094 	.word	0x20000094
 8000340:	080053d8 	.word	0x080053d8
 8000344:	200019fc 	.word	0x200019fc
 8000348:	08005418 	.word	0x08005418
 800034c:	20000098 	.word	0x20000098

08000350 <prvDelay>:
		}
	}
}


static void prvDelay( uint32_t u32TimeMs){
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	uint32_t u32TickSet, u32TickCurrent;
	/* convert ms to tick */
	u32TickSet= u32TimeMs/1000*configTICK_RATE_HZ;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a0d      	ldr	r2, [pc, #52]	; (8000390 <prvDelay+0x40>)
 800035c:	fba2 2303 	umull	r2, r3, r2, r3
 8000360:	099b      	lsrs	r3, r3, #6
 8000362:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000366:	fb02 f303 	mul.w	r3, r2, r3
 800036a:	60fb      	str	r3, [r7, #12]
	u32TickCurrent= xTaskGetTickCount();
 800036c:	f003 f8ba 	bl	80034e4 <xTaskGetTickCount>
 8000370:	60b8      	str	r0, [r7, #8]
	/* block delay */
	while( xTaskGetTickCount() < (u32TickCurrent + u32TickSet));
 8000372:	bf00      	nop
 8000374:	f003 f8b6 	bl	80034e4 <xTaskGetTickCount>
 8000378:	4601      	mov	r1, r0
 800037a:	68ba      	ldr	r2, [r7, #8]
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	4413      	add	r3, r2
 8000380:	4299      	cmp	r1, r3
 8000382:	d3f7      	bcc.n	8000374 <prvDelay+0x24>
}
 8000384:	bf00      	nop
 8000386:	bf00      	nop
 8000388:	3710      	adds	r7, #16
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	10624dd3 	.word	0x10624dd3

08000394 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if( GPIO_Pin == GPIO_PIN_7 ){
 800039e:	88fb      	ldrh	r3, [r7, #6]
 80003a0:	2b80      	cmp	r3, #128	; 0x80
 80003a2:	d102      	bne.n	80003aa <HAL_GPIO_EXTI_Callback+0x16>
	  u8Flag= 1u;
 80003a4:	4b03      	ldr	r3, [pc, #12]	; (80003b4 <HAL_GPIO_EXTI_Callback+0x20>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	701a      	strb	r2, [r3, #0]
  }
}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	20000098 	.word	0x20000098

080003b8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b088      	sub	sp, #32
 80003bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003be:	f107 0310 	add.w	r3, r7, #16
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003cc:	4b43      	ldr	r3, [pc, #268]	; (80004dc <MX_GPIO_Init+0x124>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a42      	ldr	r2, [pc, #264]	; (80004dc <MX_GPIO_Init+0x124>)
 80003d2:	f043 0310 	orr.w	r3, r3, #16
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b40      	ldr	r3, [pc, #256]	; (80004dc <MX_GPIO_Init+0x124>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0310 	and.w	r3, r3, #16
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e4:	4b3d      	ldr	r3, [pc, #244]	; (80004dc <MX_GPIO_Init+0x124>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a3c      	ldr	r2, [pc, #240]	; (80004dc <MX_GPIO_Init+0x124>)
 80003ea:	f043 0320 	orr.w	r3, r3, #32
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b3a      	ldr	r3, [pc, #232]	; (80004dc <MX_GPIO_Init+0x124>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0320 	and.w	r3, r3, #32
 80003f8:	60bb      	str	r3, [r7, #8]
 80003fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fc:	4b37      	ldr	r3, [pc, #220]	; (80004dc <MX_GPIO_Init+0x124>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a36      	ldr	r2, [pc, #216]	; (80004dc <MX_GPIO_Init+0x124>)
 8000402:	f043 0304 	orr.w	r3, r3, #4
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b34      	ldr	r3, [pc, #208]	; (80004dc <MX_GPIO_Init+0x124>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0304 	and.w	r3, r3, #4
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000414:	4b31      	ldr	r3, [pc, #196]	; (80004dc <MX_GPIO_Init+0x124>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a30      	ldr	r2, [pc, #192]	; (80004dc <MX_GPIO_Init+0x124>)
 800041a:	f043 0308 	orr.w	r3, r3, #8
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b2e      	ldr	r3, [pc, #184]	; (80004dc <MX_GPIO_Init+0x124>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0308 	and.w	r3, r3, #8
 8000428:	603b      	str	r3, [r7, #0]
 800042a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 800042c:	2201      	movs	r2, #1
 800042e:	2130      	movs	r1, #48	; 0x30
 8000430:	482b      	ldr	r0, [pc, #172]	; (80004e0 <MX_GPIO_Init+0x128>)
 8000432:	f000 fcf8 	bl	8000e26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800043a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800043c:	2303      	movs	r3, #3
 800043e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000440:	f107 0310 	add.w	r3, r7, #16
 8000444:	4619      	mov	r1, r3
 8000446:	4827      	ldr	r0, [pc, #156]	; (80004e4 <MX_GPIO_Init+0x12c>)
 8000448:	f000 fb52 	bl	8000af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9
 800044c:	f649 7303 	movw	r3, #40707	; 0x9f03
 8000450:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000452:	2303      	movs	r3, #3
 8000454:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000456:	f107 0310 	add.w	r3, r7, #16
 800045a:	4619      	mov	r1, r3
 800045c:	4820      	ldr	r0, [pc, #128]	; (80004e0 <MX_GPIO_Init+0x128>)
 800045e:	f000 fb47 	bl	8000af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000462:	2330      	movs	r3, #48	; 0x30
 8000464:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000466:	2301      	movs	r3, #1
 8000468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	2300      	movs	r3, #0
 800046c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046e:	2302      	movs	r3, #2
 8000470:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000472:	f107 0310 	add.w	r3, r7, #16
 8000476:	4619      	mov	r1, r3
 8000478:	4819      	ldr	r0, [pc, #100]	; (80004e0 <MX_GPIO_Init+0x128>)
 800047a:	f000 fb39 	bl	8000af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800047e:	2340      	movs	r3, #64	; 0x40
 8000480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000486:	2301      	movs	r3, #1
 8000488:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800048a:	f107 0310 	add.w	r3, r7, #16
 800048e:	4619      	mov	r1, r3
 8000490:	4813      	ldr	r0, [pc, #76]	; (80004e0 <MX_GPIO_Init+0x128>)
 8000492:	f000 fb2d 	bl	8000af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXTBTN_Pin;
 8000496:	2380      	movs	r3, #128	; 0x80
 8000498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800049a:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <MX_GPIO_Init+0x130>)
 800049c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800049e:	2301      	movs	r3, #1
 80004a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EXTBTN_GPIO_Port, &GPIO_InitStruct);
 80004a2:	f107 0310 	add.w	r3, r7, #16
 80004a6:	4619      	mov	r1, r3
 80004a8:	480d      	ldr	r0, [pc, #52]	; (80004e0 <MX_GPIO_Init+0x128>)
 80004aa:	f000 fb21 	bl	8000af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80004ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004b2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004b4:	2303      	movs	r3, #3
 80004b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	4619      	mov	r1, r3
 80004be:	480b      	ldr	r0, [pc, #44]	; (80004ec <MX_GPIO_Init+0x134>)
 80004c0:	f000 fb16 	bl	8000af0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2105      	movs	r1, #5
 80004c8:	2017      	movs	r0, #23
 80004ca:	f000 fae6 	bl	8000a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80004ce:	2017      	movs	r0, #23
 80004d0:	f000 faff 	bl	8000ad2 <HAL_NVIC_EnableIRQ>

}
 80004d4:	bf00      	nop
 80004d6:	3720      	adds	r7, #32
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40010800 	.word	0x40010800
 80004e4:	40011000 	.word	0x40011000
 80004e8:	10210000 	.word	0x10210000
 80004ec:	40010c00 	.word	0x40010c00

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 f9ea 	bl	80008cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f80b 	bl	8000512 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f7ff ff5c 	bl	80003b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000500:	f000 f94a 	bl	8000798 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000504:	f001 fd0c 	bl	8001f20 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000508:	f7ff fe2a 	bl	8000160 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800050c:	f001 fd3a 	bl	8001f84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000510:	e7fe      	b.n	8000510 <main+0x20>

08000512 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b090      	sub	sp, #64	; 0x40
 8000516:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000518:	f107 0318 	add.w	r3, r7, #24
 800051c:	2228      	movs	r2, #40	; 0x28
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f004 fb0b 	bl	8004b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000534:	2302      	movs	r3, #2
 8000536:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000538:	2301      	movs	r3, #1
 800053a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053c:	2310      	movs	r3, #16
 800053e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000540:	2300      	movs	r3, #0
 8000542:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000544:	f107 0318 	add.w	r3, r7, #24
 8000548:	4618      	mov	r0, r3
 800054a:	f000 fc9d 	bl	8000e88 <HAL_RCC_OscConfig>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000554:	f000 f82a 	bl	80005ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000558:	230f      	movs	r3, #15
 800055a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f000 ff09 	bl	8001388 <HAL_RCC_ClockConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800057c:	f000 f816 	bl	80005ac <Error_Handler>
  }
}
 8000580:	bf00      	nop
 8000582:	3740      	adds	r7, #64	; 0x40
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d101      	bne.n	800059e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800059a:	f000 f9ad 	bl	80008f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40000400 	.word	0x40000400

080005ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80005b0:	b672      	cpsid	i
}
 80005b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <Error_Handler+0x8>
	...

080005b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005be:	4b18      	ldr	r3, [pc, #96]	; (8000620 <HAL_MspInit+0x68>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	4a17      	ldr	r2, [pc, #92]	; (8000620 <HAL_MspInit+0x68>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6193      	str	r3, [r2, #24]
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <HAL_MspInit+0x68>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d6:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_MspInit+0x68>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	4a11      	ldr	r2, [pc, #68]	; (8000620 <HAL_MspInit+0x68>)
 80005dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e0:	61d3      	str	r3, [r2, #28]
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <HAL_MspInit+0x68>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	210f      	movs	r1, #15
 80005f2:	f06f 0001 	mvn.w	r0, #1
 80005f6:	f000 fa50 	bl	8000a9a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <HAL_MspInit+0x6c>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <HAL_MspInit+0x6c>)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000
 8000624:	40010000 	.word	0x40010000

08000628 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08c      	sub	sp, #48	; 0x30
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8000638:	2200      	movs	r2, #0
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	201d      	movs	r0, #29
 800063e:	f000 fa2c 	bl	8000a9a <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000642:	201d      	movs	r0, #29
 8000644:	f000 fa45 	bl	8000ad2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000648:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <HAL_InitTick+0x9c>)
 800064a:	69db      	ldr	r3, [r3, #28]
 800064c:	4a1d      	ldr	r2, [pc, #116]	; (80006c4 <HAL_InitTick+0x9c>)
 800064e:	f043 0302 	orr.w	r3, r3, #2
 8000652:	61d3      	str	r3, [r2, #28]
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <HAL_InitTick+0x9c>)
 8000656:	69db      	ldr	r3, [r3, #28]
 8000658:	f003 0302 	and.w	r3, r3, #2
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000660:	f107 0210 	add.w	r2, r7, #16
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4611      	mov	r1, r2
 800066a:	4618      	mov	r0, r3
 800066c:	f001 f808 	bl	8001680 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000670:	f000 ffde 	bl	8001630 <HAL_RCC_GetPCLK1Freq>
 8000674:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000678:	4a13      	ldr	r2, [pc, #76]	; (80006c8 <HAL_InitTick+0xa0>)
 800067a:	fba2 2303 	umull	r2, r3, r2, r3
 800067e:	0c9b      	lsrs	r3, r3, #18
 8000680:	3b01      	subs	r3, #1
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <HAL_InitTick+0xa4>)
 8000686:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <HAL_InitTick+0xa8>)
 8000688:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <HAL_InitTick+0xa4>)
 800068c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000690:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000692:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <HAL_InitTick+0xa4>)
 8000694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000696:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <HAL_InitTick+0xa4>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <HAL_InitTick+0xa4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80006a4:	4809      	ldr	r0, [pc, #36]	; (80006cc <HAL_InitTick+0xa4>)
 80006a6:	f001 f839 	bl	800171c <HAL_TIM_Base_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d104      	bne.n	80006ba <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80006b0:	4806      	ldr	r0, [pc, #24]	; (80006cc <HAL_InitTick+0xa4>)
 80006b2:	f001 f88b 	bl	80017cc <HAL_TIM_Base_Start_IT>
 80006b6:	4603      	mov	r3, r0
 80006b8:	e000      	b.n	80006bc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3730      	adds	r7, #48	; 0x30
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40021000 	.word	0x40021000
 80006c8:	431bde83 	.word	0x431bde83
 80006cc:	200019b4 	.word	0x200019b4
 80006d0:	40000400 	.word	0x40000400

080006d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <NMI_Handler+0x4>

080006da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006de:	e7fe      	b.n	80006de <HardFault_Handler+0x4>

080006e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <MemManage_Handler+0x4>

080006e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <BusFault_Handler+0x4>

080006ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <UsageFault_Handler+0x4>

080006f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr

080006fe <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000702:	2080      	movs	r0, #128	; 0x80
 8000704:	f000 fba8 	bl	8000e58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <TIM3_IRQHandler+0x10>)
 8000712:	f001 f8ad 	bl	8001870 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200019b4 	.word	0x200019b4

08000720 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000728:	4a14      	ldr	r2, [pc, #80]	; (800077c <_sbrk+0x5c>)
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <_sbrk+0x60>)
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <_sbrk+0x64>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d102      	bne.n	8000742 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <_sbrk+0x64>)
 800073e:	4a12      	ldr	r2, [pc, #72]	; (8000788 <_sbrk+0x68>)
 8000740:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <_sbrk+0x64>)
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	693a      	ldr	r2, [r7, #16]
 800074c:	429a      	cmp	r2, r3
 800074e:	d207      	bcs.n	8000760 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000750:	f004 f9bc 	bl	8004acc <__errno>
 8000754:	4603      	mov	r3, r0
 8000756:	220c      	movs	r2, #12
 8000758:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800075a:	f04f 33ff 	mov.w	r3, #4294967295
 800075e:	e009      	b.n	8000774 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <_sbrk+0x64>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000766:	4b07      	ldr	r3, [pc, #28]	; (8000784 <_sbrk+0x64>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4413      	add	r3, r2
 800076e:	4a05      	ldr	r2, [pc, #20]	; (8000784 <_sbrk+0x64>)
 8000770:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000772:	68fb      	ldr	r3, [r7, #12]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20005000 	.word	0x20005000
 8000780:	00000400 	.word	0x00000400
 8000784:	2000009c 	.word	0x2000009c
 8000788:	20001a90 	.word	0x20001a90

0800078c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <MX_USART2_UART_Init+0x50>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007d0:	f001 f9ee 	bl	8001bb0 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007da:	f7ff fee7 	bl	80005ac <Error_Handler>
  }

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200019fc 	.word	0x200019fc
 80007e8:	40004400 	.word	0x40004400

080007ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a1b      	ldr	r2, [pc, #108]	; (8000874 <HAL_UART_MspInit+0x88>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d12f      	bne.n	800086c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800080c:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <HAL_UART_MspInit+0x8c>)
 800080e:	69db      	ldr	r3, [r3, #28]
 8000810:	4a19      	ldr	r2, [pc, #100]	; (8000878 <HAL_UART_MspInit+0x8c>)
 8000812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000816:	61d3      	str	r3, [r2, #28]
 8000818:	4b17      	ldr	r3, [pc, #92]	; (8000878 <HAL_UART_MspInit+0x8c>)
 800081a:	69db      	ldr	r3, [r3, #28]
 800081c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <HAL_UART_MspInit+0x8c>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a13      	ldr	r2, [pc, #76]	; (8000878 <HAL_UART_MspInit+0x8c>)
 800082a:	f043 0304 	orr.w	r3, r3, #4
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <HAL_UART_MspInit+0x8c>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f003 0304 	and.w	r3, r3, #4
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800083c:	2304      	movs	r3, #4
 800083e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	4619      	mov	r1, r3
 800084e:	480b      	ldr	r0, [pc, #44]	; (800087c <HAL_UART_MspInit+0x90>)
 8000850:	f000 f94e 	bl	8000af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000854:	2308      	movs	r3, #8
 8000856:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	4619      	mov	r1, r3
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <HAL_UART_MspInit+0x90>)
 8000868:	f000 f942 	bl	8000af0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800086c:	bf00      	nop
 800086e:	3720      	adds	r7, #32
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40004400 	.word	0x40004400
 8000878:	40021000 	.word	0x40021000
 800087c:	40010800 	.word	0x40010800

08000880 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000880:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000882:	e003      	b.n	800088c <LoopCopyDataInit>

08000884 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000886:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000888:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800088a:	3104      	adds	r1, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800088c:	480a      	ldr	r0, [pc, #40]	; (80008b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000890:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000892:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000894:	d3f6      	bcc.n	8000884 <CopyDataInit>
  ldr r2, =_sbss
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000898:	e002      	b.n	80008a0 <LoopFillZerobss>

0800089a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800089c:	f842 3b04 	str.w	r3, [r2], #4

080008a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008a4:	d3f9      	bcc.n	800089a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008a6:	f7ff ff71 	bl	800078c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008aa:	f004 f915 	bl	8004ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ae:	f7ff fe1f 	bl	80004f0 <main>
  bx lr
 80008b2:	4770      	bx	lr
  ldr r3, =_sidata
 80008b4:	080054c8 	.word	0x080054c8
  ldr r0, =_sdata
 80008b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008bc:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80008c0:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80008c4:	20001a90 	.word	0x20001a90

080008c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c8:	e7fe      	b.n	80008c8 <ADC1_2_IRQHandler>
	...

080008cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_Init+0x28>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_Init+0x28>)
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008dc:	2003      	movs	r0, #3
 80008de:	f000 f8d1 	bl	8000a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008e2:	2000      	movs	r0, #0
 80008e4:	f7ff fea0 	bl	8000628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e8:	f7ff fe66 	bl	80005b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40022000 	.word	0x40022000

080008f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <HAL_IncTick+0x1c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	461a      	mov	r2, r3
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_IncTick+0x20>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4413      	add	r3, r2
 8000908:	4a03      	ldr	r2, [pc, #12]	; (8000918 <HAL_IncTick+0x20>)
 800090a:	6013      	str	r3, [r2, #0]
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr
 8000914:	20000008 	.word	0x20000008
 8000918:	20001a3c 	.word	0x20001a3c

0800091c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return uwTick;
 8000920:	4b02      	ldr	r3, [pc, #8]	; (800092c <HAL_GetTick+0x10>)
 8000922:	681b      	ldr	r3, [r3, #0]
}
 8000924:	4618      	mov	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	20001a3c 	.word	0x20001a3c

08000930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <__NVIC_SetPriorityGrouping+0x44>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800094c:	4013      	ands	r3, r2
 800094e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800095c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000962:	4a04      	ldr	r2, [pc, #16]	; (8000974 <__NVIC_SetPriorityGrouping+0x44>)
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	60d3      	str	r3, [r2, #12]
}
 8000968:	bf00      	nop
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800097c:	4b04      	ldr	r3, [pc, #16]	; (8000990 <__NVIC_GetPriorityGrouping+0x18>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	0a1b      	lsrs	r3, r3, #8
 8000982:	f003 0307 	and.w	r3, r3, #7
}
 8000986:	4618      	mov	r0, r3
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	db0b      	blt.n	80009be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	f003 021f 	and.w	r2, r3, #31
 80009ac:	4906      	ldr	r1, [pc, #24]	; (80009c8 <__NVIC_EnableIRQ+0x34>)
 80009ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b2:	095b      	lsrs	r3, r3, #5
 80009b4:	2001      	movs	r0, #1
 80009b6:	fa00 f202 	lsl.w	r2, r0, r2
 80009ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	e000e100 	.word	0xe000e100

080009cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	6039      	str	r1, [r7, #0]
 80009d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	db0a      	blt.n	80009f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	490c      	ldr	r1, [pc, #48]	; (8000a18 <__NVIC_SetPriority+0x4c>)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	0112      	lsls	r2, r2, #4
 80009ec:	b2d2      	uxtb	r2, r2
 80009ee:	440b      	add	r3, r1
 80009f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f4:	e00a      	b.n	8000a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4908      	ldr	r1, [pc, #32]	; (8000a1c <__NVIC_SetPriority+0x50>)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	f003 030f 	and.w	r3, r3, #15
 8000a02:	3b04      	subs	r3, #4
 8000a04:	0112      	lsls	r2, r2, #4
 8000a06:	b2d2      	uxtb	r2, r2
 8000a08:	440b      	add	r3, r1
 8000a0a:	761a      	strb	r2, [r3, #24]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000e100 	.word	0xe000e100
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b089      	sub	sp, #36	; 0x24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	f1c3 0307 	rsb	r3, r3, #7
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	bf28      	it	cs
 8000a3e:	2304      	movcs	r3, #4
 8000a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3304      	adds	r3, #4
 8000a46:	2b06      	cmp	r3, #6
 8000a48:	d902      	bls.n	8000a50 <NVIC_EncodePriority+0x30>
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3b03      	subs	r3, #3
 8000a4e:	e000      	b.n	8000a52 <NVIC_EncodePriority+0x32>
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	f04f 32ff 	mov.w	r2, #4294967295
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43da      	mvns	r2, r3
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	401a      	ands	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a68:	f04f 31ff 	mov.w	r1, #4294967295
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a72:	43d9      	mvns	r1, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	4313      	orrs	r3, r2
         );
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3724      	adds	r7, #36	; 0x24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff ff4f 	bl	8000930 <__NVIC_SetPriorityGrouping>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aac:	f7ff ff64 	bl	8000978 <__NVIC_GetPriorityGrouping>
 8000ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	68b9      	ldr	r1, [r7, #8]
 8000ab6:	6978      	ldr	r0, [r7, #20]
 8000ab8:	f7ff ffb2 	bl	8000a20 <NVIC_EncodePriority>
 8000abc:	4602      	mov	r2, r0
 8000abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff81 	bl	80009cc <__NVIC_SetPriority>
}
 8000aca:	bf00      	nop
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	4603      	mov	r3, r0
 8000ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff57 	bl	8000994 <__NVIC_EnableIRQ>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b08b      	sub	sp, #44	; 0x2c
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b02:	e169      	b.n	8000dd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b04:	2201      	movs	r2, #1
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	69fa      	ldr	r2, [r7, #28]
 8000b14:	4013      	ands	r3, r2
 8000b16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	f040 8158 	bne.w	8000dd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	4a9a      	ldr	r2, [pc, #616]	; (8000d90 <HAL_GPIO_Init+0x2a0>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d05e      	beq.n	8000bea <HAL_GPIO_Init+0xfa>
 8000b2c:	4a98      	ldr	r2, [pc, #608]	; (8000d90 <HAL_GPIO_Init+0x2a0>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d875      	bhi.n	8000c1e <HAL_GPIO_Init+0x12e>
 8000b32:	4a98      	ldr	r2, [pc, #608]	; (8000d94 <HAL_GPIO_Init+0x2a4>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d058      	beq.n	8000bea <HAL_GPIO_Init+0xfa>
 8000b38:	4a96      	ldr	r2, [pc, #600]	; (8000d94 <HAL_GPIO_Init+0x2a4>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d86f      	bhi.n	8000c1e <HAL_GPIO_Init+0x12e>
 8000b3e:	4a96      	ldr	r2, [pc, #600]	; (8000d98 <HAL_GPIO_Init+0x2a8>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d052      	beq.n	8000bea <HAL_GPIO_Init+0xfa>
 8000b44:	4a94      	ldr	r2, [pc, #592]	; (8000d98 <HAL_GPIO_Init+0x2a8>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d869      	bhi.n	8000c1e <HAL_GPIO_Init+0x12e>
 8000b4a:	4a94      	ldr	r2, [pc, #592]	; (8000d9c <HAL_GPIO_Init+0x2ac>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d04c      	beq.n	8000bea <HAL_GPIO_Init+0xfa>
 8000b50:	4a92      	ldr	r2, [pc, #584]	; (8000d9c <HAL_GPIO_Init+0x2ac>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d863      	bhi.n	8000c1e <HAL_GPIO_Init+0x12e>
 8000b56:	4a92      	ldr	r2, [pc, #584]	; (8000da0 <HAL_GPIO_Init+0x2b0>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d046      	beq.n	8000bea <HAL_GPIO_Init+0xfa>
 8000b5c:	4a90      	ldr	r2, [pc, #576]	; (8000da0 <HAL_GPIO_Init+0x2b0>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d85d      	bhi.n	8000c1e <HAL_GPIO_Init+0x12e>
 8000b62:	2b12      	cmp	r3, #18
 8000b64:	d82a      	bhi.n	8000bbc <HAL_GPIO_Init+0xcc>
 8000b66:	2b12      	cmp	r3, #18
 8000b68:	d859      	bhi.n	8000c1e <HAL_GPIO_Init+0x12e>
 8000b6a:	a201      	add	r2, pc, #4	; (adr r2, 8000b70 <HAL_GPIO_Init+0x80>)
 8000b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b70:	08000beb 	.word	0x08000beb
 8000b74:	08000bc5 	.word	0x08000bc5
 8000b78:	08000bd7 	.word	0x08000bd7
 8000b7c:	08000c19 	.word	0x08000c19
 8000b80:	08000c1f 	.word	0x08000c1f
 8000b84:	08000c1f 	.word	0x08000c1f
 8000b88:	08000c1f 	.word	0x08000c1f
 8000b8c:	08000c1f 	.word	0x08000c1f
 8000b90:	08000c1f 	.word	0x08000c1f
 8000b94:	08000c1f 	.word	0x08000c1f
 8000b98:	08000c1f 	.word	0x08000c1f
 8000b9c:	08000c1f 	.word	0x08000c1f
 8000ba0:	08000c1f 	.word	0x08000c1f
 8000ba4:	08000c1f 	.word	0x08000c1f
 8000ba8:	08000c1f 	.word	0x08000c1f
 8000bac:	08000c1f 	.word	0x08000c1f
 8000bb0:	08000c1f 	.word	0x08000c1f
 8000bb4:	08000bcd 	.word	0x08000bcd
 8000bb8:	08000be1 	.word	0x08000be1
 8000bbc:	4a79      	ldr	r2, [pc, #484]	; (8000da4 <HAL_GPIO_Init+0x2b4>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d013      	beq.n	8000bea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bc2:	e02c      	b.n	8000c1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	623b      	str	r3, [r7, #32]
          break;
 8000bca:	e029      	b.n	8000c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	623b      	str	r3, [r7, #32]
          break;
 8000bd4:	e024      	b.n	8000c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	3308      	adds	r3, #8
 8000bdc:	623b      	str	r3, [r7, #32]
          break;
 8000bde:	e01f      	b.n	8000c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	330c      	adds	r3, #12
 8000be6:	623b      	str	r3, [r7, #32]
          break;
 8000be8:	e01a      	b.n	8000c20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d102      	bne.n	8000bf8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	623b      	str	r3, [r7, #32]
          break;
 8000bf6:	e013      	b.n	8000c20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d105      	bne.n	8000c0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c00:	2308      	movs	r3, #8
 8000c02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69fa      	ldr	r2, [r7, #28]
 8000c08:	611a      	str	r2, [r3, #16]
          break;
 8000c0a:	e009      	b.n	8000c20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c0c:	2308      	movs	r3, #8
 8000c0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	69fa      	ldr	r2, [r7, #28]
 8000c14:	615a      	str	r2, [r3, #20]
          break;
 8000c16:	e003      	b.n	8000c20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
          break;
 8000c1c:	e000      	b.n	8000c20 <HAL_GPIO_Init+0x130>
          break;
 8000c1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	2bff      	cmp	r3, #255	; 0xff
 8000c24:	d801      	bhi.n	8000c2a <HAL_GPIO_Init+0x13a>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	e001      	b.n	8000c2e <HAL_GPIO_Init+0x13e>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	2bff      	cmp	r3, #255	; 0xff
 8000c34:	d802      	bhi.n	8000c3c <HAL_GPIO_Init+0x14c>
 8000c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	e002      	b.n	8000c42 <HAL_GPIO_Init+0x152>
 8000c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3e:	3b08      	subs	r3, #8
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	210f      	movs	r1, #15
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	401a      	ands	r2, r3
 8000c54:	6a39      	ldr	r1, [r7, #32]
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5c:	431a      	orrs	r2, r3
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f000 80b1 	beq.w	8000dd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c70:	4b4d      	ldr	r3, [pc, #308]	; (8000da8 <HAL_GPIO_Init+0x2b8>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a4c      	ldr	r2, [pc, #304]	; (8000da8 <HAL_GPIO_Init+0x2b8>)
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b4a      	ldr	r3, [pc, #296]	; (8000da8 <HAL_GPIO_Init+0x2b8>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c88:	4a48      	ldr	r2, [pc, #288]	; (8000dac <HAL_GPIO_Init+0x2bc>)
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	089b      	lsrs	r3, r3, #2
 8000c8e:	3302      	adds	r3, #2
 8000c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c98:	f003 0303 	and.w	r3, r3, #3
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	220f      	movs	r2, #15
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a40      	ldr	r2, [pc, #256]	; (8000db0 <HAL_GPIO_Init+0x2c0>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d013      	beq.n	8000cdc <HAL_GPIO_Init+0x1ec>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a3f      	ldr	r2, [pc, #252]	; (8000db4 <HAL_GPIO_Init+0x2c4>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d00d      	beq.n	8000cd8 <HAL_GPIO_Init+0x1e8>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a3e      	ldr	r2, [pc, #248]	; (8000db8 <HAL_GPIO_Init+0x2c8>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d007      	beq.n	8000cd4 <HAL_GPIO_Init+0x1e4>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a3d      	ldr	r2, [pc, #244]	; (8000dbc <HAL_GPIO_Init+0x2cc>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d101      	bne.n	8000cd0 <HAL_GPIO_Init+0x1e0>
 8000ccc:	2303      	movs	r3, #3
 8000cce:	e006      	b.n	8000cde <HAL_GPIO_Init+0x1ee>
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	e004      	b.n	8000cde <HAL_GPIO_Init+0x1ee>
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	e002      	b.n	8000cde <HAL_GPIO_Init+0x1ee>
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e000      	b.n	8000cde <HAL_GPIO_Init+0x1ee>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ce0:	f002 0203 	and.w	r2, r2, #3
 8000ce4:	0092      	lsls	r2, r2, #2
 8000ce6:	4093      	lsls	r3, r2
 8000ce8:	68fa      	ldr	r2, [r7, #12]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cee:	492f      	ldr	r1, [pc, #188]	; (8000dac <HAL_GPIO_Init+0x2bc>)
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf2:	089b      	lsrs	r3, r3, #2
 8000cf4:	3302      	adds	r3, #2
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d006      	beq.n	8000d16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d08:	4b2d      	ldr	r3, [pc, #180]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	492c      	ldr	r1, [pc, #176]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	600b      	str	r3, [r1, #0]
 8000d14:	e006      	b.n	8000d24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d16:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	4928      	ldr	r1, [pc, #160]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d20:	4013      	ands	r3, r2
 8000d22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d006      	beq.n	8000d3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d30:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	4922      	ldr	r1, [pc, #136]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	604b      	str	r3, [r1, #4]
 8000d3c:	e006      	b.n	8000d4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d3e:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d40:	685a      	ldr	r2, [r3, #4]
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	43db      	mvns	r3, r3
 8000d46:	491e      	ldr	r1, [pc, #120]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d48:	4013      	ands	r3, r2
 8000d4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d006      	beq.n	8000d66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d5a:	689a      	ldr	r2, [r3, #8]
 8000d5c:	4918      	ldr	r1, [pc, #96]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	608b      	str	r3, [r1, #8]
 8000d64:	e006      	b.n	8000d74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d68:	689a      	ldr	r2, [r3, #8]
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	4914      	ldr	r1, [pc, #80]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d70:	4013      	ands	r3, r2
 8000d72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d021      	beq.n	8000dc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d82:	68da      	ldr	r2, [r3, #12]
 8000d84:	490e      	ldr	r1, [pc, #56]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	60cb      	str	r3, [r1, #12]
 8000d8c:	e021      	b.n	8000dd2 <HAL_GPIO_Init+0x2e2>
 8000d8e:	bf00      	nop
 8000d90:	10320000 	.word	0x10320000
 8000d94:	10310000 	.word	0x10310000
 8000d98:	10220000 	.word	0x10220000
 8000d9c:	10210000 	.word	0x10210000
 8000da0:	10120000 	.word	0x10120000
 8000da4:	10110000 	.word	0x10110000
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40010000 	.word	0x40010000
 8000db0:	40010800 	.word	0x40010800
 8000db4:	40010c00 	.word	0x40010c00
 8000db8:	40011000 	.word	0x40011000
 8000dbc:	40011400 	.word	0x40011400
 8000dc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_GPIO_Init+0x304>)
 8000dc6:	68da      	ldr	r2, [r3, #12]
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	4909      	ldr	r1, [pc, #36]	; (8000df4 <HAL_GPIO_Init+0x304>)
 8000dce:	4013      	ands	r3, r2
 8000dd0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dde:	fa22 f303 	lsr.w	r3, r2, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f47f ae8e 	bne.w	8000b04 <HAL_GPIO_Init+0x14>
  }
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	372c      	adds	r7, #44	; 0x2c
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	40010400 	.word	0x40010400

08000df8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	887b      	ldrh	r3, [r7, #2]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d002      	beq.n	8000e16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e10:	2301      	movs	r3, #1
 8000e12:	73fb      	strb	r3, [r7, #15]
 8000e14:	e001      	b.n	8000e1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr

08000e26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	807b      	strh	r3, [r7, #2]
 8000e32:	4613      	mov	r3, r2
 8000e34:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e36:	787b      	ldrb	r3, [r7, #1]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e3c:	887a      	ldrh	r2, [r7, #2]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e42:	e003      	b.n	8000e4c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e44:	887b      	ldrh	r3, [r7, #2]
 8000e46:	041a      	lsls	r2, r3, #16
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	611a      	str	r2, [r3, #16]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
	...

08000e58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e64:	695a      	ldr	r2, [r3, #20]
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d006      	beq.n	8000e7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e74:	88fb      	ldrh	r3, [r7, #6]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fa8c 	bl	8000394 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40010400 	.word	0x40010400

08000e88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d101      	bne.n	8000e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e26c      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 8087 	beq.w	8000fb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ea8:	4b92      	ldr	r3, [pc, #584]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 030c 	and.w	r3, r3, #12
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d00c      	beq.n	8000ece <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eb4:	4b8f      	ldr	r3, [pc, #572]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 030c 	and.w	r3, r3, #12
 8000ebc:	2b08      	cmp	r3, #8
 8000ebe:	d112      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x5e>
 8000ec0:	4b8c      	ldr	r3, [pc, #560]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ecc:	d10b      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ece:	4b89      	ldr	r3, [pc, #548]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d06c      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x12c>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d168      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e246      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eee:	d106      	bne.n	8000efe <HAL_RCC_OscConfig+0x76>
 8000ef0:	4b80      	ldr	r3, [pc, #512]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a7f      	ldr	r2, [pc, #508]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	e02e      	b.n	8000f5c <HAL_RCC_OscConfig+0xd4>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10c      	bne.n	8000f20 <HAL_RCC_OscConfig+0x98>
 8000f06:	4b7b      	ldr	r3, [pc, #492]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a7a      	ldr	r2, [pc, #488]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	4b78      	ldr	r3, [pc, #480]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a77      	ldr	r2, [pc, #476]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	e01d      	b.n	8000f5c <HAL_RCC_OscConfig+0xd4>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f28:	d10c      	bne.n	8000f44 <HAL_RCC_OscConfig+0xbc>
 8000f2a:	4b72      	ldr	r3, [pc, #456]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a71      	ldr	r2, [pc, #452]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	4b6f      	ldr	r3, [pc, #444]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a6e      	ldr	r2, [pc, #440]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	e00b      	b.n	8000f5c <HAL_RCC_OscConfig+0xd4>
 8000f44:	4b6b      	ldr	r3, [pc, #428]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a6a      	ldr	r2, [pc, #424]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b68      	ldr	r3, [pc, #416]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a67      	ldr	r2, [pc, #412]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d013      	beq.n	8000f8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f64:	f7ff fcda 	bl	800091c <HAL_GetTick>
 8000f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6a:	e008      	b.n	8000f7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f6c:	f7ff fcd6 	bl	800091c <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b64      	cmp	r3, #100	; 0x64
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e1fa      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7e:	4b5d      	ldr	r3, [pc, #372]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0f0      	beq.n	8000f6c <HAL_RCC_OscConfig+0xe4>
 8000f8a:	e014      	b.n	8000fb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fcc6 	bl	800091c <HAL_GetTick>
 8000f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f94:	f7ff fcc2 	bl	800091c <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b64      	cmp	r3, #100	; 0x64
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e1e6      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa6:	4b53      	ldr	r3, [pc, #332]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f0      	bne.n	8000f94 <HAL_RCC_OscConfig+0x10c>
 8000fb2:	e000      	b.n	8000fb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d063      	beq.n	800108a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fc2:	4b4c      	ldr	r3, [pc, #304]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 030c 	and.w	r3, r3, #12
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00b      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fce:	4b49      	ldr	r3, [pc, #292]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	2b08      	cmp	r3, #8
 8000fd8:	d11c      	bne.n	8001014 <HAL_RCC_OscConfig+0x18c>
 8000fda:	4b46      	ldr	r3, [pc, #280]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d116      	bne.n	8001014 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fe6:	4b43      	ldr	r3, [pc, #268]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d005      	beq.n	8000ffe <HAL_RCC_OscConfig+0x176>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d001      	beq.n	8000ffe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e1ba      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ffe:	4b3d      	ldr	r3, [pc, #244]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	4939      	ldr	r1, [pc, #228]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 800100e:	4313      	orrs	r3, r2
 8001010:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001012:	e03a      	b.n	800108a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d020      	beq.n	800105e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800101c:	4b36      	ldr	r3, [pc, #216]	; (80010f8 <HAL_RCC_OscConfig+0x270>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001022:	f7ff fc7b 	bl	800091c <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800102a:	f7ff fc77 	bl	800091c <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e19b      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800103c:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f0      	beq.n	800102a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001048:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	4927      	ldr	r1, [pc, #156]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8001058:	4313      	orrs	r3, r2
 800105a:	600b      	str	r3, [r1, #0]
 800105c:	e015      	b.n	800108a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800105e:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <HAL_RCC_OscConfig+0x270>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fc5a 	bl	800091c <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800106c:	f7ff fc56 	bl	800091c <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e17a      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800107e:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f0      	bne.n	800106c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	2b00      	cmp	r3, #0
 8001094:	d03a      	beq.n	800110c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d019      	beq.n	80010d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <HAL_RCC_OscConfig+0x274>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a4:	f7ff fc3a 	bl	800091c <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ac:	f7ff fc36 	bl	800091c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e15a      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0f0      	beq.n	80010ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010ca:	2001      	movs	r0, #1
 80010cc:	f000 fb08 	bl	80016e0 <RCC_Delay>
 80010d0:	e01c      	b.n	800110c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_RCC_OscConfig+0x274>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d8:	f7ff fc20 	bl	800091c <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010de:	e00f      	b.n	8001100 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e0:	f7ff fc1c 	bl	800091c <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d908      	bls.n	8001100 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e140      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000
 80010f8:	42420000 	.word	0x42420000
 80010fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001100:	4b9e      	ldr	r3, [pc, #632]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 8001102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1e9      	bne.n	80010e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 80a6 	beq.w	8001266 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800111e:	4b97      	ldr	r3, [pc, #604]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10d      	bne.n	8001146 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	4b94      	ldr	r3, [pc, #592]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	4a93      	ldr	r2, [pc, #588]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 8001130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001134:	61d3      	str	r3, [r2, #28]
 8001136:	4b91      	ldr	r3, [pc, #580]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001142:	2301      	movs	r3, #1
 8001144:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001146:	4b8e      	ldr	r3, [pc, #568]	; (8001380 <HAL_RCC_OscConfig+0x4f8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800114e:	2b00      	cmp	r3, #0
 8001150:	d118      	bne.n	8001184 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001152:	4b8b      	ldr	r3, [pc, #556]	; (8001380 <HAL_RCC_OscConfig+0x4f8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a8a      	ldr	r2, [pc, #552]	; (8001380 <HAL_RCC_OscConfig+0x4f8>)
 8001158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800115e:	f7ff fbdd 	bl	800091c <HAL_GetTick>
 8001162:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001164:	e008      	b.n	8001178 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001166:	f7ff fbd9 	bl	800091c <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b64      	cmp	r3, #100	; 0x64
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e0fd      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001178:	4b81      	ldr	r3, [pc, #516]	; (8001380 <HAL_RCC_OscConfig+0x4f8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0f0      	beq.n	8001166 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d106      	bne.n	800119a <HAL_RCC_OscConfig+0x312>
 800118c:	4b7b      	ldr	r3, [pc, #492]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	4a7a      	ldr	r2, [pc, #488]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6213      	str	r3, [r2, #32]
 8001198:	e02d      	b.n	80011f6 <HAL_RCC_OscConfig+0x36e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10c      	bne.n	80011bc <HAL_RCC_OscConfig+0x334>
 80011a2:	4b76      	ldr	r3, [pc, #472]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	4a75      	ldr	r2, [pc, #468]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80011a8:	f023 0301 	bic.w	r3, r3, #1
 80011ac:	6213      	str	r3, [r2, #32]
 80011ae:	4b73      	ldr	r3, [pc, #460]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	4a72      	ldr	r2, [pc, #456]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80011b4:	f023 0304 	bic.w	r3, r3, #4
 80011b8:	6213      	str	r3, [r2, #32]
 80011ba:	e01c      	b.n	80011f6 <HAL_RCC_OscConfig+0x36e>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	2b05      	cmp	r3, #5
 80011c2:	d10c      	bne.n	80011de <HAL_RCC_OscConfig+0x356>
 80011c4:	4b6d      	ldr	r3, [pc, #436]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	4a6c      	ldr	r2, [pc, #432]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	6213      	str	r3, [r2, #32]
 80011d0:	4b6a      	ldr	r3, [pc, #424]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	4a69      	ldr	r2, [pc, #420]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	6213      	str	r3, [r2, #32]
 80011dc:	e00b      	b.n	80011f6 <HAL_RCC_OscConfig+0x36e>
 80011de:	4b67      	ldr	r3, [pc, #412]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	4a66      	ldr	r2, [pc, #408]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80011e4:	f023 0301 	bic.w	r3, r3, #1
 80011e8:	6213      	str	r3, [r2, #32]
 80011ea:	4b64      	ldr	r3, [pc, #400]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80011ec:	6a1b      	ldr	r3, [r3, #32]
 80011ee:	4a63      	ldr	r2, [pc, #396]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80011f0:	f023 0304 	bic.w	r3, r3, #4
 80011f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d015      	beq.n	800122a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fe:	f7ff fb8d 	bl	800091c <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001204:	e00a      	b.n	800121c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001206:	f7ff fb89 	bl	800091c <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	f241 3288 	movw	r2, #5000	; 0x1388
 8001214:	4293      	cmp	r3, r2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e0ab      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800121c:	4b57      	ldr	r3, [pc, #348]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0ee      	beq.n	8001206 <HAL_RCC_OscConfig+0x37e>
 8001228:	e014      	b.n	8001254 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122a:	f7ff fb77 	bl	800091c <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001230:	e00a      	b.n	8001248 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001232:	f7ff fb73 	bl	800091c <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001240:	4293      	cmp	r3, r2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e095      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001248:	4b4c      	ldr	r3, [pc, #304]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1ee      	bne.n	8001232 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001254:	7dfb      	ldrb	r3, [r7, #23]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d105      	bne.n	8001266 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800125a:	4b48      	ldr	r3, [pc, #288]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	4a47      	ldr	r2, [pc, #284]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 8001260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001264:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 8081 	beq.w	8001372 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001270:	4b42      	ldr	r3, [pc, #264]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 030c 	and.w	r3, r3, #12
 8001278:	2b08      	cmp	r3, #8
 800127a:	d061      	beq.n	8001340 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69db      	ldr	r3, [r3, #28]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d146      	bne.n	8001312 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001284:	4b3f      	ldr	r3, [pc, #252]	; (8001384 <HAL_RCC_OscConfig+0x4fc>)
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128a:	f7ff fb47 	bl	800091c <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001292:	f7ff fb43 	bl	800091c <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e067      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a4:	4b35      	ldr	r3, [pc, #212]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f0      	bne.n	8001292 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b8:	d108      	bne.n	80012cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012ba:	4b30      	ldr	r3, [pc, #192]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	492d      	ldr	r1, [pc, #180]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012cc:	4b2b      	ldr	r3, [pc, #172]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a19      	ldr	r1, [r3, #32]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	430b      	orrs	r3, r1
 80012de:	4927      	ldr	r1, [pc, #156]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012e4:	4b27      	ldr	r3, [pc, #156]	; (8001384 <HAL_RCC_OscConfig+0x4fc>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ea:	f7ff fb17 	bl	800091c <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f2:	f7ff fb13 	bl	800091c <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e037      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001304:	4b1d      	ldr	r3, [pc, #116]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_OscConfig+0x46a>
 8001310:	e02f      	b.n	8001372 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001312:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <HAL_RCC_OscConfig+0x4fc>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fb00 	bl	800091c <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001320:	f7ff fafc 	bl	800091c <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e020      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001332:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x498>
 800133e:	e018      	b.n	8001372 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e013      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	429a      	cmp	r2, r3
 800135e:	d106      	bne.n	800136e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136a:	429a      	cmp	r2, r3
 800136c:	d001      	beq.n	8001372 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40021000 	.word	0x40021000
 8001380:	40007000 	.word	0x40007000
 8001384:	42420060 	.word	0x42420060

08001388 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e0d0      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800139c:	4b6a      	ldr	r3, [pc, #424]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d910      	bls.n	80013cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013aa:	4b67      	ldr	r3, [pc, #412]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f023 0207 	bic.w	r2, r3, #7
 80013b2:	4965      	ldr	r1, [pc, #404]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ba:	4b63      	ldr	r3, [pc, #396]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d001      	beq.n	80013cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e0b8      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d020      	beq.n	800141a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013e4:	4b59      	ldr	r3, [pc, #356]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	4a58      	ldr	r2, [pc, #352]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d005      	beq.n	8001408 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013fc:	4b53      	ldr	r3, [pc, #332]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	4a52      	ldr	r2, [pc, #328]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001406:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001408:	4b50      	ldr	r3, [pc, #320]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	494d      	ldr	r1, [pc, #308]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001416:	4313      	orrs	r3, r2
 8001418:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	2b00      	cmp	r3, #0
 8001424:	d040      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d107      	bne.n	800143e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142e:	4b47      	ldr	r3, [pc, #284]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d115      	bne.n	8001466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e07f      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d107      	bne.n	8001456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001446:	4b41      	ldr	r3, [pc, #260]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d109      	bne.n	8001466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e073      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001456:	4b3d      	ldr	r3, [pc, #244]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e06b      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001466:	4b39      	ldr	r3, [pc, #228]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f023 0203 	bic.w	r2, r3, #3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	4936      	ldr	r1, [pc, #216]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001474:	4313      	orrs	r3, r2
 8001476:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001478:	f7ff fa50 	bl	800091c <HAL_GetTick>
 800147c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800147e:	e00a      	b.n	8001496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001480:	f7ff fa4c 	bl	800091c <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	f241 3288 	movw	r2, #5000	; 0x1388
 800148e:	4293      	cmp	r3, r2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e053      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001496:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 020c 	and.w	r2, r3, #12
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d1eb      	bne.n	8001480 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014a8:	4b27      	ldr	r3, [pc, #156]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d210      	bcs.n	80014d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f023 0207 	bic.w	r2, r3, #7
 80014be:	4922      	ldr	r1, [pc, #136]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c6:	4b20      	ldr	r3, [pc, #128]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d001      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e032      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d008      	beq.n	80014f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	4916      	ldr	r1, [pc, #88]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d009      	beq.n	8001516 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001502:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	490e      	ldr	r1, [pc, #56]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001512:	4313      	orrs	r3, r2
 8001514:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001516:	f000 f821 	bl	800155c <HAL_RCC_GetSysClockFreq>
 800151a:	4602      	mov	r2, r0
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	490a      	ldr	r1, [pc, #40]	; (8001550 <HAL_RCC_ClockConfig+0x1c8>)
 8001528:	5ccb      	ldrb	r3, [r1, r3]
 800152a:	fa22 f303 	lsr.w	r3, r2, r3
 800152e:	4a09      	ldr	r2, [pc, #36]	; (8001554 <HAL_RCC_ClockConfig+0x1cc>)
 8001530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_RCC_ClockConfig+0x1d0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff f876 	bl	8000628 <HAL_InitTick>

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40022000 	.word	0x40022000
 800154c:	40021000 	.word	0x40021000
 8001550:	08005474 	.word	0x08005474
 8001554:	20000000 	.word	0x20000000
 8001558:	20000004 	.word	0x20000004

0800155c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800155c:	b490      	push	{r4, r7}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001562:	4b2a      	ldr	r3, [pc, #168]	; (800160c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001564:	1d3c      	adds	r4, r7, #4
 8001566:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001568:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800156c:	f240 2301 	movw	r3, #513	; 0x201
 8001570:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001586:	4b22      	ldr	r3, [pc, #136]	; (8001610 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	2b04      	cmp	r3, #4
 8001594:	d002      	beq.n	800159c <HAL_RCC_GetSysClockFreq+0x40>
 8001596:	2b08      	cmp	r3, #8
 8001598:	d003      	beq.n	80015a2 <HAL_RCC_GetSysClockFreq+0x46>
 800159a:	e02d      	b.n	80015f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <HAL_RCC_GetSysClockFreq+0xb8>)
 800159e:	623b      	str	r3, [r7, #32]
      break;
 80015a0:	e02d      	b.n	80015fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	0c9b      	lsrs	r3, r3, #18
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015ae:	4413      	add	r3, r2
 80015b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d013      	beq.n	80015e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015c0:	4b13      	ldr	r3, [pc, #76]	; (8001610 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	0c5b      	lsrs	r3, r3, #17
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015ce:	4413      	add	r3, r2
 80015d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	4a0e      	ldr	r2, [pc, #56]	; (8001614 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015da:	fb02 f203 	mul.w	r2, r2, r3
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
 80015e6:	e004      	b.n	80015f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015ec:	fb02 f303 	mul.w	r3, r2, r3
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	623b      	str	r3, [r7, #32]
      break;
 80015f6:	e002      	b.n	80015fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015fa:	623b      	str	r3, [r7, #32]
      break;
 80015fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015fe:	6a3b      	ldr	r3, [r7, #32]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3728      	adds	r7, #40	; 0x28
 8001604:	46bd      	mov	sp, r7
 8001606:	bc90      	pop	{r4, r7}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	08005428 	.word	0x08005428
 8001610:	40021000 	.word	0x40021000
 8001614:	007a1200 	.word	0x007a1200
 8001618:	003d0900 	.word	0x003d0900

0800161c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001620:	4b02      	ldr	r3, [pc, #8]	; (800162c <HAL_RCC_GetHCLKFreq+0x10>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	20000000 	.word	0x20000000

08001630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001634:	f7ff fff2 	bl	800161c <HAL_RCC_GetHCLKFreq>
 8001638:	4602      	mov	r2, r0
 800163a:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	0a1b      	lsrs	r3, r3, #8
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	4903      	ldr	r1, [pc, #12]	; (8001654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001646:	5ccb      	ldrb	r3, [r1, r3]
 8001648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800164c:	4618      	mov	r0, r3
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40021000 	.word	0x40021000
 8001654:	08005484 	.word	0x08005484

08001658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800165c:	f7ff ffde 	bl	800161c <HAL_RCC_GetHCLKFreq>
 8001660:	4602      	mov	r2, r0
 8001662:	4b05      	ldr	r3, [pc, #20]	; (8001678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	0adb      	lsrs	r3, r3, #11
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	4903      	ldr	r1, [pc, #12]	; (800167c <HAL_RCC_GetPCLK2Freq+0x24>)
 800166e:	5ccb      	ldrb	r3, [r1, r3]
 8001670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001674:	4618      	mov	r0, r3
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40021000 	.word	0x40021000
 800167c:	08005484 	.word	0x08005484

08001680 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	220f      	movs	r2, #15
 800168e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_RCC_GetClockConfig+0x58>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 0203 	and.w	r2, r3, #3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800169c:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <HAL_RCC_GetClockConfig+0x58>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_RCC_GetClockConfig+0x58>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <HAL_RCC_GetClockConfig+0x58>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	08db      	lsrs	r3, r3, #3
 80016ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_RCC_GetClockConfig+0x5c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0207 	and.w	r2, r3, #7
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40022000 	.word	0x40022000

080016e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <RCC_Delay+0x34>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <RCC_Delay+0x38>)
 80016ee:	fba2 2303 	umull	r2, r3, r2, r3
 80016f2:	0a5b      	lsrs	r3, r3, #9
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	fb02 f303 	mul.w	r3, r2, r3
 80016fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016fc:	bf00      	nop
  }
  while (Delay --);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1e5a      	subs	r2, r3, #1
 8001702:	60fa      	str	r2, [r7, #12]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f9      	bne.n	80016fc <RCC_Delay+0x1c>
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	20000000 	.word	0x20000000
 8001718:	10624dd3 	.word	0x10624dd3

0800171c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e041      	b.n	80017b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d106      	bne.n	8001748 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f839 	bl	80017ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2202      	movs	r2, #2
 800174c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3304      	adds	r3, #4
 8001758:	4619      	mov	r1, r3
 800175a:	4610      	mov	r0, r2
 800175c:	f000 f9b4 	bl	8001ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d001      	beq.n	80017e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e03a      	b.n	800185a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2202      	movs	r2, #2
 80017e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0201 	orr.w	r2, r2, #1
 80017fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a18      	ldr	r2, [pc, #96]	; (8001864 <HAL_TIM_Base_Start_IT+0x98>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d00e      	beq.n	8001824 <HAL_TIM_Base_Start_IT+0x58>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800180e:	d009      	beq.n	8001824 <HAL_TIM_Base_Start_IT+0x58>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a14      	ldr	r2, [pc, #80]	; (8001868 <HAL_TIM_Base_Start_IT+0x9c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d004      	beq.n	8001824 <HAL_TIM_Base_Start_IT+0x58>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a13      	ldr	r2, [pc, #76]	; (800186c <HAL_TIM_Base_Start_IT+0xa0>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d111      	bne.n	8001848 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b06      	cmp	r3, #6
 8001834:	d010      	beq.n	8001858 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f042 0201 	orr.w	r2, r2, #1
 8001844:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001846:	e007      	b.n	8001858 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0201 	orr.w	r2, r2, #1
 8001856:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	40012c00 	.word	0x40012c00
 8001868:	40000400 	.word	0x40000400
 800186c:	40000800 	.word	0x40000800

08001870 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b02      	cmp	r3, #2
 8001884:	d122      	bne.n	80018cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b02      	cmp	r3, #2
 8001892:	d11b      	bne.n	80018cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f06f 0202 	mvn.w	r2, #2
 800189c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f8ed 	bl	8001a92 <HAL_TIM_IC_CaptureCallback>
 80018b8:	e005      	b.n	80018c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f8e0 	bl	8001a80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f8ef 	bl	8001aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d122      	bne.n	8001920 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d11b      	bne.n	8001920 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f06f 0204 	mvn.w	r2, #4
 80018f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2202      	movs	r2, #2
 80018f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f8c3 	bl	8001a92 <HAL_TIM_IC_CaptureCallback>
 800190c:	e005      	b.n	800191a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f8b6 	bl	8001a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f8c5 	bl	8001aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b08      	cmp	r3, #8
 800192c:	d122      	bne.n	8001974 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b08      	cmp	r3, #8
 800193a:	d11b      	bne.n	8001974 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f06f 0208 	mvn.w	r2, #8
 8001944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2204      	movs	r2, #4
 800194a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f899 	bl	8001a92 <HAL_TIM_IC_CaptureCallback>
 8001960:	e005      	b.n	800196e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f88c 	bl	8001a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f89b 	bl	8001aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	2b10      	cmp	r3, #16
 8001980:	d122      	bne.n	80019c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	2b10      	cmp	r3, #16
 800198e:	d11b      	bne.n	80019c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f06f 0210 	mvn.w	r2, #16
 8001998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2208      	movs	r2, #8
 800199e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f86f 	bl	8001a92 <HAL_TIM_IC_CaptureCallback>
 80019b4:	e005      	b.n	80019c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 f862 	bl	8001a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f871 	bl	8001aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d10e      	bne.n	80019f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d107      	bne.n	80019f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f06f 0201 	mvn.w	r2, #1
 80019ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7fe fdca 	bl	8000588 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fe:	2b80      	cmp	r3, #128	; 0x80
 8001a00:	d10e      	bne.n	8001a20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0c:	2b80      	cmp	r3, #128	; 0x80
 8001a0e:	d107      	bne.n	8001a20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f8bf 	bl	8001b9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a2a:	2b40      	cmp	r3, #64	; 0x40
 8001a2c:	d10e      	bne.n	8001a4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a38:	2b40      	cmp	r3, #64	; 0x40
 8001a3a:	d107      	bne.n	8001a4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f835 	bl	8001ab6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	f003 0320 	and.w	r3, r3, #32
 8001a56:	2b20      	cmp	r3, #32
 8001a58:	d10e      	bne.n	8001a78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	2b20      	cmp	r3, #32
 8001a66:	d107      	bne.n	8001a78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f06f 0220 	mvn.w	r2, #32
 8001a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f88a 	bl	8001b8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a29      	ldr	r2, [pc, #164]	; (8001b80 <TIM_Base_SetConfig+0xb8>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d00b      	beq.n	8001af8 <TIM_Base_SetConfig+0x30>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae6:	d007      	beq.n	8001af8 <TIM_Base_SetConfig+0x30>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a26      	ldr	r2, [pc, #152]	; (8001b84 <TIM_Base_SetConfig+0xbc>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d003      	beq.n	8001af8 <TIM_Base_SetConfig+0x30>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a25      	ldr	r2, [pc, #148]	; (8001b88 <TIM_Base_SetConfig+0xc0>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d108      	bne.n	8001b0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a1c      	ldr	r2, [pc, #112]	; (8001b80 <TIM_Base_SetConfig+0xb8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d00b      	beq.n	8001b2a <TIM_Base_SetConfig+0x62>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b18:	d007      	beq.n	8001b2a <TIM_Base_SetConfig+0x62>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a19      	ldr	r2, [pc, #100]	; (8001b84 <TIM_Base_SetConfig+0xbc>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d003      	beq.n	8001b2a <TIM_Base_SetConfig+0x62>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a18      	ldr	r2, [pc, #96]	; (8001b88 <TIM_Base_SetConfig+0xc0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d108      	bne.n	8001b3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a07      	ldr	r2, [pc, #28]	; (8001b80 <TIM_Base_SetConfig+0xb8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d103      	bne.n	8001b70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	615a      	str	r2, [r3, #20]
}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	40012c00 	.word	0x40012c00
 8001b84:	40000400 	.word	0x40000400
 8001b88:	40000800 	.word	0x40000800

08001b8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e03f      	b.n	8001c42 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d106      	bne.n	8001bdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7fe fe08 	bl	80007ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2224      	movs	r2, #36	; 0x24
 8001be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f905 	bl	8001e04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	695a      	ldr	r2, [r3, #20]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2220      	movs	r2, #32
 8001c34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b08a      	sub	sp, #40	; 0x28
 8001c4e:	af02      	add	r7, sp, #8
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	603b      	str	r3, [r7, #0]
 8001c56:	4613      	mov	r3, r2
 8001c58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b20      	cmp	r3, #32
 8001c68:	d17c      	bne.n	8001d64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <HAL_UART_Transmit+0x2c>
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e075      	b.n	8001d66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <HAL_UART_Transmit+0x3e>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e06e      	b.n	8001d66 <HAL_UART_Transmit+0x11c>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2221      	movs	r2, #33	; 0x21
 8001c9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001c9e:	f7fe fe3d 	bl	800091c <HAL_GetTick>
 8001ca2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	88fa      	ldrh	r2, [r7, #6]
 8001ca8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	88fa      	ldrh	r2, [r7, #6]
 8001cae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cb8:	d108      	bne.n	8001ccc <HAL_UART_Transmit+0x82>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d104      	bne.n	8001ccc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	61bb      	str	r3, [r7, #24]
 8001cca:	e003      	b.n	8001cd4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001cdc:	e02a      	b.n	8001d34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2180      	movs	r1, #128	; 0x80
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 f840 	bl	8001d6e <UART_WaitOnFlagUntilTimeout>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e036      	b.n	8001d66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10b      	bne.n	8001d16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	3302      	adds	r3, #2
 8001d12:	61bb      	str	r3, [r7, #24]
 8001d14:	e007      	b.n	8001d26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	781a      	ldrb	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	3301      	adds	r3, #1
 8001d24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1cf      	bne.n	8001cde <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2200      	movs	r2, #0
 8001d46:	2140      	movs	r1, #64	; 0x40
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f000 f810 	bl	8001d6e <UART_WaitOnFlagUntilTimeout>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e006      	b.n	8001d66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	e000      	b.n	8001d66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d64:	2302      	movs	r3, #2
  }
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3720      	adds	r7, #32
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b084      	sub	sp, #16
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	603b      	str	r3, [r7, #0]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d7e:	e02c      	b.n	8001dda <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d86:	d028      	beq.n	8001dda <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d007      	beq.n	8001d9e <UART_WaitOnFlagUntilTimeout+0x30>
 8001d8e:	f7fe fdc5 	bl	800091c <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d21d      	bcs.n	8001dda <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001dac:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	695a      	ldr	r2, [r3, #20]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0201 	bic.w	r2, r2, #1
 8001dbc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e00f      	b.n	8001dfa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	4013      	ands	r3, r2
 8001de4:	68ba      	ldr	r2, [r7, #8]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	bf0c      	ite	eq
 8001dea:	2301      	moveq	r3, #1
 8001dec:	2300      	movne	r3, #0
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d0c3      	beq.n	8001d80 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001e3e:	f023 030c 	bic.w	r3, r3, #12
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	68b9      	ldr	r1, [r7, #8]
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699a      	ldr	r2, [r3, #24]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a2c      	ldr	r2, [pc, #176]	; (8001f18 <UART_SetConfig+0x114>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d103      	bne.n	8001e74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e6c:	f7ff fbf4 	bl	8001658 <HAL_RCC_GetPCLK2Freq>
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	e002      	b.n	8001e7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e74:	f7ff fbdc 	bl	8001630 <HAL_RCC_GetPCLK1Freq>
 8001e78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	009a      	lsls	r2, r3, #2
 8001e84:	441a      	add	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e90:	4a22      	ldr	r2, [pc, #136]	; (8001f1c <UART_SetConfig+0x118>)
 8001e92:	fba2 2303 	umull	r2, r3, r2, r3
 8001e96:	095b      	lsrs	r3, r3, #5
 8001e98:	0119      	lsls	r1, r3, #4
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009a      	lsls	r2, r3, #2
 8001ea4:	441a      	add	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eb0:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <UART_SetConfig+0x118>)
 8001eb2:	fba3 0302 	umull	r0, r3, r3, r2
 8001eb6:	095b      	lsrs	r3, r3, #5
 8001eb8:	2064      	movs	r0, #100	; 0x64
 8001eba:	fb00 f303 	mul.w	r3, r0, r3
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	3332      	adds	r3, #50	; 0x32
 8001ec4:	4a15      	ldr	r2, [pc, #84]	; (8001f1c <UART_SetConfig+0x118>)
 8001ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ed0:	4419      	add	r1, r3
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	009a      	lsls	r2, r3, #2
 8001edc:	441a      	add	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <UART_SetConfig+0x118>)
 8001eea:	fba3 0302 	umull	r0, r3, r3, r2
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	2064      	movs	r0, #100	; 0x64
 8001ef2:	fb00 f303 	mul.w	r3, r0, r3
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	011b      	lsls	r3, r3, #4
 8001efa:	3332      	adds	r3, #50	; 0x32
 8001efc:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <UART_SetConfig+0x118>)
 8001efe:	fba2 2303 	umull	r2, r3, r2, r3
 8001f02:	095b      	lsrs	r3, r3, #5
 8001f04:	f003 020f 	and.w	r2, r3, #15
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	440a      	add	r2, r1
 8001f0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001f10:	bf00      	nop
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40013800 	.word	0x40013800
 8001f1c:	51eb851f 	.word	0x51eb851f

08001f20 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f26:	f3ef 8305 	mrs	r3, IPSR
 8001f2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8001f2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10f      	bne.n	8001f52 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f32:	f3ef 8310 	mrs	r3, PRIMASK
 8001f36:	607b      	str	r3, [r7, #4]
  return(result);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d109      	bne.n	8001f52 <osKernelInitialize+0x32>
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <osKernelInitialize+0x60>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d109      	bne.n	8001f5a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001f46:	f3ef 8311 	mrs	r3, BASEPRI
 8001f4a:	603b      	str	r3, [r7, #0]
  return(result);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001f52:	f06f 0305 	mvn.w	r3, #5
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	e00c      	b.n	8001f74 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <osKernelInitialize+0x60>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d105      	bne.n	8001f6e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001f62:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <osKernelInitialize+0x60>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	e002      	b.n	8001f74 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f72:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001f74:	68fb      	ldr	r3, [r7, #12]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr
 8001f80:	200000a0 	.word	0x200000a0

08001f84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f8a:	f3ef 8305 	mrs	r3, IPSR
 8001f8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001f90:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10f      	bne.n	8001fb6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f96:	f3ef 8310 	mrs	r3, PRIMASK
 8001f9a:	607b      	str	r3, [r7, #4]
  return(result);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d109      	bne.n	8001fb6 <osKernelStart+0x32>
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <osKernelStart+0x64>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d109      	bne.n	8001fbe <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001faa:	f3ef 8311 	mrs	r3, BASEPRI
 8001fae:	603b      	str	r3, [r7, #0]
  return(result);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <osKernelStart+0x3a>
    stat = osErrorISR;
 8001fb6:	f06f 0305 	mvn.w	r3, #5
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	e00e      	b.n	8001fdc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <osKernelStart+0x64>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d107      	bne.n	8001fd6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <osKernelStart+0x64>)
 8001fc8:	2202      	movs	r2, #2
 8001fca:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001fcc:	f001 f978 	bl	80032c0 <vTaskStartScheduler>
      stat = osOK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	e002      	b.n	8001fdc <osKernelStart+0x58>
    } else {
      stat = osError;
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fda:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200000a0 	.word	0x200000a0

08001fec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b092      	sub	sp, #72	; 0x48
 8001ff0:	af04      	add	r7, sp, #16
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ffc:	f3ef 8305 	mrs	r3, IPSR
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002004:	2b00      	cmp	r3, #0
 8002006:	f040 8094 	bne.w	8002132 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800200a:	f3ef 8310 	mrs	r3, PRIMASK
 800200e:	623b      	str	r3, [r7, #32]
  return(result);
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	2b00      	cmp	r3, #0
 8002014:	f040 808d 	bne.w	8002132 <osThreadNew+0x146>
 8002018:	4b48      	ldr	r3, [pc, #288]	; (800213c <osThreadNew+0x150>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d106      	bne.n	800202e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002020:	f3ef 8311 	mrs	r3, BASEPRI
 8002024:	61fb      	str	r3, [r7, #28]
  return(result);
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	2b00      	cmp	r3, #0
 800202a:	f040 8082 	bne.w	8002132 <osThreadNew+0x146>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d07e      	beq.n	8002132 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002038:	2318      	movs	r3, #24
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800203c:	2300      	movs	r3, #0
 800203e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002040:	f107 031b 	add.w	r3, r7, #27
 8002044:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002046:	f04f 33ff 	mov.w	r3, #4294967295
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d045      	beq.n	80020de <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d002      	beq.n	8002060 <osThreadNew+0x74>
        name = attr->name;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800206e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002070:	2b00      	cmp	r3, #0
 8002072:	d008      	beq.n	8002086 <osThreadNew+0x9a>
 8002074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002076:	2b38      	cmp	r3, #56	; 0x38
 8002078:	d805      	bhi.n	8002086 <osThreadNew+0x9a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <osThreadNew+0x9e>
        return (NULL);
 8002086:	2300      	movs	r3, #0
 8002088:	e054      	b.n	8002134 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00e      	beq.n	80020c0 <osThreadNew+0xd4>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	2b5b      	cmp	r3, #91	; 0x5b
 80020a8:	d90a      	bls.n	80020c0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d006      	beq.n	80020c0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d002      	beq.n	80020c0 <osThreadNew+0xd4>
        mem = 1;
 80020ba:	2301      	movs	r3, #1
 80020bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80020be:	e010      	b.n	80020e2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10c      	bne.n	80020e2 <osThreadNew+0xf6>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d108      	bne.n	80020e2 <osThreadNew+0xf6>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d104      	bne.n	80020e2 <osThreadNew+0xf6>
          mem = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
 80020dc:	e001      	b.n	80020e2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80020e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d110      	bne.n	800210a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020f0:	9202      	str	r2, [sp, #8]
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 fde4 	bl	8002ccc <xTaskCreateStatic>
 8002104:	4603      	mov	r3, r0
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	e013      	b.n	8002132 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800210a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210c:	2b00      	cmp	r3, #0
 800210e:	d110      	bne.n	8002132 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002112:	b29a      	uxth	r2, r3
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	9301      	str	r3, [sp, #4]
 800211a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 fe2e 	bl	8002d84 <xTaskCreate>
 8002128:	4603      	mov	r3, r0
 800212a:	2b01      	cmp	r3, #1
 800212c:	d001      	beq.n	8002132 <osThreadNew+0x146>
          hTask = NULL;
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002132:	697b      	ldr	r3, [r7, #20]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3738      	adds	r7, #56	; 0x38
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	200000a0 	.word	0x200000a0

08002140 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4a06      	ldr	r2, [pc, #24]	; (8002168 <vApplicationGetIdleTaskMemory+0x28>)
 8002150:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	4a05      	ldr	r2, [pc, #20]	; (800216c <vApplicationGetIdleTaskMemory+0x2c>)
 8002156:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2280      	movs	r2, #128	; 0x80
 800215c:	601a      	str	r2, [r3, #0]
}
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	200000a4 	.word	0x200000a4
 800216c:	20000100 	.word	0x20000100

08002170 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4a07      	ldr	r2, [pc, #28]	; (800219c <vApplicationGetTimerTaskMemory+0x2c>)
 8002180:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	4a06      	ldr	r2, [pc, #24]	; (80021a0 <vApplicationGetTimerTaskMemory+0x30>)
 8002186:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800218e:	601a      	str	r2, [r3, #0]
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	20000300 	.word	0x20000300
 80021a0:	2000035c 	.word	0x2000035c

080021a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f103 0208 	add.w	r2, r3, #8
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f04f 32ff 	mov.w	r2, #4294967295
 80021bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f103 0208 	add.w	r2, r3, #8
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f103 0208 	add.w	r2, r3, #8
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr

080021e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021fa:	b480      	push	{r7}
 80021fc:	b085      	sub	sp, #20
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	601a      	str	r2, [r3, #0]
}
 8002236:	bf00      	nop
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002256:	d103      	bne.n	8002260 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	e00c      	b.n	800227a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3308      	adds	r3, #8
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	e002      	b.n	800226e <vListInsert+0x2e>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	429a      	cmp	r2, r3
 8002278:	d2f6      	bcs.n	8002268 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	601a      	str	r2, [r3, #0]
}
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6892      	ldr	r2, [r2, #8]
 80022c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6852      	ldr	r2, [r2, #4]
 80022d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d103      	bne.n	80022e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	1e5a      	subs	r2, r3, #1
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr
	...

08002304 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10a      	bne.n	800232e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231c:	f383 8811 	msr	BASEPRI, r3
 8002320:	f3bf 8f6f 	isb	sy
 8002324:	f3bf 8f4f 	dsb	sy
 8002328:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800232a:	bf00      	nop
 800232c:	e7fe      	b.n	800232c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800232e:	f002 f8f5 	bl	800451c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233a:	68f9      	ldr	r1, [r7, #12]
 800233c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	441a      	add	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235e:	3b01      	subs	r3, #1
 8002360:	68f9      	ldr	r1, [r7, #12]
 8002362:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002364:	fb01 f303 	mul.w	r3, r1, r3
 8002368:	441a      	add	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	22ff      	movs	r2, #255	; 0xff
 8002372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	22ff      	movs	r2, #255	; 0xff
 800237a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d114      	bne.n	80023ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d01a      	beq.n	80023c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	3310      	adds	r3, #16
 8002390:	4618      	mov	r0, r3
 8002392:	f001 fa1f 	bl	80037d4 <xTaskRemoveFromEventList>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d012      	beq.n	80023c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <xQueueGenericReset+0xcc>)
 800239e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	f3bf 8f4f 	dsb	sy
 80023a8:	f3bf 8f6f 	isb	sy
 80023ac:	e009      	b.n	80023c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	3310      	adds	r3, #16
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fef6 	bl	80021a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3324      	adds	r3, #36	; 0x24
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fef1 	bl	80021a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80023c2:	f002 f8db 	bl	800457c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80023c6:	2301      	movs	r3, #1
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	e000ed04 	.word	0xe000ed04

080023d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08e      	sub	sp, #56	; 0x38
 80023d8:	af02      	add	r7, sp, #8
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
 80023e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10a      	bne.n	80023fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80023e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ec:	f383 8811 	msr	BASEPRI, r3
 80023f0:	f3bf 8f6f 	isb	sy
 80023f4:	f3bf 8f4f 	dsb	sy
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80023fa:	bf00      	nop
 80023fc:	e7fe      	b.n	80023fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10a      	bne.n	800241a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002408:	f383 8811 	msr	BASEPRI, r3
 800240c:	f3bf 8f6f 	isb	sy
 8002410:	f3bf 8f4f 	dsb	sy
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002416:	bf00      	nop
 8002418:	e7fe      	b.n	8002418 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <xQueueGenericCreateStatic+0x52>
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <xQueueGenericCreateStatic+0x56>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <xQueueGenericCreateStatic+0x58>
 800242a:	2300      	movs	r3, #0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10a      	bne.n	8002446 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002434:	f383 8811 	msr	BASEPRI, r3
 8002438:	f3bf 8f6f 	isb	sy
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	623b      	str	r3, [r7, #32]
}
 8002442:	bf00      	nop
 8002444:	e7fe      	b.n	8002444 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d102      	bne.n	8002452 <xQueueGenericCreateStatic+0x7e>
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <xQueueGenericCreateStatic+0x82>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <xQueueGenericCreateStatic+0x84>
 8002456:	2300      	movs	r3, #0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10a      	bne.n	8002472 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800245c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002460:	f383 8811 	msr	BASEPRI, r3
 8002464:	f3bf 8f6f 	isb	sy
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	61fb      	str	r3, [r7, #28]
}
 800246e:	bf00      	nop
 8002470:	e7fe      	b.n	8002470 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002472:	2350      	movs	r3, #80	; 0x50
 8002474:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2b50      	cmp	r3, #80	; 0x50
 800247a:	d00a      	beq.n	8002492 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800247c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002480:	f383 8811 	msr	BASEPRI, r3
 8002484:	f3bf 8f6f 	isb	sy
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	61bb      	str	r3, [r7, #24]
}
 800248e:	bf00      	nop
 8002490:	e7fe      	b.n	8002490 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00d      	beq.n	80024b8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024a4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80024a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	4613      	mov	r3, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68b9      	ldr	r1, [r7, #8]
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f805 	bl	80024c2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80024b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3730      	adds	r7, #48	; 0x30
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b084      	sub	sp, #16
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	607a      	str	r2, [r7, #4]
 80024ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d103      	bne.n	80024de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e002      	b.n	80024e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024f0:	2101      	movs	r1, #1
 80024f2:	69b8      	ldr	r0, [r7, #24]
 80024f4:	f7ff ff06 	bl	8002304 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	78fa      	ldrb	r2, [r7, #3]
 80024fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002500:	bf00      	nop
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08e      	sub	sp, #56	; 0x38
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
 8002514:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002516:	2300      	movs	r3, #0
 8002518:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10a      	bne.n	800253a <xQueueGenericSend+0x32>
	__asm volatile
 8002524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002528:	f383 8811 	msr	BASEPRI, r3
 800252c:	f3bf 8f6f 	isb	sy
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002536:	bf00      	nop
 8002538:	e7fe      	b.n	8002538 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d103      	bne.n	8002548 <xQueueGenericSend+0x40>
 8002540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <xQueueGenericSend+0x44>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <xQueueGenericSend+0x46>
 800254c:	2300      	movs	r3, #0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10a      	bne.n	8002568 <xQueueGenericSend+0x60>
	__asm volatile
 8002552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002556:	f383 8811 	msr	BASEPRI, r3
 800255a:	f3bf 8f6f 	isb	sy
 800255e:	f3bf 8f4f 	dsb	sy
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002564:	bf00      	nop
 8002566:	e7fe      	b.n	8002566 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d103      	bne.n	8002576 <xQueueGenericSend+0x6e>
 800256e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <xQueueGenericSend+0x72>
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <xQueueGenericSend+0x74>
 800257a:	2300      	movs	r3, #0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10a      	bne.n	8002596 <xQueueGenericSend+0x8e>
	__asm volatile
 8002580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002584:	f383 8811 	msr	BASEPRI, r3
 8002588:	f3bf 8f6f 	isb	sy
 800258c:	f3bf 8f4f 	dsb	sy
 8002590:	623b      	str	r3, [r7, #32]
}
 8002592:	bf00      	nop
 8002594:	e7fe      	b.n	8002594 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002596:	f001 fadf 	bl	8003b58 <xTaskGetSchedulerState>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d102      	bne.n	80025a6 <xQueueGenericSend+0x9e>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <xQueueGenericSend+0xa2>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <xQueueGenericSend+0xa4>
 80025aa:	2300      	movs	r3, #0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10a      	bne.n	80025c6 <xQueueGenericSend+0xbe>
	__asm volatile
 80025b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b4:	f383 8811 	msr	BASEPRI, r3
 80025b8:	f3bf 8f6f 	isb	sy
 80025bc:	f3bf 8f4f 	dsb	sy
 80025c0:	61fb      	str	r3, [r7, #28]
}
 80025c2:	bf00      	nop
 80025c4:	e7fe      	b.n	80025c4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025c6:	f001 ffa9 	bl	800451c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d302      	bcc.n	80025dc <xQueueGenericSend+0xd4>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d129      	bne.n	8002630 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	68b9      	ldr	r1, [r7, #8]
 80025e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025e2:	f000 fa07 	bl	80029f4 <prvCopyDataToQueue>
 80025e6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d010      	beq.n	8002612 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f2:	3324      	adds	r3, #36	; 0x24
 80025f4:	4618      	mov	r0, r3
 80025f6:	f001 f8ed 	bl	80037d4 <xTaskRemoveFromEventList>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d013      	beq.n	8002628 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002600:	4b3f      	ldr	r3, [pc, #252]	; (8002700 <xQueueGenericSend+0x1f8>)
 8002602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	e00a      	b.n	8002628 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002614:	2b00      	cmp	r3, #0
 8002616:	d007      	beq.n	8002628 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002618:	4b39      	ldr	r3, [pc, #228]	; (8002700 <xQueueGenericSend+0x1f8>)
 800261a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002628:	f001 ffa8 	bl	800457c <vPortExitCritical>
				return pdPASS;
 800262c:	2301      	movs	r3, #1
 800262e:	e063      	b.n	80026f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d103      	bne.n	800263e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002636:	f001 ffa1 	bl	800457c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800263a:	2300      	movs	r3, #0
 800263c:	e05c      	b.n	80026f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800263e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002640:	2b00      	cmp	r3, #0
 8002642:	d106      	bne.n	8002652 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	4618      	mov	r0, r3
 800264a:	f001 f927 	bl	800389c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800264e:	2301      	movs	r3, #1
 8002650:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002652:	f001 ff93 	bl	800457c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002656:	f000 fe99 	bl	800338c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800265a:	f001 ff5f 	bl	800451c <vPortEnterCritical>
 800265e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002664:	b25b      	sxtb	r3, r3
 8002666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266a:	d103      	bne.n	8002674 <xQueueGenericSend+0x16c>
 800266c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002676:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800267a:	b25b      	sxtb	r3, r3
 800267c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002680:	d103      	bne.n	800268a <xQueueGenericSend+0x182>
 8002682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800268a:	f001 ff77 	bl	800457c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800268e:	1d3a      	adds	r2, r7, #4
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f001 f916 	bl	80038c8 <xTaskCheckForTimeOut>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d124      	bne.n	80026ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026a4:	f000 fa9e 	bl	8002be4 <prvIsQueueFull>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d018      	beq.n	80026e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	3310      	adds	r3, #16
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f001 f83c 	bl	8003734 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80026bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026be:	f000 fa29 	bl	8002b14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80026c2:	f000 fe71 	bl	80033a8 <xTaskResumeAll>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f47f af7c 	bne.w	80025c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80026ce:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <xQueueGenericSend+0x1f8>)
 80026d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	f3bf 8f4f 	dsb	sy
 80026da:	f3bf 8f6f 	isb	sy
 80026de:	e772      	b.n	80025c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80026e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026e2:	f000 fa17 	bl	8002b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026e6:	f000 fe5f 	bl	80033a8 <xTaskResumeAll>
 80026ea:	e76c      	b.n	80025c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80026ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ee:	f000 fa11 	bl	8002b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026f2:	f000 fe59 	bl	80033a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80026f6:	2300      	movs	r3, #0
		}
	}
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3738      	adds	r7, #56	; 0x38
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	e000ed04 	.word	0xe000ed04

08002704 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08e      	sub	sp, #56	; 0x38
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10a      	bne.n	8002732 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800271c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002720:	f383 8811 	msr	BASEPRI, r3
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800272e:	bf00      	nop
 8002730:	e7fe      	b.n	8002730 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d103      	bne.n	8002740 <xQueueGenericSendFromISR+0x3c>
 8002738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <xQueueGenericSendFromISR+0x40>
 8002740:	2301      	movs	r3, #1
 8002742:	e000      	b.n	8002746 <xQueueGenericSendFromISR+0x42>
 8002744:	2300      	movs	r3, #0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10a      	bne.n	8002760 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800274a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274e:	f383 8811 	msr	BASEPRI, r3
 8002752:	f3bf 8f6f 	isb	sy
 8002756:	f3bf 8f4f 	dsb	sy
 800275a:	623b      	str	r3, [r7, #32]
}
 800275c:	bf00      	nop
 800275e:	e7fe      	b.n	800275e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d103      	bne.n	800276e <xQueueGenericSendFromISR+0x6a>
 8002766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <xQueueGenericSendFromISR+0x6e>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <xQueueGenericSendFromISR+0x70>
 8002772:	2300      	movs	r3, #0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10a      	bne.n	800278e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277c:	f383 8811 	msr	BASEPRI, r3
 8002780:	f3bf 8f6f 	isb	sy
 8002784:	f3bf 8f4f 	dsb	sy
 8002788:	61fb      	str	r3, [r7, #28]
}
 800278a:	bf00      	nop
 800278c:	e7fe      	b.n	800278c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800278e:	f001 ff87 	bl	80046a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002792:	f3ef 8211 	mrs	r2, BASEPRI
 8002796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279a:	f383 8811 	msr	BASEPRI, r3
 800279e:	f3bf 8f6f 	isb	sy
 80027a2:	f3bf 8f4f 	dsb	sy
 80027a6:	61ba      	str	r2, [r7, #24]
 80027a8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80027aa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d302      	bcc.n	80027c0 <xQueueGenericSendFromISR+0xbc>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d12c      	bne.n	800281a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80027c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	68b9      	ldr	r1, [r7, #8]
 80027ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027d0:	f000 f910 	bl	80029f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80027d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80027d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027dc:	d112      	bne.n	8002804 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d016      	beq.n	8002814 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e8:	3324      	adds	r3, #36	; 0x24
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fff2 	bl	80037d4 <xTaskRemoveFromEventList>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00e      	beq.n	8002814 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00b      	beq.n	8002814 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	e007      	b.n	8002814 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002804:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002808:	3301      	adds	r3, #1
 800280a:	b2db      	uxtb	r3, r3
 800280c:	b25a      	sxtb	r2, r3
 800280e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002814:	2301      	movs	r3, #1
 8002816:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002818:	e001      	b.n	800281e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800281a:	2300      	movs	r3, #0
 800281c:	637b      	str	r3, [r7, #52]	; 0x34
 800281e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002820:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002828:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800282a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800282c:	4618      	mov	r0, r3
 800282e:	3738      	adds	r7, #56	; 0x38
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08c      	sub	sp, #48	; 0x30
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002840:	2300      	movs	r3, #0
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10a      	bne.n	8002864 <xQueueReceive+0x30>
	__asm volatile
 800284e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002852:	f383 8811 	msr	BASEPRI, r3
 8002856:	f3bf 8f6f 	isb	sy
 800285a:	f3bf 8f4f 	dsb	sy
 800285e:	623b      	str	r3, [r7, #32]
}
 8002860:	bf00      	nop
 8002862:	e7fe      	b.n	8002862 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d103      	bne.n	8002872 <xQueueReceive+0x3e>
 800286a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <xQueueReceive+0x42>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <xQueueReceive+0x44>
 8002876:	2300      	movs	r3, #0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10a      	bne.n	8002892 <xQueueReceive+0x5e>
	__asm volatile
 800287c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002880:	f383 8811 	msr	BASEPRI, r3
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	61fb      	str	r3, [r7, #28]
}
 800288e:	bf00      	nop
 8002890:	e7fe      	b.n	8002890 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002892:	f001 f961 	bl	8003b58 <xTaskGetSchedulerState>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d102      	bne.n	80028a2 <xQueueReceive+0x6e>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <xQueueReceive+0x72>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <xQueueReceive+0x74>
 80028a6:	2300      	movs	r3, #0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10a      	bne.n	80028c2 <xQueueReceive+0x8e>
	__asm volatile
 80028ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b0:	f383 8811 	msr	BASEPRI, r3
 80028b4:	f3bf 8f6f 	isb	sy
 80028b8:	f3bf 8f4f 	dsb	sy
 80028bc:	61bb      	str	r3, [r7, #24]
}
 80028be:	bf00      	nop
 80028c0:	e7fe      	b.n	80028c0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80028c2:	f001 fe2b 	bl	800451c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d01f      	beq.n	8002912 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028d2:	68b9      	ldr	r1, [r7, #8]
 80028d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028d6:	f000 f8f7 	bl	8002ac8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	1e5a      	subs	r2, r3, #1
 80028de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00f      	beq.n	800290a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ec:	3310      	adds	r3, #16
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 ff70 	bl	80037d4 <xTaskRemoveFromEventList>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d007      	beq.n	800290a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80028fa:	4b3d      	ldr	r3, [pc, #244]	; (80029f0 <xQueueReceive+0x1bc>)
 80028fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800290a:	f001 fe37 	bl	800457c <vPortExitCritical>
				return pdPASS;
 800290e:	2301      	movs	r3, #1
 8002910:	e069      	b.n	80029e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d103      	bne.n	8002920 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002918:	f001 fe30 	bl	800457c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800291c:	2300      	movs	r3, #0
 800291e:	e062      	b.n	80029e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002926:	f107 0310 	add.w	r3, r7, #16
 800292a:	4618      	mov	r0, r3
 800292c:	f000 ffb6 	bl	800389c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002930:	2301      	movs	r3, #1
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002934:	f001 fe22 	bl	800457c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002938:	f000 fd28 	bl	800338c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800293c:	f001 fdee 	bl	800451c <vPortEnterCritical>
 8002940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002942:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002946:	b25b      	sxtb	r3, r3
 8002948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294c:	d103      	bne.n	8002956 <xQueueReceive+0x122>
 800294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800295c:	b25b      	sxtb	r3, r3
 800295e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002962:	d103      	bne.n	800296c <xQueueReceive+0x138>
 8002964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800296c:	f001 fe06 	bl	800457c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002970:	1d3a      	adds	r2, r7, #4
 8002972:	f107 0310 	add.w	r3, r7, #16
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f000 ffa5 	bl	80038c8 <xTaskCheckForTimeOut>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d123      	bne.n	80029cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002986:	f000 f917 	bl	8002bb8 <prvIsQueueEmpty>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d017      	beq.n	80029c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	3324      	adds	r3, #36	; 0x24
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	4611      	mov	r1, r2
 8002998:	4618      	mov	r0, r3
 800299a:	f000 fecb 	bl	8003734 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800299e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029a0:	f000 f8b8 	bl	8002b14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80029a4:	f000 fd00 	bl	80033a8 <xTaskResumeAll>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d189      	bne.n	80028c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80029ae:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <xQueueReceive+0x1bc>)
 80029b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	f3bf 8f4f 	dsb	sy
 80029ba:	f3bf 8f6f 	isb	sy
 80029be:	e780      	b.n	80028c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80029c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029c2:	f000 f8a7 	bl	8002b14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029c6:	f000 fcef 	bl	80033a8 <xTaskResumeAll>
 80029ca:	e77a      	b.n	80028c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80029cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ce:	f000 f8a1 	bl	8002b14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029d2:	f000 fce9 	bl	80033a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029d8:	f000 f8ee 	bl	8002bb8 <prvIsQueueEmpty>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f43f af6f 	beq.w	80028c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80029e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3730      	adds	r7, #48	; 0x30
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	e000ed04 	.word	0xe000ed04

080029f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10d      	bne.n	8002a2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d14d      	bne.n	8002ab6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f001 f8b8 	bl	8003b94 <xTaskPriorityDisinherit>
 8002a24:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	e043      	b.n	8002ab6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d119      	bne.n	8002a68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6898      	ldr	r0, [r3, #8]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	68b9      	ldr	r1, [r7, #8]
 8002a40:	f002 f86e 	bl	8004b20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	441a      	add	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d32b      	bcc.n	8002ab6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	609a      	str	r2, [r3, #8]
 8002a66:	e026      	b.n	8002ab6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	68d8      	ldr	r0, [r3, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	461a      	mov	r2, r3
 8002a72:	68b9      	ldr	r1, [r7, #8]
 8002a74:	f002 f854 	bl	8004b20 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	425b      	negs	r3, r3
 8002a82:	441a      	add	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d207      	bcs.n	8002aa4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	425b      	negs	r3, r3
 8002a9e:	441a      	add	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d105      	bne.n	8002ab6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002abe:	697b      	ldr	r3, [r7, #20]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d018      	beq.n	8002b0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	441a      	add	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d303      	bcc.n	8002afc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68d9      	ldr	r1, [r3, #12]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	461a      	mov	r2, r3
 8002b06:	6838      	ldr	r0, [r7, #0]
 8002b08:	f002 f80a 	bl	8004b20 <memcpy>
	}
}
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002b1c:	f001 fcfe 	bl	800451c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b28:	e011      	b.n	8002b4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d012      	beq.n	8002b58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3324      	adds	r3, #36	; 0x24
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 fe4c 	bl	80037d4 <xTaskRemoveFromEventList>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002b42:	f000 ff23 	bl	800398c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	dce9      	bgt.n	8002b2a <prvUnlockQueue+0x16>
 8002b56:	e000      	b.n	8002b5a <prvUnlockQueue+0x46>
					break;
 8002b58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	22ff      	movs	r2, #255	; 0xff
 8002b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002b62:	f001 fd0b 	bl	800457c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002b66:	f001 fcd9 	bl	800451c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b72:	e011      	b.n	8002b98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d012      	beq.n	8002ba2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3310      	adds	r3, #16
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 fe27 	bl	80037d4 <xTaskRemoveFromEventList>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002b8c:	f000 fefe 	bl	800398c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002b90:	7bbb      	ldrb	r3, [r7, #14]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	dce9      	bgt.n	8002b74 <prvUnlockQueue+0x60>
 8002ba0:	e000      	b.n	8002ba4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002ba2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	22ff      	movs	r2, #255	; 0xff
 8002ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002bac:	f001 fce6 	bl	800457c <vPortExitCritical>
}
 8002bb0:	bf00      	nop
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002bc0:	f001 fcac 	bl	800451c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d102      	bne.n	8002bd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	e001      	b.n	8002bd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002bd6:	f001 fcd1 	bl	800457c <vPortExitCritical>

	return xReturn;
 8002bda:	68fb      	ldr	r3, [r7, #12]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002bec:	f001 fc96 	bl	800451c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d102      	bne.n	8002c02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	e001      	b.n	8002c06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c06:	f001 fcb9 	bl	800457c <vPortExitCritical>

	return xReturn;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	e014      	b.n	8002c4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c24:	4a0e      	ldr	r2, [pc, #56]	; (8002c60 <vQueueAddToRegistry+0x4c>)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10b      	bne.n	8002c48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c30:	490b      	ldr	r1, [pc, #44]	; (8002c60 <vQueueAddToRegistry+0x4c>)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002c3a:	4a09      	ldr	r2, [pc, #36]	; (8002c60 <vQueueAddToRegistry+0x4c>)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4413      	add	r3, r2
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002c46:	e006      	b.n	8002c56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b07      	cmp	r3, #7
 8002c52:	d9e7      	bls.n	8002c24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr
 8002c60:	20001a40 	.word	0x20001a40

08002c64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002c74:	f001 fc52 	bl	800451c <vPortEnterCritical>
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c7e:	b25b      	sxtb	r3, r3
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d103      	bne.n	8002c8e <vQueueWaitForMessageRestricted+0x2a>
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c94:	b25b      	sxtb	r3, r3
 8002c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9a:	d103      	bne.n	8002ca4 <vQueueWaitForMessageRestricted+0x40>
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ca4:	f001 fc6a 	bl	800457c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d106      	bne.n	8002cbe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	3324      	adds	r3, #36	; 0x24
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	68b9      	ldr	r1, [r7, #8]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fd5f 	bl	800377c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002cbe:	6978      	ldr	r0, [r7, #20]
 8002cc0:	f7ff ff28 	bl	8002b14 <prvUnlockQueue>
	}
 8002cc4:	bf00      	nop
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08e      	sub	sp, #56	; 0x38
 8002cd0:	af04      	add	r7, sp, #16
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10a      	bne.n	8002cf6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce4:	f383 8811 	msr	BASEPRI, r3
 8002ce8:	f3bf 8f6f 	isb	sy
 8002cec:	f3bf 8f4f 	dsb	sy
 8002cf0:	623b      	str	r3, [r7, #32]
}
 8002cf2:	bf00      	nop
 8002cf4:	e7fe      	b.n	8002cf4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10a      	bne.n	8002d12 <xTaskCreateStatic+0x46>
	__asm volatile
 8002cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d00:	f383 8811 	msr	BASEPRI, r3
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	61fb      	str	r3, [r7, #28]
}
 8002d0e:	bf00      	nop
 8002d10:	e7fe      	b.n	8002d10 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d12:	235c      	movs	r3, #92	; 0x5c
 8002d14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	2b5c      	cmp	r3, #92	; 0x5c
 8002d1a:	d00a      	beq.n	8002d32 <xTaskCreateStatic+0x66>
	__asm volatile
 8002d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d20:	f383 8811 	msr	BASEPRI, r3
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	61bb      	str	r3, [r7, #24]
}
 8002d2e:	bf00      	nop
 8002d30:	e7fe      	b.n	8002d30 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d01e      	beq.n	8002d76 <xTaskCreateStatic+0xaa>
 8002d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d01b      	beq.n	8002d76 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d50:	2300      	movs	r3, #0
 8002d52:	9303      	str	r3, [sp, #12]
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	9302      	str	r3, [sp, #8]
 8002d58:	f107 0314 	add.w	r3, r7, #20
 8002d5c:	9301      	str	r3, [sp, #4]
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	68b9      	ldr	r1, [r7, #8]
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 f850 	bl	8002e0e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d70:	f000 f8d4 	bl	8002f1c <prvAddNewTaskToReadyList>
 8002d74:	e001      	b.n	8002d7a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002d7a:	697b      	ldr	r3, [r7, #20]
	}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3728      	adds	r7, #40	; 0x28
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08c      	sub	sp, #48	; 0x30
 8002d88:	af04      	add	r7, sp, #16
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	4613      	mov	r3, r2
 8002d92:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d94:	88fb      	ldrh	r3, [r7, #6]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f001 fcbf 	bl	800471c <pvPortMalloc>
 8002d9e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00e      	beq.n	8002dc4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002da6:	205c      	movs	r0, #92	; 0x5c
 8002da8:	f001 fcb8 	bl	800471c <pvPortMalloc>
 8002dac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	631a      	str	r2, [r3, #48]	; 0x30
 8002dba:	e005      	b.n	8002dc8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002dbc:	6978      	ldr	r0, [r7, #20]
 8002dbe:	f001 fd71 	bl	80048a4 <vPortFree>
 8002dc2:	e001      	b.n	8002dc8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d017      	beq.n	8002dfe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002dd6:	88fa      	ldrh	r2, [r7, #6]
 8002dd8:	2300      	movs	r3, #0
 8002dda:	9303      	str	r3, [sp, #12]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	9302      	str	r3, [sp, #8]
 8002de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de2:	9301      	str	r3, [sp, #4]
 8002de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 f80e 	bl	8002e0e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002df2:	69f8      	ldr	r0, [r7, #28]
 8002df4:	f000 f892 	bl	8002f1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	61bb      	str	r3, [r7, #24]
 8002dfc:	e002      	b.n	8002e04 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002e02:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e04:	69bb      	ldr	r3, [r7, #24]
	}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3720      	adds	r7, #32
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b088      	sub	sp, #32
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	461a      	mov	r2, r3
 8002e26:	21a5      	movs	r1, #165	; 0xa5
 8002e28:	f001 fe88 	bl	8004b3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e36:	3b01      	subs	r3, #1
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	f023 0307 	bic.w	r3, r3, #7
 8002e44:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00a      	beq.n	8002e66 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e54:	f383 8811 	msr	BASEPRI, r3
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	617b      	str	r3, [r7, #20]
}
 8002e62:	bf00      	nop
 8002e64:	e7fe      	b.n	8002e64 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
 8002e6a:	e012      	b.n	8002e92 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	4413      	add	r3, r2
 8002e72:	7819      	ldrb	r1, [r3, #0]
 8002e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	4413      	add	r3, r2
 8002e7a:	3334      	adds	r3, #52	; 0x34
 8002e7c:	460a      	mov	r2, r1
 8002e7e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	4413      	add	r3, r2
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d006      	beq.n	8002e9a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	2b0f      	cmp	r3, #15
 8002e96:	d9e9      	bls.n	8002e6c <prvInitialiseNewTask+0x5e>
 8002e98:	e000      	b.n	8002e9c <prvInitialiseNewTask+0x8e>
		{
			break;
 8002e9a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea6:	2b37      	cmp	r3, #55	; 0x37
 8002ea8:	d901      	bls.n	8002eae <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002eaa:	2337      	movs	r3, #55	; 0x37
 8002eac:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eb2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eb8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff f98c 	bl	80021e2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ecc:	3318      	adds	r3, #24
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff f987 	bl	80021e2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ed8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002edc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ee8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eec:	2200      	movs	r2, #0
 8002eee:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	68f9      	ldr	r1, [r7, #12]
 8002efc:	69b8      	ldr	r0, [r7, #24]
 8002efe:	f001 fa1d 	bl	800433c <pxPortInitialiseStack>
 8002f02:	4602      	mov	r2, r0
 8002f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f06:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f14:	bf00      	nop
 8002f16:	3720      	adds	r7, #32
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f24:	f001 fafa 	bl	800451c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f28:	4b2d      	ldr	r3, [pc, #180]	; (8002fe0 <prvAddNewTaskToReadyList+0xc4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	4a2c      	ldr	r2, [pc, #176]	; (8002fe0 <prvAddNewTaskToReadyList+0xc4>)
 8002f30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f32:	4b2c      	ldr	r3, [pc, #176]	; (8002fe4 <prvAddNewTaskToReadyList+0xc8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d109      	bne.n	8002f4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f3a:	4a2a      	ldr	r2, [pc, #168]	; (8002fe4 <prvAddNewTaskToReadyList+0xc8>)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f40:	4b27      	ldr	r3, [pc, #156]	; (8002fe0 <prvAddNewTaskToReadyList+0xc4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d110      	bne.n	8002f6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f48:	f000 fd44 	bl	80039d4 <prvInitialiseTaskLists>
 8002f4c:	e00d      	b.n	8002f6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f4e:	4b26      	ldr	r3, [pc, #152]	; (8002fe8 <prvAddNewTaskToReadyList+0xcc>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f56:	4b23      	ldr	r3, [pc, #140]	; (8002fe4 <prvAddNewTaskToReadyList+0xc8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d802      	bhi.n	8002f6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f64:	4a1f      	ldr	r2, [pc, #124]	; (8002fe4 <prvAddNewTaskToReadyList+0xc8>)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f6a:	4b20      	ldr	r3, [pc, #128]	; (8002fec <prvAddNewTaskToReadyList+0xd0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	4a1e      	ldr	r2, [pc, #120]	; (8002fec <prvAddNewTaskToReadyList+0xd0>)
 8002f72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f74:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <prvAddNewTaskToReadyList+0xd0>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f80:	4b1b      	ldr	r3, [pc, #108]	; (8002ff0 <prvAddNewTaskToReadyList+0xd4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d903      	bls.n	8002f90 <prvAddNewTaskToReadyList+0x74>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8c:	4a18      	ldr	r2, [pc, #96]	; (8002ff0 <prvAddNewTaskToReadyList+0xd4>)
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4a15      	ldr	r2, [pc, #84]	; (8002ff4 <prvAddNewTaskToReadyList+0xd8>)
 8002f9e:	441a      	add	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	f7ff f927 	bl	80021fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002fac:	f001 fae6 	bl	800457c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002fb0:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <prvAddNewTaskToReadyList+0xcc>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00e      	beq.n	8002fd6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <prvAddNewTaskToReadyList+0xc8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d207      	bcs.n	8002fd6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002fc6:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <prvAddNewTaskToReadyList+0xdc>)
 8002fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	f3bf 8f4f 	dsb	sy
 8002fd2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fd6:	bf00      	nop
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000c30 	.word	0x20000c30
 8002fe4:	2000075c 	.word	0x2000075c
 8002fe8:	20000c3c 	.word	0x20000c3c
 8002fec:	20000c4c 	.word	0x20000c4c
 8002ff0:	20000c38 	.word	0x20000c38
 8002ff4:	20000760 	.word	0x20000760
 8002ff8:	e000ed04 	.word	0xe000ed04

08002ffc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003004:	f001 fa8a 	bl	800451c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d102      	bne.n	8003014 <vTaskDelete+0x18>
 800300e:	4b2c      	ldr	r3, [pc, #176]	; (80030c0 <vTaskDelete+0xc4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	e000      	b.n	8003016 <vTaskDelete+0x1a>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	3304      	adds	r3, #4
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff f947 	bl	80022b0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	2b00      	cmp	r3, #0
 8003028:	d004      	beq.n	8003034 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	3318      	adds	r3, #24
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff f93e 	bl	80022b0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003034:	4b23      	ldr	r3, [pc, #140]	; (80030c4 <vTaskDelete+0xc8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3301      	adds	r3, #1
 800303a:	4a22      	ldr	r2, [pc, #136]	; (80030c4 <vTaskDelete+0xc8>)
 800303c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800303e:	4b20      	ldr	r3, [pc, #128]	; (80030c0 <vTaskDelete+0xc4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	429a      	cmp	r2, r3
 8003046:	d10b      	bne.n	8003060 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	3304      	adds	r3, #4
 800304c:	4619      	mov	r1, r3
 800304e:	481e      	ldr	r0, [pc, #120]	; (80030c8 <vTaskDelete+0xcc>)
 8003050:	f7ff f8d3 	bl	80021fa <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003054:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <vTaskDelete+0xd0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3301      	adds	r3, #1
 800305a:	4a1c      	ldr	r2, [pc, #112]	; (80030cc <vTaskDelete+0xd0>)
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	e009      	b.n	8003074 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003060:	4b1b      	ldr	r3, [pc, #108]	; (80030d0 <vTaskDelete+0xd4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3b01      	subs	r3, #1
 8003066:	4a1a      	ldr	r2, [pc, #104]	; (80030d0 <vTaskDelete+0xd4>)
 8003068:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 fd20 	bl	8003ab0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003070:	f000 fd4e 	bl	8003b10 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8003074:	f001 fa82 	bl	800457c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003078:	4b16      	ldr	r3, [pc, #88]	; (80030d4 <vTaskDelete+0xd8>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d01b      	beq.n	80030b8 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8003080:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <vTaskDelete+0xc4>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	429a      	cmp	r2, r3
 8003088:	d116      	bne.n	80030b8 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800308a:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <vTaskDelete+0xdc>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00a      	beq.n	80030a8 <vTaskDelete+0xac>
	__asm volatile
 8003092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003096:	f383 8811 	msr	BASEPRI, r3
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	60bb      	str	r3, [r7, #8]
}
 80030a4:	bf00      	nop
 80030a6:	e7fe      	b.n	80030a6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80030a8:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <vTaskDelete+0xe0>)
 80030aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	f3bf 8f4f 	dsb	sy
 80030b4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80030b8:	bf00      	nop
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	2000075c 	.word	0x2000075c
 80030c4:	20000c4c 	.word	0x20000c4c
 80030c8:	20000c04 	.word	0x20000c04
 80030cc:	20000c18 	.word	0x20000c18
 80030d0:	20000c30 	.word	0x20000c30
 80030d4:	20000c3c 	.word	0x20000c3c
 80030d8:	20000c58 	.word	0x20000c58
 80030dc:	e000ed04 	.word	0xe000ed04

080030e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80030e8:	2300      	movs	r3, #0
 80030ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d017      	beq.n	8003122 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80030f2:	4b13      	ldr	r3, [pc, #76]	; (8003140 <vTaskDelay+0x60>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <vTaskDelay+0x30>
	__asm volatile
 80030fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fe:	f383 8811 	msr	BASEPRI, r3
 8003102:	f3bf 8f6f 	isb	sy
 8003106:	f3bf 8f4f 	dsb	sy
 800310a:	60bb      	str	r3, [r7, #8]
}
 800310c:	bf00      	nop
 800310e:	e7fe      	b.n	800310e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003110:	f000 f93c 	bl	800338c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003114:	2100      	movs	r1, #0
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fdaa 	bl	8003c70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800311c:	f000 f944 	bl	80033a8 <xTaskResumeAll>
 8003120:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d107      	bne.n	8003138 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003128:	4b06      	ldr	r3, [pc, #24]	; (8003144 <vTaskDelay+0x64>)
 800312a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003138:	bf00      	nop
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20000c58 	.word	0x20000c58
 8003144:	e000ed04 	.word	0xe000ed04

08003148 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8003150:	f001 f9e4 	bl	800451c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d102      	bne.n	8003160 <uxTaskPriorityGet+0x18>
 800315a:	4b07      	ldr	r3, [pc, #28]	; (8003178 <uxTaskPriorityGet+0x30>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	e000      	b.n	8003162 <uxTaskPriorityGet+0x1a>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 800316a:	f001 fa07 	bl	800457c <vPortExitCritical>

		return uxReturn;
 800316e:	68bb      	ldr	r3, [r7, #8]
	}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	2000075c 	.word	0x2000075c

0800317c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8003186:	2300      	movs	r3, #0
 8003188:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b37      	cmp	r3, #55	; 0x37
 800318e:	d90a      	bls.n	80031a6 <vTaskPrioritySet+0x2a>
	__asm volatile
 8003190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003194:	f383 8811 	msr	BASEPRI, r3
 8003198:	f3bf 8f6f 	isb	sy
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	60fb      	str	r3, [r7, #12]
}
 80031a2:	bf00      	nop
 80031a4:	e7fe      	b.n	80031a4 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b37      	cmp	r3, #55	; 0x37
 80031aa:	d901      	bls.n	80031b0 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80031ac:	2337      	movs	r3, #55	; 0x37
 80031ae:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80031b0:	f001 f9b4 	bl	800451c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d102      	bne.n	80031c0 <vTaskPrioritySet+0x44>
 80031ba:	4b3d      	ldr	r3, [pc, #244]	; (80032b0 <vTaskPrioritySet+0x134>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	e000      	b.n	80031c2 <vTaskPrioritySet+0x46>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c8:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d068      	beq.n	80032a4 <vTaskPrioritySet+0x128>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d90d      	bls.n	80031f6 <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 80031da:	4b35      	ldr	r3, [pc, #212]	; (80032b0 <vTaskPrioritySet+0x134>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d00f      	beq.n	8003204 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80031e4:	4b32      	ldr	r3, [pc, #200]	; (80032b0 <vTaskPrioritySet+0x134>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d309      	bcc.n	8003204 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 80031f0:	2301      	movs	r3, #1
 80031f2:	61fb      	str	r3, [r7, #28]
 80031f4:	e006      	b.n	8003204 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 80031f6:	4b2e      	ldr	r3, [pc, #184]	; (80032b0 <vTaskPrioritySet+0x134>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d101      	bne.n	8003204 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8003200:	2301      	movs	r3, #1
 8003202:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003212:	429a      	cmp	r2, r3
 8003214:	d102      	bne.n	800321c <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	2b00      	cmp	r3, #0
 8003228:	db04      	blt.n	8003234 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	6959      	ldr	r1, [r3, #20]
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4a1c      	ldr	r2, [pc, #112]	; (80032b4 <vTaskPrioritySet+0x138>)
 8003244:	4413      	add	r3, r2
 8003246:	4299      	cmp	r1, r3
 8003248:	d101      	bne.n	800324e <vTaskPrioritySet+0xd2>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <vTaskPrioritySet+0xd4>
 800324e:	2300      	movs	r3, #0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d01c      	beq.n	800328e <vTaskPrioritySet+0x112>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	3304      	adds	r3, #4
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff f829 	bl	80022b0 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003262:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <vTaskPrioritySet+0x13c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d903      	bls.n	8003272 <vTaskPrioritySet+0xf6>
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	4a12      	ldr	r2, [pc, #72]	; (80032b8 <vTaskPrioritySet+0x13c>)
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4a0d      	ldr	r2, [pc, #52]	; (80032b4 <vTaskPrioritySet+0x138>)
 8003280:	441a      	add	r2, r3
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	3304      	adds	r3, #4
 8003286:	4619      	mov	r1, r3
 8003288:	4610      	mov	r0, r2
 800328a:	f7fe ffb6 	bl	80021fa <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d007      	beq.n	80032a4 <vTaskPrioritySet+0x128>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8003294:	4b09      	ldr	r3, [pc, #36]	; (80032bc <vTaskPrioritySet+0x140>)
 8003296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 80032a4:	f001 f96a 	bl	800457c <vPortExitCritical>
	}
 80032a8:	bf00      	nop
 80032aa:	3720      	adds	r7, #32
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	2000075c 	.word	0x2000075c
 80032b4:	20000760 	.word	0x20000760
 80032b8:	20000c38 	.word	0x20000c38
 80032bc:	e000ed04 	.word	0xe000ed04

080032c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	; 0x28
 80032c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80032ce:	463a      	mov	r2, r7
 80032d0:	1d39      	adds	r1, r7, #4
 80032d2:	f107 0308 	add.w	r3, r7, #8
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fe ff32 	bl	8002140 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80032dc:	6839      	ldr	r1, [r7, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	9202      	str	r2, [sp, #8]
 80032e4:	9301      	str	r3, [sp, #4]
 80032e6:	2300      	movs	r3, #0
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	2300      	movs	r3, #0
 80032ec:	460a      	mov	r2, r1
 80032ee:	4921      	ldr	r1, [pc, #132]	; (8003374 <vTaskStartScheduler+0xb4>)
 80032f0:	4821      	ldr	r0, [pc, #132]	; (8003378 <vTaskStartScheduler+0xb8>)
 80032f2:	f7ff fceb 	bl	8002ccc <xTaskCreateStatic>
 80032f6:	4603      	mov	r3, r0
 80032f8:	4a20      	ldr	r2, [pc, #128]	; (800337c <vTaskStartScheduler+0xbc>)
 80032fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80032fc:	4b1f      	ldr	r3, [pc, #124]	; (800337c <vTaskStartScheduler+0xbc>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003304:	2301      	movs	r3, #1
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	e001      	b.n	800330e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800330a:	2300      	movs	r3, #0
 800330c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d102      	bne.n	800331a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003314:	f000 fd00 	bl	8003d18 <xTimerCreateTimerTask>
 8003318:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d116      	bne.n	800334e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	613b      	str	r3, [r7, #16]
}
 8003332:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003334:	4b12      	ldr	r3, [pc, #72]	; (8003380 <vTaskStartScheduler+0xc0>)
 8003336:	f04f 32ff 	mov.w	r2, #4294967295
 800333a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800333c:	4b11      	ldr	r3, [pc, #68]	; (8003384 <vTaskStartScheduler+0xc4>)
 800333e:	2201      	movs	r2, #1
 8003340:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003342:	4b11      	ldr	r3, [pc, #68]	; (8003388 <vTaskStartScheduler+0xc8>)
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003348:	f001 f876 	bl	8004438 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800334c:	e00e      	b.n	800336c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003354:	d10a      	bne.n	800336c <vTaskStartScheduler+0xac>
	__asm volatile
 8003356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335a:	f383 8811 	msr	BASEPRI, r3
 800335e:	f3bf 8f6f 	isb	sy
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	60fb      	str	r3, [r7, #12]
}
 8003368:	bf00      	nop
 800336a:	e7fe      	b.n	800336a <vTaskStartScheduler+0xaa>
}
 800336c:	bf00      	nop
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	08005438 	.word	0x08005438
 8003378:	080039a5 	.word	0x080039a5
 800337c:	20000c54 	.word	0x20000c54
 8003380:	20000c50 	.word	0x20000c50
 8003384:	20000c3c 	.word	0x20000c3c
 8003388:	20000c34 	.word	0x20000c34

0800338c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003390:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <vTaskSuspendAll+0x18>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3301      	adds	r3, #1
 8003396:	4a03      	ldr	r2, [pc, #12]	; (80033a4 <vTaskSuspendAll+0x18>)
 8003398:	6013      	str	r3, [r2, #0]
}
 800339a:	bf00      	nop
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	20000c58 	.word	0x20000c58

080033a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80033b6:	4b42      	ldr	r3, [pc, #264]	; (80034c0 <xTaskResumeAll+0x118>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10a      	bne.n	80033d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80033be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c2:	f383 8811 	msr	BASEPRI, r3
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	603b      	str	r3, [r7, #0]
}
 80033d0:	bf00      	nop
 80033d2:	e7fe      	b.n	80033d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80033d4:	f001 f8a2 	bl	800451c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80033d8:	4b39      	ldr	r3, [pc, #228]	; (80034c0 <xTaskResumeAll+0x118>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3b01      	subs	r3, #1
 80033de:	4a38      	ldr	r2, [pc, #224]	; (80034c0 <xTaskResumeAll+0x118>)
 80033e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033e2:	4b37      	ldr	r3, [pc, #220]	; (80034c0 <xTaskResumeAll+0x118>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d162      	bne.n	80034b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033ea:	4b36      	ldr	r3, [pc, #216]	; (80034c4 <xTaskResumeAll+0x11c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d05e      	beq.n	80034b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033f2:	e02f      	b.n	8003454 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80033f4:	4b34      	ldr	r3, [pc, #208]	; (80034c8 <xTaskResumeAll+0x120>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	3318      	adds	r3, #24
 8003400:	4618      	mov	r0, r3
 8003402:	f7fe ff55 	bl	80022b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	3304      	adds	r3, #4
 800340a:	4618      	mov	r0, r3
 800340c:	f7fe ff50 	bl	80022b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003414:	4b2d      	ldr	r3, [pc, #180]	; (80034cc <xTaskResumeAll+0x124>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	429a      	cmp	r2, r3
 800341a:	d903      	bls.n	8003424 <xTaskResumeAll+0x7c>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	4a2a      	ldr	r2, [pc, #168]	; (80034cc <xTaskResumeAll+0x124>)
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4a27      	ldr	r2, [pc, #156]	; (80034d0 <xTaskResumeAll+0x128>)
 8003432:	441a      	add	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	3304      	adds	r3, #4
 8003438:	4619      	mov	r1, r3
 800343a:	4610      	mov	r0, r2
 800343c:	f7fe fedd 	bl	80021fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003444:	4b23      	ldr	r3, [pc, #140]	; (80034d4 <xTaskResumeAll+0x12c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344a:	429a      	cmp	r2, r3
 800344c:	d302      	bcc.n	8003454 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800344e:	4b22      	ldr	r3, [pc, #136]	; (80034d8 <xTaskResumeAll+0x130>)
 8003450:	2201      	movs	r2, #1
 8003452:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003454:	4b1c      	ldr	r3, [pc, #112]	; (80034c8 <xTaskResumeAll+0x120>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1cb      	bne.n	80033f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003462:	f000 fb55 	bl	8003b10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003466:	4b1d      	ldr	r3, [pc, #116]	; (80034dc <xTaskResumeAll+0x134>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d010      	beq.n	8003494 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003472:	f000 f845 	bl	8003500 <xTaskIncrementTick>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800347c:	4b16      	ldr	r3, [pc, #88]	; (80034d8 <xTaskResumeAll+0x130>)
 800347e:	2201      	movs	r2, #1
 8003480:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3b01      	subs	r3, #1
 8003486:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f1      	bne.n	8003472 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800348e:	4b13      	ldr	r3, [pc, #76]	; (80034dc <xTaskResumeAll+0x134>)
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003494:	4b10      	ldr	r3, [pc, #64]	; (80034d8 <xTaskResumeAll+0x130>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d009      	beq.n	80034b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800349c:	2301      	movs	r3, #1
 800349e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80034a0:	4b0f      	ldr	r3, [pc, #60]	; (80034e0 <xTaskResumeAll+0x138>)
 80034a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80034b0:	f001 f864 	bl	800457c <vPortExitCritical>

	return xAlreadyYielded;
 80034b4:	68bb      	ldr	r3, [r7, #8]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000c58 	.word	0x20000c58
 80034c4:	20000c30 	.word	0x20000c30
 80034c8:	20000bf0 	.word	0x20000bf0
 80034cc:	20000c38 	.word	0x20000c38
 80034d0:	20000760 	.word	0x20000760
 80034d4:	2000075c 	.word	0x2000075c
 80034d8:	20000c44 	.word	0x20000c44
 80034dc:	20000c40 	.word	0x20000c40
 80034e0:	e000ed04 	.word	0xe000ed04

080034e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80034ea:	4b04      	ldr	r3, [pc, #16]	; (80034fc <xTaskGetTickCount+0x18>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80034f0:	687b      	ldr	r3, [r7, #4]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr
 80034fc:	20000c34 	.word	0x20000c34

08003500 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003506:	2300      	movs	r3, #0
 8003508:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800350a:	4b51      	ldr	r3, [pc, #324]	; (8003650 <xTaskIncrementTick+0x150>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	f040 808e 	bne.w	8003630 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003514:	4b4f      	ldr	r3, [pc, #316]	; (8003654 <xTaskIncrementTick+0x154>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3301      	adds	r3, #1
 800351a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800351c:	4a4d      	ldr	r2, [pc, #308]	; (8003654 <xTaskIncrementTick+0x154>)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d120      	bne.n	800356a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003528:	4b4b      	ldr	r3, [pc, #300]	; (8003658 <xTaskIncrementTick+0x158>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <xTaskIncrementTick+0x48>
	__asm volatile
 8003532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	603b      	str	r3, [r7, #0]
}
 8003544:	bf00      	nop
 8003546:	e7fe      	b.n	8003546 <xTaskIncrementTick+0x46>
 8003548:	4b43      	ldr	r3, [pc, #268]	; (8003658 <xTaskIncrementTick+0x158>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	4b43      	ldr	r3, [pc, #268]	; (800365c <xTaskIncrementTick+0x15c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a41      	ldr	r2, [pc, #260]	; (8003658 <xTaskIncrementTick+0x158>)
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	4a41      	ldr	r2, [pc, #260]	; (800365c <xTaskIncrementTick+0x15c>)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	4b40      	ldr	r3, [pc, #256]	; (8003660 <xTaskIncrementTick+0x160>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3301      	adds	r3, #1
 8003562:	4a3f      	ldr	r2, [pc, #252]	; (8003660 <xTaskIncrementTick+0x160>)
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	f000 fad3 	bl	8003b10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800356a:	4b3e      	ldr	r3, [pc, #248]	; (8003664 <xTaskIncrementTick+0x164>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	429a      	cmp	r2, r3
 8003572:	d34e      	bcc.n	8003612 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003574:	4b38      	ldr	r3, [pc, #224]	; (8003658 <xTaskIncrementTick+0x158>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <xTaskIncrementTick+0x82>
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <xTaskIncrementTick+0x84>
 8003582:	2300      	movs	r3, #0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d004      	beq.n	8003592 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003588:	4b36      	ldr	r3, [pc, #216]	; (8003664 <xTaskIncrementTick+0x164>)
 800358a:	f04f 32ff 	mov.w	r2, #4294967295
 800358e:	601a      	str	r2, [r3, #0]
					break;
 8003590:	e03f      	b.n	8003612 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003592:	4b31      	ldr	r3, [pc, #196]	; (8003658 <xTaskIncrementTick+0x158>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d203      	bcs.n	80035b2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80035aa:	4a2e      	ldr	r2, [pc, #184]	; (8003664 <xTaskIncrementTick+0x164>)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6013      	str	r3, [r2, #0]
						break;
 80035b0:	e02f      	b.n	8003612 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	3304      	adds	r3, #4
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fe fe7a 	bl	80022b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d004      	beq.n	80035ce <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	3318      	adds	r3, #24
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fe fe71 	bl	80022b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d2:	4b25      	ldr	r3, [pc, #148]	; (8003668 <xTaskIncrementTick+0x168>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d903      	bls.n	80035e2 <xTaskIncrementTick+0xe2>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	4a22      	ldr	r2, [pc, #136]	; (8003668 <xTaskIncrementTick+0x168>)
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4a1f      	ldr	r2, [pc, #124]	; (800366c <xTaskIncrementTick+0x16c>)
 80035f0:	441a      	add	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	3304      	adds	r3, #4
 80035f6:	4619      	mov	r1, r3
 80035f8:	4610      	mov	r0, r2
 80035fa:	f7fe fdfe 	bl	80021fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003602:	4b1b      	ldr	r3, [pc, #108]	; (8003670 <xTaskIncrementTick+0x170>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	429a      	cmp	r2, r3
 800360a:	d3b3      	bcc.n	8003574 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800360c:	2301      	movs	r3, #1
 800360e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003610:	e7b0      	b.n	8003574 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003612:	4b17      	ldr	r3, [pc, #92]	; (8003670 <xTaskIncrementTick+0x170>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003618:	4914      	ldr	r1, [pc, #80]	; (800366c <xTaskIncrementTick+0x16c>)
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d907      	bls.n	800363a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800362a:	2301      	movs	r3, #1
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	e004      	b.n	800363a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003630:	4b10      	ldr	r3, [pc, #64]	; (8003674 <xTaskIncrementTick+0x174>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3301      	adds	r3, #1
 8003636:	4a0f      	ldr	r2, [pc, #60]	; (8003674 <xTaskIncrementTick+0x174>)
 8003638:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800363a:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <xTaskIncrementTick+0x178>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003642:	2301      	movs	r3, #1
 8003644:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003646:	697b      	ldr	r3, [r7, #20]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20000c58 	.word	0x20000c58
 8003654:	20000c34 	.word	0x20000c34
 8003658:	20000be8 	.word	0x20000be8
 800365c:	20000bec 	.word	0x20000bec
 8003660:	20000c48 	.word	0x20000c48
 8003664:	20000c50 	.word	0x20000c50
 8003668:	20000c38 	.word	0x20000c38
 800366c:	20000760 	.word	0x20000760
 8003670:	2000075c 	.word	0x2000075c
 8003674:	20000c40 	.word	0x20000c40
 8003678:	20000c44 	.word	0x20000c44

0800367c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003682:	4b27      	ldr	r3, [pc, #156]	; (8003720 <vTaskSwitchContext+0xa4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800368a:	4b26      	ldr	r3, [pc, #152]	; (8003724 <vTaskSwitchContext+0xa8>)
 800368c:	2201      	movs	r2, #1
 800368e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003690:	e041      	b.n	8003716 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003692:	4b24      	ldr	r3, [pc, #144]	; (8003724 <vTaskSwitchContext+0xa8>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003698:	4b23      	ldr	r3, [pc, #140]	; (8003728 <vTaskSwitchContext+0xac>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	e010      	b.n	80036c2 <vTaskSwitchContext+0x46>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10a      	bne.n	80036bc <vTaskSwitchContext+0x40>
	__asm volatile
 80036a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	607b      	str	r3, [r7, #4]
}
 80036b8:	bf00      	nop
 80036ba:	e7fe      	b.n	80036ba <vTaskSwitchContext+0x3e>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	3b01      	subs	r3, #1
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	491a      	ldr	r1, [pc, #104]	; (800372c <vTaskSwitchContext+0xb0>)
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0e4      	beq.n	80036a0 <vTaskSwitchContext+0x24>
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4a12      	ldr	r2, [pc, #72]	; (800372c <vTaskSwitchContext+0xb0>)
 80036e2:	4413      	add	r3, r2
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	605a      	str	r2, [r3, #4]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	3308      	adds	r3, #8
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d104      	bne.n	8003706 <vTaskSwitchContext+0x8a>
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	605a      	str	r2, [r3, #4]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	4a08      	ldr	r2, [pc, #32]	; (8003730 <vTaskSwitchContext+0xb4>)
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	4a05      	ldr	r2, [pc, #20]	; (8003728 <vTaskSwitchContext+0xac>)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6013      	str	r3, [r2, #0]
}
 8003716:	bf00      	nop
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	bc80      	pop	{r7}
 800371e:	4770      	bx	lr
 8003720:	20000c58 	.word	0x20000c58
 8003724:	20000c44 	.word	0x20000c44
 8003728:	20000c38 	.word	0x20000c38
 800372c:	20000760 	.word	0x20000760
 8003730:	2000075c 	.word	0x2000075c

08003734 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10a      	bne.n	800375a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003748:	f383 8811 	msr	BASEPRI, r3
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	60fb      	str	r3, [r7, #12]
}
 8003756:	bf00      	nop
 8003758:	e7fe      	b.n	8003758 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800375a:	4b07      	ldr	r3, [pc, #28]	; (8003778 <vTaskPlaceOnEventList+0x44>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3318      	adds	r3, #24
 8003760:	4619      	mov	r1, r3
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fe fd6c 	bl	8002240 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003768:	2101      	movs	r1, #1
 800376a:	6838      	ldr	r0, [r7, #0]
 800376c:	f000 fa80 	bl	8003c70 <prvAddCurrentTaskToDelayedList>
}
 8003770:	bf00      	nop
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	2000075c 	.word	0x2000075c

0800377c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10a      	bne.n	80037a4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800378e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	617b      	str	r3, [r7, #20]
}
 80037a0:	bf00      	nop
 80037a2:	e7fe      	b.n	80037a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037a4:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3318      	adds	r3, #24
 80037aa:	4619      	mov	r1, r3
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f7fe fd24 	bl	80021fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80037b8:	f04f 33ff 	mov.w	r3, #4294967295
 80037bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	68b8      	ldr	r0, [r7, #8]
 80037c2:	f000 fa55 	bl	8003c70 <prvAddCurrentTaskToDelayedList>
	}
 80037c6:	bf00      	nop
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	2000075c 	.word	0x2000075c

080037d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10a      	bne.n	8003800 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80037ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ee:	f383 8811 	msr	BASEPRI, r3
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	f3bf 8f4f 	dsb	sy
 80037fa:	60fb      	str	r3, [r7, #12]
}
 80037fc:	bf00      	nop
 80037fe:	e7fe      	b.n	80037fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	3318      	adds	r3, #24
 8003804:	4618      	mov	r0, r3
 8003806:	f7fe fd53 	bl	80022b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800380a:	4b1e      	ldr	r3, [pc, #120]	; (8003884 <xTaskRemoveFromEventList+0xb0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d11d      	bne.n	800384e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	3304      	adds	r3, #4
 8003816:	4618      	mov	r0, r3
 8003818:	f7fe fd4a 	bl	80022b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003820:	4b19      	ldr	r3, [pc, #100]	; (8003888 <xTaskRemoveFromEventList+0xb4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d903      	bls.n	8003830 <xTaskRemoveFromEventList+0x5c>
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	4a16      	ldr	r2, [pc, #88]	; (8003888 <xTaskRemoveFromEventList+0xb4>)
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4a13      	ldr	r2, [pc, #76]	; (800388c <xTaskRemoveFromEventList+0xb8>)
 800383e:	441a      	add	r2, r3
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	3304      	adds	r3, #4
 8003844:	4619      	mov	r1, r3
 8003846:	4610      	mov	r0, r2
 8003848:	f7fe fcd7 	bl	80021fa <vListInsertEnd>
 800384c:	e005      	b.n	800385a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	3318      	adds	r3, #24
 8003852:	4619      	mov	r1, r3
 8003854:	480e      	ldr	r0, [pc, #56]	; (8003890 <xTaskRemoveFromEventList+0xbc>)
 8003856:	f7fe fcd0 	bl	80021fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800385e:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <xTaskRemoveFromEventList+0xc0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	429a      	cmp	r2, r3
 8003866:	d905      	bls.n	8003874 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003868:	2301      	movs	r3, #1
 800386a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800386c:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <xTaskRemoveFromEventList+0xc4>)
 800386e:	2201      	movs	r2, #1
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	e001      	b.n	8003878 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003878:	697b      	ldr	r3, [r7, #20]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000c58 	.word	0x20000c58
 8003888:	20000c38 	.word	0x20000c38
 800388c:	20000760 	.word	0x20000760
 8003890:	20000bf0 	.word	0x20000bf0
 8003894:	2000075c 	.word	0x2000075c
 8003898:	20000c44 	.word	0x20000c44

0800389c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038a4:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <vTaskInternalSetTimeOutState+0x24>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80038ac:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <vTaskInternalSetTimeOutState+0x28>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	605a      	str	r2, [r3, #4]
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	20000c48 	.word	0x20000c48
 80038c4:	20000c34 	.word	0x20000c34

080038c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10a      	bne.n	80038ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	613b      	str	r3, [r7, #16]
}
 80038ea:	bf00      	nop
 80038ec:	e7fe      	b.n	80038ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10a      	bne.n	800390a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80038f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	60fb      	str	r3, [r7, #12]
}
 8003906:	bf00      	nop
 8003908:	e7fe      	b.n	8003908 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800390a:	f000 fe07 	bl	800451c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800390e:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <xTaskCheckForTimeOut+0xbc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003926:	d102      	bne.n	800392e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003928:	2300      	movs	r3, #0
 800392a:	61fb      	str	r3, [r7, #28]
 800392c:	e023      	b.n	8003976 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	4b15      	ldr	r3, [pc, #84]	; (8003988 <xTaskCheckForTimeOut+0xc0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d007      	beq.n	800394a <xTaskCheckForTimeOut+0x82>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	429a      	cmp	r2, r3
 8003942:	d302      	bcc.n	800394a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003944:	2301      	movs	r3, #1
 8003946:	61fb      	str	r3, [r7, #28]
 8003948:	e015      	b.n	8003976 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	429a      	cmp	r2, r3
 8003952:	d20b      	bcs.n	800396c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	1ad2      	subs	r2, r2, r3
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff ff9b 	bl	800389c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	e004      	b.n	8003976 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003972:	2301      	movs	r3, #1
 8003974:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003976:	f000 fe01 	bl	800457c <vPortExitCritical>

	return xReturn;
 800397a:	69fb      	ldr	r3, [r7, #28]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3720      	adds	r7, #32
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20000c34 	.word	0x20000c34
 8003988:	20000c48 	.word	0x20000c48

0800398c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003990:	4b03      	ldr	r3, [pc, #12]	; (80039a0 <vTaskMissedYield+0x14>)
 8003992:	2201      	movs	r2, #1
 8003994:	601a      	str	r2, [r3, #0]
}
 8003996:	bf00      	nop
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	20000c44 	.word	0x20000c44

080039a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80039ac:	f000 f852 	bl	8003a54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039b0:	4b06      	ldr	r3, [pc, #24]	; (80039cc <prvIdleTask+0x28>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d9f9      	bls.n	80039ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <prvIdleTask+0x2c>)
 80039ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80039c8:	e7f0      	b.n	80039ac <prvIdleTask+0x8>
 80039ca:	bf00      	nop
 80039cc:	20000760 	.word	0x20000760
 80039d0:	e000ed04 	.word	0xe000ed04

080039d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039da:	2300      	movs	r3, #0
 80039dc:	607b      	str	r3, [r7, #4]
 80039de:	e00c      	b.n	80039fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4a12      	ldr	r2, [pc, #72]	; (8003a34 <prvInitialiseTaskLists+0x60>)
 80039ec:	4413      	add	r3, r2
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe fbd8 	bl	80021a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3301      	adds	r3, #1
 80039f8:	607b      	str	r3, [r7, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b37      	cmp	r3, #55	; 0x37
 80039fe:	d9ef      	bls.n	80039e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a00:	480d      	ldr	r0, [pc, #52]	; (8003a38 <prvInitialiseTaskLists+0x64>)
 8003a02:	f7fe fbcf 	bl	80021a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a06:	480d      	ldr	r0, [pc, #52]	; (8003a3c <prvInitialiseTaskLists+0x68>)
 8003a08:	f7fe fbcc 	bl	80021a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a0c:	480c      	ldr	r0, [pc, #48]	; (8003a40 <prvInitialiseTaskLists+0x6c>)
 8003a0e:	f7fe fbc9 	bl	80021a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a12:	480c      	ldr	r0, [pc, #48]	; (8003a44 <prvInitialiseTaskLists+0x70>)
 8003a14:	f7fe fbc6 	bl	80021a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a18:	480b      	ldr	r0, [pc, #44]	; (8003a48 <prvInitialiseTaskLists+0x74>)
 8003a1a:	f7fe fbc3 	bl	80021a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <prvInitialiseTaskLists+0x78>)
 8003a20:	4a05      	ldr	r2, [pc, #20]	; (8003a38 <prvInitialiseTaskLists+0x64>)
 8003a22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a24:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <prvInitialiseTaskLists+0x7c>)
 8003a26:	4a05      	ldr	r2, [pc, #20]	; (8003a3c <prvInitialiseTaskLists+0x68>)
 8003a28:	601a      	str	r2, [r3, #0]
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20000760 	.word	0x20000760
 8003a38:	20000bc0 	.word	0x20000bc0
 8003a3c:	20000bd4 	.word	0x20000bd4
 8003a40:	20000bf0 	.word	0x20000bf0
 8003a44:	20000c04 	.word	0x20000c04
 8003a48:	20000c1c 	.word	0x20000c1c
 8003a4c:	20000be8 	.word	0x20000be8
 8003a50:	20000bec 	.word	0x20000bec

08003a54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a5a:	e019      	b.n	8003a90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a5c:	f000 fd5e 	bl	800451c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003a60:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <prvCheckTasksWaitingTermination+0x50>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fe fc1f 	bl	80022b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a72:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <prvCheckTasksWaitingTermination+0x54>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	4a0b      	ldr	r2, [pc, #44]	; (8003aa8 <prvCheckTasksWaitingTermination+0x54>)
 8003a7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <prvCheckTasksWaitingTermination+0x58>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3b01      	subs	r3, #1
 8003a82:	4a0a      	ldr	r2, [pc, #40]	; (8003aac <prvCheckTasksWaitingTermination+0x58>)
 8003a84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a86:	f000 fd79 	bl	800457c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f810 	bl	8003ab0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a90:	4b06      	ldr	r3, [pc, #24]	; (8003aac <prvCheckTasksWaitingTermination+0x58>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e1      	bne.n	8003a5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a98:	bf00      	nop
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000c04 	.word	0x20000c04
 8003aa8:	20000c30 	.word	0x20000c30
 8003aac:	20000c18 	.word	0x20000c18

08003ab0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d108      	bne.n	8003ad4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 feec 	bl	80048a4 <vPortFree>
				vPortFree( pxTCB );
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fee9 	bl	80048a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003ad2:	e018      	b.n	8003b06 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d103      	bne.n	8003ae6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fee0 	bl	80048a4 <vPortFree>
	}
 8003ae4:	e00f      	b.n	8003b06 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d00a      	beq.n	8003b06 <prvDeleteTCB+0x56>
	__asm volatile
 8003af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af4:	f383 8811 	msr	BASEPRI, r3
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	60fb      	str	r3, [r7, #12]
}
 8003b02:	bf00      	nop
 8003b04:	e7fe      	b.n	8003b04 <prvDeleteTCB+0x54>
	}
 8003b06:	bf00      	nop
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
	...

08003b10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b16:	4b0e      	ldr	r3, [pc, #56]	; (8003b50 <prvResetNextTaskUnblockTime+0x40>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <prvResetNextTaskUnblockTime+0x14>
 8003b20:	2301      	movs	r3, #1
 8003b22:	e000      	b.n	8003b26 <prvResetNextTaskUnblockTime+0x16>
 8003b24:	2300      	movs	r3, #0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d004      	beq.n	8003b34 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b2a:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <prvResetNextTaskUnblockTime+0x44>)
 8003b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b30:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b32:	e008      	b.n	8003b46 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b34:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <prvResetNextTaskUnblockTime+0x40>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	4a04      	ldr	r2, [pc, #16]	; (8003b54 <prvResetNextTaskUnblockTime+0x44>)
 8003b44:	6013      	str	r3, [r2, #0]
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr
 8003b50:	20000be8 	.word	0x20000be8
 8003b54:	20000c50 	.word	0x20000c50

08003b58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <xTaskGetSchedulerState+0x34>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d102      	bne.n	8003b6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b66:	2301      	movs	r3, #1
 8003b68:	607b      	str	r3, [r7, #4]
 8003b6a:	e008      	b.n	8003b7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b6c:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <xTaskGetSchedulerState+0x38>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d102      	bne.n	8003b7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b74:	2302      	movs	r3, #2
 8003b76:	607b      	str	r3, [r7, #4]
 8003b78:	e001      	b.n	8003b7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003b7e:	687b      	ldr	r3, [r7, #4]
	}
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	20000c3c 	.word	0x20000c3c
 8003b90:	20000c58 	.word	0x20000c58

08003b94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d056      	beq.n	8003c58 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003baa:	4b2e      	ldr	r3, [pc, #184]	; (8003c64 <xTaskPriorityDisinherit+0xd0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d00a      	beq.n	8003bca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	60fb      	str	r3, [r7, #12]
}
 8003bc6:	bf00      	nop
 8003bc8:	e7fe      	b.n	8003bc8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10a      	bne.n	8003be8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd6:	f383 8811 	msr	BASEPRI, r3
 8003bda:	f3bf 8f6f 	isb	sy
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	60bb      	str	r3, [r7, #8]
}
 8003be4:	bf00      	nop
 8003be6:	e7fe      	b.n	8003be6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bec:	1e5a      	subs	r2, r3, #1
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d02c      	beq.n	8003c58 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d128      	bne.n	8003c58 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fe fb50 	bl	80022b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c28:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <xTaskPriorityDisinherit+0xd4>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d903      	bls.n	8003c38 <xTaskPriorityDisinherit+0xa4>
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c34:	4a0c      	ldr	r2, [pc, #48]	; (8003c68 <xTaskPriorityDisinherit+0xd4>)
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4a09      	ldr	r2, [pc, #36]	; (8003c6c <xTaskPriorityDisinherit+0xd8>)
 8003c46:	441a      	add	r2, r3
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	f7fe fad3 	bl	80021fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003c54:	2301      	movs	r3, #1
 8003c56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c58:	697b      	ldr	r3, [r7, #20]
	}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	2000075c 	.word	0x2000075c
 8003c68:	20000c38 	.word	0x20000c38
 8003c6c:	20000760 	.word	0x20000760

08003c70 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c7a:	4b21      	ldr	r3, [pc, #132]	; (8003d00 <prvAddCurrentTaskToDelayedList+0x90>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c80:	4b20      	ldr	r3, [pc, #128]	; (8003d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3304      	adds	r3, #4
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe fb12 	bl	80022b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c92:	d10a      	bne.n	8003caa <prvAddCurrentTaskToDelayedList+0x3a>
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d007      	beq.n	8003caa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c9a:	4b1a      	ldr	r3, [pc, #104]	; (8003d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4819      	ldr	r0, [pc, #100]	; (8003d08 <prvAddCurrentTaskToDelayedList+0x98>)
 8003ca4:	f7fe faa9 	bl	80021fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ca8:	e026      	b.n	8003cf8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4413      	add	r3, r2
 8003cb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003cb2:	4b14      	ldr	r3, [pc, #80]	; (8003d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d209      	bcs.n	8003cd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cc2:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	4b0f      	ldr	r3, [pc, #60]	; (8003d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3304      	adds	r3, #4
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4610      	mov	r0, r2
 8003cd0:	f7fe fab6 	bl	8002240 <vListInsert>
}
 8003cd4:	e010      	b.n	8003cf8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cd6:	4b0e      	ldr	r3, [pc, #56]	; (8003d10 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4610      	mov	r0, r2
 8003ce4:	f7fe faac 	bl	8002240 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ce8:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d202      	bcs.n	8003cf8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003cf2:	4a08      	ldr	r2, [pc, #32]	; (8003d14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	6013      	str	r3, [r2, #0]
}
 8003cf8:	bf00      	nop
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	20000c34 	.word	0x20000c34
 8003d04:	2000075c 	.word	0x2000075c
 8003d08:	20000c1c 	.word	0x20000c1c
 8003d0c:	20000bec 	.word	0x20000bec
 8003d10:	20000be8 	.word	0x20000be8
 8003d14:	20000c50 	.word	0x20000c50

08003d18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08a      	sub	sp, #40	; 0x28
 8003d1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003d22:	f000 facb 	bl	80042bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003d26:	4b1c      	ldr	r3, [pc, #112]	; (8003d98 <xTimerCreateTimerTask+0x80>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d021      	beq.n	8003d72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003d36:	1d3a      	adds	r2, r7, #4
 8003d38:	f107 0108 	add.w	r1, r7, #8
 8003d3c:	f107 030c 	add.w	r3, r7, #12
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fe fa15 	bl	8002170 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	9202      	str	r2, [sp, #8]
 8003d4e:	9301      	str	r3, [sp, #4]
 8003d50:	2302      	movs	r3, #2
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	2300      	movs	r3, #0
 8003d56:	460a      	mov	r2, r1
 8003d58:	4910      	ldr	r1, [pc, #64]	; (8003d9c <xTimerCreateTimerTask+0x84>)
 8003d5a:	4811      	ldr	r0, [pc, #68]	; (8003da0 <xTimerCreateTimerTask+0x88>)
 8003d5c:	f7fe ffb6 	bl	8002ccc <xTaskCreateStatic>
 8003d60:	4603      	mov	r3, r0
 8003d62:	4a10      	ldr	r2, [pc, #64]	; (8003da4 <xTimerCreateTimerTask+0x8c>)
 8003d64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003d66:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <xTimerCreateTimerTask+0x8c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10a      	bne.n	8003d8e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	613b      	str	r3, [r7, #16]
}
 8003d8a:	bf00      	nop
 8003d8c:	e7fe      	b.n	8003d8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003d8e:	697b      	ldr	r3, [r7, #20]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	20000c8c 	.word	0x20000c8c
 8003d9c:	08005440 	.word	0x08005440
 8003da0:	08003ec5 	.word	0x08003ec5
 8003da4:	20000c90 	.word	0x20000c90

08003da8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08a      	sub	sp, #40	; 0x28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10a      	bne.n	8003dd6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	623b      	str	r3, [r7, #32]
}
 8003dd2:	bf00      	nop
 8003dd4:	e7fe      	b.n	8003dd4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003dd6:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <xTimerGenericCommand+0x98>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d02a      	beq.n	8003e34 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b05      	cmp	r3, #5
 8003dee:	dc18      	bgt.n	8003e22 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003df0:	f7ff feb2 	bl	8003b58 <xTaskGetSchedulerState>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d109      	bne.n	8003e0e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003dfa:	4b11      	ldr	r3, [pc, #68]	; (8003e40 <xTimerGenericCommand+0x98>)
 8003dfc:	6818      	ldr	r0, [r3, #0]
 8003dfe:	f107 0110 	add.w	r1, r7, #16
 8003e02:	2300      	movs	r3, #0
 8003e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e06:	f7fe fb7f 	bl	8002508 <xQueueGenericSend>
 8003e0a:	6278      	str	r0, [r7, #36]	; 0x24
 8003e0c:	e012      	b.n	8003e34 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003e0e:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <xTimerGenericCommand+0x98>)
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	f107 0110 	add.w	r1, r7, #16
 8003e16:	2300      	movs	r3, #0
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f7fe fb75 	bl	8002508 <xQueueGenericSend>
 8003e1e:	6278      	str	r0, [r7, #36]	; 0x24
 8003e20:	e008      	b.n	8003e34 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003e22:	4b07      	ldr	r3, [pc, #28]	; (8003e40 <xTimerGenericCommand+0x98>)
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	f107 0110 	add.w	r1, r7, #16
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	f7fe fc69 	bl	8002704 <xQueueGenericSendFromISR>
 8003e32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3728      	adds	r7, #40	; 0x28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	20000c8c 	.word	0x20000c8c

08003e44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e4e:	4b1c      	ldr	r3, [pc, #112]	; (8003ec0 <prvProcessExpiredTimer+0x7c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fe fa27 	bl	80022b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d122      	bne.n	8003eb0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	699a      	ldr	r2, [r3, #24]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	18d1      	adds	r1, r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	6978      	ldr	r0, [r7, #20]
 8003e78:	f000 f8c8 	bl	800400c <prvInsertTimerInActiveList>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d016      	beq.n	8003eb0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e82:	2300      	movs	r3, #0
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	2300      	movs	r3, #0
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	6978      	ldr	r0, [r7, #20]
 8003e8e:	f7ff ff8b 	bl	8003da8 <xTimerGenericCommand>
 8003e92:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10a      	bne.n	8003eb0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9e:	f383 8811 	msr	BASEPRI, r3
 8003ea2:	f3bf 8f6f 	isb	sy
 8003ea6:	f3bf 8f4f 	dsb	sy
 8003eaa:	60fb      	str	r3, [r7, #12]
}
 8003eac:	bf00      	nop
 8003eae:	e7fe      	b.n	8003eae <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	6978      	ldr	r0, [r7, #20]
 8003eb6:	4798      	blx	r3
}
 8003eb8:	bf00      	nop
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20000c84 	.word	0x20000c84

08003ec4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ecc:	f107 0308 	add.w	r3, r7, #8
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 f857 	bl	8003f84 <prvGetNextExpireTime>
 8003ed6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4619      	mov	r1, r3
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f803 	bl	8003ee8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003ee2:	f000 f8d5 	bl	8004090 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ee6:	e7f1      	b.n	8003ecc <prvTimerTask+0x8>

08003ee8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003ef2:	f7ff fa4b 	bl	800338c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ef6:	f107 0308 	add.w	r3, r7, #8
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 f866 	bl	8003fcc <prvSampleTimeNow>
 8003f00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d130      	bne.n	8003f6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10a      	bne.n	8003f24 <prvProcessTimerOrBlockTask+0x3c>
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d806      	bhi.n	8003f24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003f16:	f7ff fa47 	bl	80033a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f1a:	68f9      	ldr	r1, [r7, #12]
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff ff91 	bl	8003e44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003f22:	e024      	b.n	8003f6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d008      	beq.n	8003f3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f2a:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <prvProcessTimerOrBlockTask+0x90>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	bf0c      	ite	eq
 8003f34:	2301      	moveq	r3, #1
 8003f36:	2300      	movne	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f3c:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <prvProcessTimerOrBlockTask+0x94>)
 8003f3e:	6818      	ldr	r0, [r3, #0]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	f7fe fe8b 	bl	8002c64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003f4e:	f7ff fa2b 	bl	80033a8 <xTaskResumeAll>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10a      	bne.n	8003f6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003f58:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <prvProcessTimerOrBlockTask+0x98>)
 8003f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	f3bf 8f6f 	isb	sy
}
 8003f68:	e001      	b.n	8003f6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003f6a:	f7ff fa1d 	bl	80033a8 <xTaskResumeAll>
}
 8003f6e:	bf00      	nop
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	20000c88 	.word	0x20000c88
 8003f7c:	20000c8c 	.word	0x20000c8c
 8003f80:	e000ed04 	.word	0xe000ed04

08003f84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f8c:	4b0e      	ldr	r3, [pc, #56]	; (8003fc8 <prvGetNextExpireTime+0x44>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	bf0c      	ite	eq
 8003f96:	2301      	moveq	r3, #1
 8003f98:	2300      	movne	r3, #0
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d105      	bne.n	8003fb6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003faa:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <prvGetNextExpireTime+0x44>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	e001      	b.n	8003fba <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003fba:	68fb      	ldr	r3, [r7, #12]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	20000c84 	.word	0x20000c84

08003fcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003fd4:	f7ff fa86 	bl	80034e4 <xTaskGetTickCount>
 8003fd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003fda:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <prvSampleTimeNow+0x3c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d205      	bcs.n	8003ff0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003fe4:	f000 f908 	bl	80041f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	e002      	b.n	8003ff6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003ff6:	4a04      	ldr	r2, [pc, #16]	; (8004008 <prvSampleTimeNow+0x3c>)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20000c94 	.word	0x20000c94

0800400c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	429a      	cmp	r2, r3
 8004030:	d812      	bhi.n	8004058 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	1ad2      	subs	r2, r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	429a      	cmp	r2, r3
 800403e:	d302      	bcc.n	8004046 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004040:	2301      	movs	r3, #1
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	e01b      	b.n	800407e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004046:	4b10      	ldr	r3, [pc, #64]	; (8004088 <prvInsertTimerInActiveList+0x7c>)
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	3304      	adds	r3, #4
 800404e:	4619      	mov	r1, r3
 8004050:	4610      	mov	r0, r2
 8004052:	f7fe f8f5 	bl	8002240 <vListInsert>
 8004056:	e012      	b.n	800407e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d206      	bcs.n	800406e <prvInsertTimerInActiveList+0x62>
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d302      	bcc.n	800406e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004068:	2301      	movs	r3, #1
 800406a:	617b      	str	r3, [r7, #20]
 800406c:	e007      	b.n	800407e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800406e:	4b07      	ldr	r3, [pc, #28]	; (800408c <prvInsertTimerInActiveList+0x80>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	3304      	adds	r3, #4
 8004076:	4619      	mov	r1, r3
 8004078:	4610      	mov	r0, r2
 800407a:	f7fe f8e1 	bl	8002240 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800407e:	697b      	ldr	r3, [r7, #20]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20000c88 	.word	0x20000c88
 800408c:	20000c84 	.word	0x20000c84

08004090 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08e      	sub	sp, #56	; 0x38
 8004094:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004096:	e09d      	b.n	80041d4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	da18      	bge.n	80040d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800409e:	1d3b      	adds	r3, r7, #4
 80040a0:	3304      	adds	r3, #4
 80040a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80040a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10a      	bne.n	80040c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80040aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ae:	f383 8811 	msr	BASEPRI, r3
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	61fb      	str	r3, [r7, #28]
}
 80040bc:	bf00      	nop
 80040be:	e7fe      	b.n	80040be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80040c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040c6:	6850      	ldr	r0, [r2, #4]
 80040c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ca:	6892      	ldr	r2, [r2, #8]
 80040cc:	4611      	mov	r1, r2
 80040ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	db7d      	blt.n	80041d2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80040da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d004      	beq.n	80040ec <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e4:	3304      	adds	r3, #4
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fe f8e2 	bl	80022b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040ec:	463b      	mov	r3, r7
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff ff6c 	bl	8003fcc <prvSampleTimeNow>
 80040f4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b09      	cmp	r3, #9
 80040fa:	d86b      	bhi.n	80041d4 <prvProcessReceivedCommands+0x144>
 80040fc:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <prvProcessReceivedCommands+0x74>)
 80040fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004102:	bf00      	nop
 8004104:	0800412d 	.word	0x0800412d
 8004108:	0800412d 	.word	0x0800412d
 800410c:	0800412d 	.word	0x0800412d
 8004110:	080041d5 	.word	0x080041d5
 8004114:	08004189 	.word	0x08004189
 8004118:	080041c1 	.word	0x080041c1
 800411c:	0800412d 	.word	0x0800412d
 8004120:	0800412d 	.word	0x0800412d
 8004124:	080041d5 	.word	0x080041d5
 8004128:	08004189 	.word	0x08004189
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	18d1      	adds	r1, r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800413a:	f7ff ff67 	bl	800400c <prvInsertTimerInActiveList>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d047      	beq.n	80041d4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800414a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800414c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d13f      	bne.n	80041d4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	441a      	add	r2, r3
 800415c:	2300      	movs	r3, #0
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	2300      	movs	r3, #0
 8004162:	2100      	movs	r1, #0
 8004164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004166:	f7ff fe1f 	bl	8003da8 <xTimerGenericCommand>
 800416a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d130      	bne.n	80041d4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004176:	f383 8811 	msr	BASEPRI, r3
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	61bb      	str	r3, [r7, #24]
}
 8004184:	bf00      	nop
 8004186:	e7fe      	b.n	8004186 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800418e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10a      	bne.n	80041ac <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419a:	f383 8811 	msr	BASEPRI, r3
 800419e:	f3bf 8f6f 	isb	sy
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	617b      	str	r3, [r7, #20]
}
 80041a8:	bf00      	nop
 80041aa:	e7fe      	b.n	80041aa <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80041ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ae:	699a      	ldr	r2, [r3, #24]
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	18d1      	adds	r1, r2, r3
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041ba:	f7ff ff27 	bl	800400c <prvInsertTimerInActiveList>
					break;
 80041be:	e009      	b.n	80041d4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80041c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d104      	bne.n	80041d4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80041ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041cc:	f000 fb6a 	bl	80048a4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80041d0:	e000      	b.n	80041d4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80041d2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041d4:	4b07      	ldr	r3, [pc, #28]	; (80041f4 <prvProcessReceivedCommands+0x164>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	1d39      	adds	r1, r7, #4
 80041da:	2200      	movs	r2, #0
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fe fb29 	bl	8002834 <xQueueReceive>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f47f af57 	bne.w	8004098 <prvProcessReceivedCommands+0x8>
	}
}
 80041ea:	bf00      	nop
 80041ec:	bf00      	nop
 80041ee:	3730      	adds	r7, #48	; 0x30
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20000c8c 	.word	0x20000c8c

080041f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041fe:	e045      	b.n	800428c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004200:	4b2c      	ldr	r3, [pc, #176]	; (80042b4 <prvSwitchTimerLists+0xbc>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800420a:	4b2a      	ldr	r3, [pc, #168]	; (80042b4 <prvSwitchTimerLists+0xbc>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	3304      	adds	r3, #4
 8004218:	4618      	mov	r0, r3
 800421a:	f7fe f849 	bl	80022b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d12e      	bne.n	800428c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	4413      	add	r3, r2
 8004236:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	429a      	cmp	r2, r3
 800423e:	d90e      	bls.n	800425e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800424c:	4b19      	ldr	r3, [pc, #100]	; (80042b4 <prvSwitchTimerLists+0xbc>)
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3304      	adds	r3, #4
 8004254:	4619      	mov	r1, r3
 8004256:	4610      	mov	r0, r2
 8004258:	f7fd fff2 	bl	8002240 <vListInsert>
 800425c:	e016      	b.n	800428c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800425e:	2300      	movs	r3, #0
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	2300      	movs	r3, #0
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	2100      	movs	r1, #0
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f7ff fd9d 	bl	8003da8 <xTimerGenericCommand>
 800426e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10a      	bne.n	800428c <prvSwitchTimerLists+0x94>
	__asm volatile
 8004276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	603b      	str	r3, [r7, #0]
}
 8004288:	bf00      	nop
 800428a:	e7fe      	b.n	800428a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800428c:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <prvSwitchTimerLists+0xbc>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1b4      	bne.n	8004200 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004296:	4b07      	ldr	r3, [pc, #28]	; (80042b4 <prvSwitchTimerLists+0xbc>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <prvSwitchTimerLists+0xc0>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a04      	ldr	r2, [pc, #16]	; (80042b4 <prvSwitchTimerLists+0xbc>)
 80042a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80042a4:	4a04      	ldr	r2, [pc, #16]	; (80042b8 <prvSwitchTimerLists+0xc0>)
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	6013      	str	r3, [r2, #0]
}
 80042aa:	bf00      	nop
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20000c84 	.word	0x20000c84
 80042b8:	20000c88 	.word	0x20000c88

080042bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80042c2:	f000 f92b 	bl	800451c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80042c6:	4b15      	ldr	r3, [pc, #84]	; (800431c <prvCheckForValidListAndQueue+0x60>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d120      	bne.n	8004310 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80042ce:	4814      	ldr	r0, [pc, #80]	; (8004320 <prvCheckForValidListAndQueue+0x64>)
 80042d0:	f7fd ff68 	bl	80021a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80042d4:	4813      	ldr	r0, [pc, #76]	; (8004324 <prvCheckForValidListAndQueue+0x68>)
 80042d6:	f7fd ff65 	bl	80021a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80042da:	4b13      	ldr	r3, [pc, #76]	; (8004328 <prvCheckForValidListAndQueue+0x6c>)
 80042dc:	4a10      	ldr	r2, [pc, #64]	; (8004320 <prvCheckForValidListAndQueue+0x64>)
 80042de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80042e0:	4b12      	ldr	r3, [pc, #72]	; (800432c <prvCheckForValidListAndQueue+0x70>)
 80042e2:	4a10      	ldr	r2, [pc, #64]	; (8004324 <prvCheckForValidListAndQueue+0x68>)
 80042e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80042e6:	2300      	movs	r3, #0
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	4b11      	ldr	r3, [pc, #68]	; (8004330 <prvCheckForValidListAndQueue+0x74>)
 80042ec:	4a11      	ldr	r2, [pc, #68]	; (8004334 <prvCheckForValidListAndQueue+0x78>)
 80042ee:	2110      	movs	r1, #16
 80042f0:	200a      	movs	r0, #10
 80042f2:	f7fe f86f 	bl	80023d4 <xQueueGenericCreateStatic>
 80042f6:	4603      	mov	r3, r0
 80042f8:	4a08      	ldr	r2, [pc, #32]	; (800431c <prvCheckForValidListAndQueue+0x60>)
 80042fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80042fc:	4b07      	ldr	r3, [pc, #28]	; (800431c <prvCheckForValidListAndQueue+0x60>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004304:	4b05      	ldr	r3, [pc, #20]	; (800431c <prvCheckForValidListAndQueue+0x60>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	490b      	ldr	r1, [pc, #44]	; (8004338 <prvCheckForValidListAndQueue+0x7c>)
 800430a:	4618      	mov	r0, r3
 800430c:	f7fe fc82 	bl	8002c14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004310:	f000 f934 	bl	800457c <vPortExitCritical>
}
 8004314:	bf00      	nop
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20000c8c 	.word	0x20000c8c
 8004320:	20000c5c 	.word	0x20000c5c
 8004324:	20000c70 	.word	0x20000c70
 8004328:	20000c84 	.word	0x20000c84
 800432c:	20000c88 	.word	0x20000c88
 8004330:	20000d38 	.word	0x20000d38
 8004334:	20000c98 	.word	0x20000c98
 8004338:	08005448 	.word	0x08005448

0800433c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	3b04      	subs	r3, #4
 800434c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004354:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	3b04      	subs	r3, #4
 800435a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f023 0201 	bic.w	r2, r3, #1
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	3b04      	subs	r3, #4
 800436a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800436c:	4a08      	ldr	r2, [pc, #32]	; (8004390 <pxPortInitialiseStack+0x54>)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3b14      	subs	r3, #20
 8004376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3b20      	subs	r3, #32
 8004382:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004384:	68fb      	ldr	r3, [r7, #12]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr
 8004390:	08004395 	.word	0x08004395

08004394 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800439a:	2300      	movs	r3, #0
 800439c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800439e:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <prvTaskExitError+0x54>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a6:	d00a      	beq.n	80043be <prvTaskExitError+0x2a>
	__asm volatile
 80043a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ac:	f383 8811 	msr	BASEPRI, r3
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	60fb      	str	r3, [r7, #12]
}
 80043ba:	bf00      	nop
 80043bc:	e7fe      	b.n	80043bc <prvTaskExitError+0x28>
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	60bb      	str	r3, [r7, #8]
}
 80043d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80043d2:	bf00      	nop
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0fc      	beq.n	80043d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80043da:	bf00      	nop
 80043dc:	bf00      	nop
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc80      	pop	{r7}
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	2000000c 	.word	0x2000000c
 80043ec:	00000000 	.word	0x00000000

080043f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80043f0:	4b07      	ldr	r3, [pc, #28]	; (8004410 <pxCurrentTCBConst2>)
 80043f2:	6819      	ldr	r1, [r3, #0]
 80043f4:	6808      	ldr	r0, [r1, #0]
 80043f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80043fa:	f380 8809 	msr	PSP, r0
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f04f 0000 	mov.w	r0, #0
 8004406:	f380 8811 	msr	BASEPRI, r0
 800440a:	f04e 0e0d 	orr.w	lr, lr, #13
 800440e:	4770      	bx	lr

08004410 <pxCurrentTCBConst2>:
 8004410:	2000075c 	.word	0x2000075c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004414:	bf00      	nop
 8004416:	bf00      	nop

08004418 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004418:	4806      	ldr	r0, [pc, #24]	; (8004434 <prvPortStartFirstTask+0x1c>)
 800441a:	6800      	ldr	r0, [r0, #0]
 800441c:	6800      	ldr	r0, [r0, #0]
 800441e:	f380 8808 	msr	MSP, r0
 8004422:	b662      	cpsie	i
 8004424:	b661      	cpsie	f
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	df00      	svc	0
 8004430:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004432:	bf00      	nop
 8004434:	e000ed08 	.word	0xe000ed08

08004438 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800443e:	4b32      	ldr	r3, [pc, #200]	; (8004508 <xPortStartScheduler+0xd0>)
 8004440:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	b2db      	uxtb	r3, r3
 8004448:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	22ff      	movs	r2, #255	; 0xff
 800444e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	b2db      	uxtb	r3, r3
 8004456:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	b2db      	uxtb	r3, r3
 800445c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004460:	b2da      	uxtb	r2, r3
 8004462:	4b2a      	ldr	r3, [pc, #168]	; (800450c <xPortStartScheduler+0xd4>)
 8004464:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004466:	4b2a      	ldr	r3, [pc, #168]	; (8004510 <xPortStartScheduler+0xd8>)
 8004468:	2207      	movs	r2, #7
 800446a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800446c:	e009      	b.n	8004482 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800446e:	4b28      	ldr	r3, [pc, #160]	; (8004510 <xPortStartScheduler+0xd8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3b01      	subs	r3, #1
 8004474:	4a26      	ldr	r2, [pc, #152]	; (8004510 <xPortStartScheduler+0xd8>)
 8004476:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	b2db      	uxtb	r3, r3
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	b2db      	uxtb	r3, r3
 8004480:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004482:	78fb      	ldrb	r3, [r7, #3]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448a:	2b80      	cmp	r3, #128	; 0x80
 800448c:	d0ef      	beq.n	800446e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800448e:	4b20      	ldr	r3, [pc, #128]	; (8004510 <xPortStartScheduler+0xd8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f1c3 0307 	rsb	r3, r3, #7
 8004496:	2b04      	cmp	r3, #4
 8004498:	d00a      	beq.n	80044b0 <xPortStartScheduler+0x78>
	__asm volatile
 800449a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	60bb      	str	r3, [r7, #8]
}
 80044ac:	bf00      	nop
 80044ae:	e7fe      	b.n	80044ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044b0:	4b17      	ldr	r3, [pc, #92]	; (8004510 <xPortStartScheduler+0xd8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	021b      	lsls	r3, r3, #8
 80044b6:	4a16      	ldr	r2, [pc, #88]	; (8004510 <xPortStartScheduler+0xd8>)
 80044b8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044ba:	4b15      	ldr	r3, [pc, #84]	; (8004510 <xPortStartScheduler+0xd8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044c2:	4a13      	ldr	r2, [pc, #76]	; (8004510 <xPortStartScheduler+0xd8>)
 80044c4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80044ce:	4b11      	ldr	r3, [pc, #68]	; (8004514 <xPortStartScheduler+0xdc>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a10      	ldr	r2, [pc, #64]	; (8004514 <xPortStartScheduler+0xdc>)
 80044d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80044da:	4b0e      	ldr	r3, [pc, #56]	; (8004514 <xPortStartScheduler+0xdc>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a0d      	ldr	r2, [pc, #52]	; (8004514 <xPortStartScheduler+0xdc>)
 80044e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80044e4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80044e6:	f000 f8b9 	bl	800465c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80044ea:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <xPortStartScheduler+0xe0>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80044f0:	f7ff ff92 	bl	8004418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80044f4:	f7ff f8c2 	bl	800367c <vTaskSwitchContext>
	prvTaskExitError();
 80044f8:	f7ff ff4c 	bl	8004394 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	e000e400 	.word	0xe000e400
 800450c:	20000d88 	.word	0x20000d88
 8004510:	20000d8c 	.word	0x20000d8c
 8004514:	e000ed20 	.word	0xe000ed20
 8004518:	2000000c 	.word	0x2000000c

0800451c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
	__asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	607b      	str	r3, [r7, #4]
}
 8004534:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004536:	4b0f      	ldr	r3, [pc, #60]	; (8004574 <vPortEnterCritical+0x58>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3301      	adds	r3, #1
 800453c:	4a0d      	ldr	r2, [pc, #52]	; (8004574 <vPortEnterCritical+0x58>)
 800453e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004540:	4b0c      	ldr	r3, [pc, #48]	; (8004574 <vPortEnterCritical+0x58>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d10f      	bne.n	8004568 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004548:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <vPortEnterCritical+0x5c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <vPortEnterCritical+0x4c>
	__asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	603b      	str	r3, [r7, #0]
}
 8004564:	bf00      	nop
 8004566:	e7fe      	b.n	8004566 <vPortEnterCritical+0x4a>
	}
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	2000000c 	.word	0x2000000c
 8004578:	e000ed04 	.word	0xe000ed04

0800457c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004582:	4b11      	ldr	r3, [pc, #68]	; (80045c8 <vPortExitCritical+0x4c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10a      	bne.n	80045a0 <vPortExitCritical+0x24>
	__asm volatile
 800458a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	607b      	str	r3, [r7, #4]
}
 800459c:	bf00      	nop
 800459e:	e7fe      	b.n	800459e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80045a0:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <vPortExitCritical+0x4c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3b01      	subs	r3, #1
 80045a6:	4a08      	ldr	r2, [pc, #32]	; (80045c8 <vPortExitCritical+0x4c>)
 80045a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80045aa:	4b07      	ldr	r3, [pc, #28]	; (80045c8 <vPortExitCritical+0x4c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d105      	bne.n	80045be <vPortExitCritical+0x42>
 80045b2:	2300      	movs	r3, #0
 80045b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	f383 8811 	msr	BASEPRI, r3
}
 80045bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bc80      	pop	{r7}
 80045c6:	4770      	bx	lr
 80045c8:	2000000c 	.word	0x2000000c
 80045cc:	00000000 	.word	0x00000000

080045d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80045d0:	f3ef 8009 	mrs	r0, PSP
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	4b0d      	ldr	r3, [pc, #52]	; (8004610 <pxCurrentTCBConst>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80045e0:	6010      	str	r0, [r2, #0]
 80045e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80045e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80045ea:	f380 8811 	msr	BASEPRI, r0
 80045ee:	f7ff f845 	bl	800367c <vTaskSwitchContext>
 80045f2:	f04f 0000 	mov.w	r0, #0
 80045f6:	f380 8811 	msr	BASEPRI, r0
 80045fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80045fe:	6819      	ldr	r1, [r3, #0]
 8004600:	6808      	ldr	r0, [r1, #0]
 8004602:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004606:	f380 8809 	msr	PSP, r0
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	4770      	bx	lr

08004610 <pxCurrentTCBConst>:
 8004610:	2000075c 	.word	0x2000075c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004614:	bf00      	nop
 8004616:	bf00      	nop

08004618 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
	__asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	607b      	str	r3, [r7, #4]
}
 8004630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004632:	f7fe ff65 	bl	8003500 <xTaskIncrementTick>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800463c:	4b06      	ldr	r3, [pc, #24]	; (8004658 <SysTick_Handler+0x40>)
 800463e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	2300      	movs	r3, #0
 8004646:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	f383 8811 	msr	BASEPRI, r3
}
 800464e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004650:	bf00      	nop
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	e000ed04 	.word	0xe000ed04

0800465c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004660:	4b0a      	ldr	r3, [pc, #40]	; (800468c <vPortSetupTimerInterrupt+0x30>)
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004666:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <vPortSetupTimerInterrupt+0x34>)
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800466c:	4b09      	ldr	r3, [pc, #36]	; (8004694 <vPortSetupTimerInterrupt+0x38>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a09      	ldr	r2, [pc, #36]	; (8004698 <vPortSetupTimerInterrupt+0x3c>)
 8004672:	fba2 2303 	umull	r2, r3, r2, r3
 8004676:	099b      	lsrs	r3, r3, #6
 8004678:	4a08      	ldr	r2, [pc, #32]	; (800469c <vPortSetupTimerInterrupt+0x40>)
 800467a:	3b01      	subs	r3, #1
 800467c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800467e:	4b03      	ldr	r3, [pc, #12]	; (800468c <vPortSetupTimerInterrupt+0x30>)
 8004680:	2207      	movs	r2, #7
 8004682:	601a      	str	r2, [r3, #0]
}
 8004684:	bf00      	nop
 8004686:	46bd      	mov	sp, r7
 8004688:	bc80      	pop	{r7}
 800468a:	4770      	bx	lr
 800468c:	e000e010 	.word	0xe000e010
 8004690:	e000e018 	.word	0xe000e018
 8004694:	20000000 	.word	0x20000000
 8004698:	10624dd3 	.word	0x10624dd3
 800469c:	e000e014 	.word	0xe000e014

080046a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80046a6:	f3ef 8305 	mrs	r3, IPSR
 80046aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b0f      	cmp	r3, #15
 80046b0:	d914      	bls.n	80046dc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80046b2:	4a16      	ldr	r2, [pc, #88]	; (800470c <vPortValidateInterruptPriority+0x6c>)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4413      	add	r3, r2
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80046bc:	4b14      	ldr	r3, [pc, #80]	; (8004710 <vPortValidateInterruptPriority+0x70>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	7afa      	ldrb	r2, [r7, #11]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d20a      	bcs.n	80046dc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80046c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	607b      	str	r3, [r7, #4]
}
 80046d8:	bf00      	nop
 80046da:	e7fe      	b.n	80046da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80046dc:	4b0d      	ldr	r3, [pc, #52]	; (8004714 <vPortValidateInterruptPriority+0x74>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046e4:	4b0c      	ldr	r3, [pc, #48]	; (8004718 <vPortValidateInterruptPriority+0x78>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d90a      	bls.n	8004702 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80046ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f0:	f383 8811 	msr	BASEPRI, r3
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	603b      	str	r3, [r7, #0]
}
 80046fe:	bf00      	nop
 8004700:	e7fe      	b.n	8004700 <vPortValidateInterruptPriority+0x60>
	}
 8004702:	bf00      	nop
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	bc80      	pop	{r7}
 800470a:	4770      	bx	lr
 800470c:	e000e3f0 	.word	0xe000e3f0
 8004710:	20000d88 	.word	0x20000d88
 8004714:	e000ed0c 	.word	0xe000ed0c
 8004718:	20000d8c 	.word	0x20000d8c

0800471c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b08a      	sub	sp, #40	; 0x28
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004724:	2300      	movs	r3, #0
 8004726:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004728:	f7fe fe30 	bl	800338c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800472c:	4b58      	ldr	r3, [pc, #352]	; (8004890 <pvPortMalloc+0x174>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004734:	f000 f910 	bl	8004958 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004738:	4b56      	ldr	r3, [pc, #344]	; (8004894 <pvPortMalloc+0x178>)
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4013      	ands	r3, r2
 8004740:	2b00      	cmp	r3, #0
 8004742:	f040 808e 	bne.w	8004862 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01d      	beq.n	8004788 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800474c:	2208      	movs	r2, #8
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4413      	add	r3, r2
 8004752:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	2b00      	cmp	r3, #0
 800475c:	d014      	beq.n	8004788 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f023 0307 	bic.w	r3, r3, #7
 8004764:	3308      	adds	r3, #8
 8004766:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <pvPortMalloc+0x6c>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	617b      	str	r3, [r7, #20]
}
 8004784:	bf00      	nop
 8004786:	e7fe      	b.n	8004786 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d069      	beq.n	8004862 <pvPortMalloc+0x146>
 800478e:	4b42      	ldr	r3, [pc, #264]	; (8004898 <pvPortMalloc+0x17c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	429a      	cmp	r2, r3
 8004796:	d864      	bhi.n	8004862 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004798:	4b40      	ldr	r3, [pc, #256]	; (800489c <pvPortMalloc+0x180>)
 800479a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800479c:	4b3f      	ldr	r3, [pc, #252]	; (800489c <pvPortMalloc+0x180>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047a2:	e004      	b.n	80047ae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d903      	bls.n	80047c0 <pvPortMalloc+0xa4>
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1f1      	bne.n	80047a4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80047c0:	4b33      	ldr	r3, [pc, #204]	; (8004890 <pvPortMalloc+0x174>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d04b      	beq.n	8004862 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2208      	movs	r2, #8
 80047d0:	4413      	add	r3, r2
 80047d2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	1ad2      	subs	r2, r2, r3
 80047e4:	2308      	movs	r3, #8
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d91f      	bls.n	800482c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4413      	add	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00a      	beq.n	8004814 <pvPortMalloc+0xf8>
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	613b      	str	r3, [r7, #16]
}
 8004810:	bf00      	nop
 8004812:	e7fe      	b.n	8004812 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	1ad2      	subs	r2, r2, r3
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004826:	69b8      	ldr	r0, [r7, #24]
 8004828:	f000 f8f8 	bl	8004a1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800482c:	4b1a      	ldr	r3, [pc, #104]	; (8004898 <pvPortMalloc+0x17c>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	4a18      	ldr	r2, [pc, #96]	; (8004898 <pvPortMalloc+0x17c>)
 8004838:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800483a:	4b17      	ldr	r3, [pc, #92]	; (8004898 <pvPortMalloc+0x17c>)
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	4b18      	ldr	r3, [pc, #96]	; (80048a0 <pvPortMalloc+0x184>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d203      	bcs.n	800484e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004846:	4b14      	ldr	r3, [pc, #80]	; (8004898 <pvPortMalloc+0x17c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a15      	ldr	r2, [pc, #84]	; (80048a0 <pvPortMalloc+0x184>)
 800484c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	4b10      	ldr	r3, [pc, #64]	; (8004894 <pvPortMalloc+0x178>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	431a      	orrs	r2, r3
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	2200      	movs	r2, #0
 8004860:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004862:	f7fe fda1 	bl	80033a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00a      	beq.n	8004886 <pvPortMalloc+0x16a>
	__asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	60fb      	str	r3, [r7, #12]
}
 8004882:	bf00      	nop
 8004884:	e7fe      	b.n	8004884 <pvPortMalloc+0x168>
	return pvReturn;
 8004886:	69fb      	ldr	r3, [r7, #28]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3728      	adds	r7, #40	; 0x28
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	20001998 	.word	0x20001998
 8004894:	200019a4 	.word	0x200019a4
 8004898:	2000199c 	.word	0x2000199c
 800489c:	20001990 	.word	0x20001990
 80048a0:	200019a0 	.word	0x200019a0

080048a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d048      	beq.n	8004948 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80048b6:	2308      	movs	r3, #8
 80048b8:	425b      	negs	r3, r3
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	4413      	add	r3, r2
 80048be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	4b21      	ldr	r3, [pc, #132]	; (8004950 <vPortFree+0xac>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4013      	ands	r3, r2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10a      	bne.n	80048e8 <vPortFree+0x44>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	60fb      	str	r3, [r7, #12]
}
 80048e4:	bf00      	nop
 80048e6:	e7fe      	b.n	80048e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00a      	beq.n	8004906 <vPortFree+0x62>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	60bb      	str	r3, [r7, #8]
}
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	4b11      	ldr	r3, [pc, #68]	; (8004950 <vPortFree+0xac>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4013      	ands	r3, r2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d019      	beq.n	8004948 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d115      	bne.n	8004948 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <vPortFree+0xac>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	43db      	mvns	r3, r3
 8004926:	401a      	ands	r2, r3
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800492c:	f7fe fd2e 	bl	800338c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	4b07      	ldr	r3, [pc, #28]	; (8004954 <vPortFree+0xb0>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4413      	add	r3, r2
 800493a:	4a06      	ldr	r2, [pc, #24]	; (8004954 <vPortFree+0xb0>)
 800493c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800493e:	6938      	ldr	r0, [r7, #16]
 8004940:	f000 f86c 	bl	8004a1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004944:	f7fe fd30 	bl	80033a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004948:	bf00      	nop
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	200019a4 	.word	0x200019a4
 8004954:	2000199c 	.word	0x2000199c

08004958 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800495e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004962:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004964:	4b27      	ldr	r3, [pc, #156]	; (8004a04 <prvHeapInit+0xac>)
 8004966:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00c      	beq.n	800498c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3307      	adds	r3, #7
 8004976:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0307 	bic.w	r3, r3, #7
 800497e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	4a1f      	ldr	r2, [pc, #124]	; (8004a04 <prvHeapInit+0xac>)
 8004988:	4413      	add	r3, r2
 800498a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004990:	4a1d      	ldr	r2, [pc, #116]	; (8004a08 <prvHeapInit+0xb0>)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004996:	4b1c      	ldr	r3, [pc, #112]	; (8004a08 <prvHeapInit+0xb0>)
 8004998:	2200      	movs	r2, #0
 800499a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	4413      	add	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80049a4:	2208      	movs	r2, #8
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	1a9b      	subs	r3, r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0307 	bic.w	r3, r3, #7
 80049b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4a15      	ldr	r2, [pc, #84]	; (8004a0c <prvHeapInit+0xb4>)
 80049b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80049ba:	4b14      	ldr	r3, [pc, #80]	; (8004a0c <prvHeapInit+0xb4>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2200      	movs	r2, #0
 80049c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80049c2:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <prvHeapInit+0xb4>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2200      	movs	r2, #0
 80049c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	1ad2      	subs	r2, r2, r3
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80049d8:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <prvHeapInit+0xb4>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	4a0a      	ldr	r2, [pc, #40]	; (8004a10 <prvHeapInit+0xb8>)
 80049e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	4a09      	ldr	r2, [pc, #36]	; (8004a14 <prvHeapInit+0xbc>)
 80049ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80049f0:	4b09      	ldr	r3, [pc, #36]	; (8004a18 <prvHeapInit+0xc0>)
 80049f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80049f6:	601a      	str	r2, [r3, #0]
}
 80049f8:	bf00      	nop
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	20000d90 	.word	0x20000d90
 8004a08:	20001990 	.word	0x20001990
 8004a0c:	20001998 	.word	0x20001998
 8004a10:	200019a0 	.word	0x200019a0
 8004a14:	2000199c 	.word	0x2000199c
 8004a18:	200019a4 	.word	0x200019a4

08004a1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a24:	4b27      	ldr	r3, [pc, #156]	; (8004ac4 <prvInsertBlockIntoFreeList+0xa8>)
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	e002      	b.n	8004a30 <prvInsertBlockIntoFreeList+0x14>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d8f7      	bhi.n	8004a2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	4413      	add	r3, r2
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d108      	bne.n	8004a5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	441a      	add	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	441a      	add	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d118      	bne.n	8004aa4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	4b14      	ldr	r3, [pc, #80]	; (8004ac8 <prvInsertBlockIntoFreeList+0xac>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d00d      	beq.n	8004a9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	441a      	add	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	e008      	b.n	8004aac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <prvInsertBlockIntoFreeList+0xac>)
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	e003      	b.n	8004aac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d002      	beq.n	8004aba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004aba:	bf00      	nop
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr
 8004ac4:	20001990 	.word	0x20001990
 8004ac8:	20001998 	.word	0x20001998

08004acc <__errno>:
 8004acc:	4b01      	ldr	r3, [pc, #4]	; (8004ad4 <__errno+0x8>)
 8004ace:	6818      	ldr	r0, [r3, #0]
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	20000010 	.word	0x20000010

08004ad8 <__libc_init_array>:
 8004ad8:	b570      	push	{r4, r5, r6, lr}
 8004ada:	2600      	movs	r6, #0
 8004adc:	4d0c      	ldr	r5, [pc, #48]	; (8004b10 <__libc_init_array+0x38>)
 8004ade:	4c0d      	ldr	r4, [pc, #52]	; (8004b14 <__libc_init_array+0x3c>)
 8004ae0:	1b64      	subs	r4, r4, r5
 8004ae2:	10a4      	asrs	r4, r4, #2
 8004ae4:	42a6      	cmp	r6, r4
 8004ae6:	d109      	bne.n	8004afc <__libc_init_array+0x24>
 8004ae8:	f000 fc5c 	bl	80053a4 <_init>
 8004aec:	2600      	movs	r6, #0
 8004aee:	4d0a      	ldr	r5, [pc, #40]	; (8004b18 <__libc_init_array+0x40>)
 8004af0:	4c0a      	ldr	r4, [pc, #40]	; (8004b1c <__libc_init_array+0x44>)
 8004af2:	1b64      	subs	r4, r4, r5
 8004af4:	10a4      	asrs	r4, r4, #2
 8004af6:	42a6      	cmp	r6, r4
 8004af8:	d105      	bne.n	8004b06 <__libc_init_array+0x2e>
 8004afa:	bd70      	pop	{r4, r5, r6, pc}
 8004afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b00:	4798      	blx	r3
 8004b02:	3601      	adds	r6, #1
 8004b04:	e7ee      	b.n	8004ae4 <__libc_init_array+0xc>
 8004b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b0a:	4798      	blx	r3
 8004b0c:	3601      	adds	r6, #1
 8004b0e:	e7f2      	b.n	8004af6 <__libc_init_array+0x1e>
 8004b10:	080054c0 	.word	0x080054c0
 8004b14:	080054c0 	.word	0x080054c0
 8004b18:	080054c0 	.word	0x080054c0
 8004b1c:	080054c4 	.word	0x080054c4

08004b20 <memcpy>:
 8004b20:	440a      	add	r2, r1
 8004b22:	4291      	cmp	r1, r2
 8004b24:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b28:	d100      	bne.n	8004b2c <memcpy+0xc>
 8004b2a:	4770      	bx	lr
 8004b2c:	b510      	push	{r4, lr}
 8004b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b32:	4291      	cmp	r1, r2
 8004b34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b38:	d1f9      	bne.n	8004b2e <memcpy+0xe>
 8004b3a:	bd10      	pop	{r4, pc}

08004b3c <memset>:
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	4402      	add	r2, r0
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d100      	bne.n	8004b46 <memset+0xa>
 8004b44:	4770      	bx	lr
 8004b46:	f803 1b01 	strb.w	r1, [r3], #1
 8004b4a:	e7f9      	b.n	8004b40 <memset+0x4>

08004b4c <siprintf>:
 8004b4c:	b40e      	push	{r1, r2, r3}
 8004b4e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b52:	b500      	push	{lr}
 8004b54:	b09c      	sub	sp, #112	; 0x70
 8004b56:	ab1d      	add	r3, sp, #116	; 0x74
 8004b58:	9002      	str	r0, [sp, #8]
 8004b5a:	9006      	str	r0, [sp, #24]
 8004b5c:	9107      	str	r1, [sp, #28]
 8004b5e:	9104      	str	r1, [sp, #16]
 8004b60:	4808      	ldr	r0, [pc, #32]	; (8004b84 <siprintf+0x38>)
 8004b62:	4909      	ldr	r1, [pc, #36]	; (8004b88 <siprintf+0x3c>)
 8004b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b68:	9105      	str	r1, [sp, #20]
 8004b6a:	6800      	ldr	r0, [r0, #0]
 8004b6c:	a902      	add	r1, sp, #8
 8004b6e:	9301      	str	r3, [sp, #4]
 8004b70:	f000 f868 	bl	8004c44 <_svfiprintf_r>
 8004b74:	2200      	movs	r2, #0
 8004b76:	9b02      	ldr	r3, [sp, #8]
 8004b78:	701a      	strb	r2, [r3, #0]
 8004b7a:	b01c      	add	sp, #112	; 0x70
 8004b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b80:	b003      	add	sp, #12
 8004b82:	4770      	bx	lr
 8004b84:	20000010 	.word	0x20000010
 8004b88:	ffff0208 	.word	0xffff0208

08004b8c <__ssputs_r>:
 8004b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b90:	688e      	ldr	r6, [r1, #8]
 8004b92:	4682      	mov	sl, r0
 8004b94:	429e      	cmp	r6, r3
 8004b96:	460c      	mov	r4, r1
 8004b98:	4690      	mov	r8, r2
 8004b9a:	461f      	mov	r7, r3
 8004b9c:	d838      	bhi.n	8004c10 <__ssputs_r+0x84>
 8004b9e:	898a      	ldrh	r2, [r1, #12]
 8004ba0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ba4:	d032      	beq.n	8004c0c <__ssputs_r+0x80>
 8004ba6:	6825      	ldr	r5, [r4, #0]
 8004ba8:	6909      	ldr	r1, [r1, #16]
 8004baa:	3301      	adds	r3, #1
 8004bac:	eba5 0901 	sub.w	r9, r5, r1
 8004bb0:	6965      	ldr	r5, [r4, #20]
 8004bb2:	444b      	add	r3, r9
 8004bb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bbc:	106d      	asrs	r5, r5, #1
 8004bbe:	429d      	cmp	r5, r3
 8004bc0:	bf38      	it	cc
 8004bc2:	461d      	movcc	r5, r3
 8004bc4:	0553      	lsls	r3, r2, #21
 8004bc6:	d531      	bpl.n	8004c2c <__ssputs_r+0xa0>
 8004bc8:	4629      	mov	r1, r5
 8004bca:	f000 fb45 	bl	8005258 <_malloc_r>
 8004bce:	4606      	mov	r6, r0
 8004bd0:	b950      	cbnz	r0, 8004be8 <__ssputs_r+0x5c>
 8004bd2:	230c      	movs	r3, #12
 8004bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd8:	f8ca 3000 	str.w	r3, [sl]
 8004bdc:	89a3      	ldrh	r3, [r4, #12]
 8004bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004be2:	81a3      	strh	r3, [r4, #12]
 8004be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004be8:	464a      	mov	r2, r9
 8004bea:	6921      	ldr	r1, [r4, #16]
 8004bec:	f7ff ff98 	bl	8004b20 <memcpy>
 8004bf0:	89a3      	ldrh	r3, [r4, #12]
 8004bf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfa:	81a3      	strh	r3, [r4, #12]
 8004bfc:	6126      	str	r6, [r4, #16]
 8004bfe:	444e      	add	r6, r9
 8004c00:	6026      	str	r6, [r4, #0]
 8004c02:	463e      	mov	r6, r7
 8004c04:	6165      	str	r5, [r4, #20]
 8004c06:	eba5 0509 	sub.w	r5, r5, r9
 8004c0a:	60a5      	str	r5, [r4, #8]
 8004c0c:	42be      	cmp	r6, r7
 8004c0e:	d900      	bls.n	8004c12 <__ssputs_r+0x86>
 8004c10:	463e      	mov	r6, r7
 8004c12:	4632      	mov	r2, r6
 8004c14:	4641      	mov	r1, r8
 8004c16:	6820      	ldr	r0, [r4, #0]
 8004c18:	f000 fab8 	bl	800518c <memmove>
 8004c1c:	68a3      	ldr	r3, [r4, #8]
 8004c1e:	6822      	ldr	r2, [r4, #0]
 8004c20:	1b9b      	subs	r3, r3, r6
 8004c22:	4432      	add	r2, r6
 8004c24:	2000      	movs	r0, #0
 8004c26:	60a3      	str	r3, [r4, #8]
 8004c28:	6022      	str	r2, [r4, #0]
 8004c2a:	e7db      	b.n	8004be4 <__ssputs_r+0x58>
 8004c2c:	462a      	mov	r2, r5
 8004c2e:	f000 fb6d 	bl	800530c <_realloc_r>
 8004c32:	4606      	mov	r6, r0
 8004c34:	2800      	cmp	r0, #0
 8004c36:	d1e1      	bne.n	8004bfc <__ssputs_r+0x70>
 8004c38:	4650      	mov	r0, sl
 8004c3a:	6921      	ldr	r1, [r4, #16]
 8004c3c:	f000 fac0 	bl	80051c0 <_free_r>
 8004c40:	e7c7      	b.n	8004bd2 <__ssputs_r+0x46>
	...

08004c44 <_svfiprintf_r>:
 8004c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c48:	4698      	mov	r8, r3
 8004c4a:	898b      	ldrh	r3, [r1, #12]
 8004c4c:	4607      	mov	r7, r0
 8004c4e:	061b      	lsls	r3, r3, #24
 8004c50:	460d      	mov	r5, r1
 8004c52:	4614      	mov	r4, r2
 8004c54:	b09d      	sub	sp, #116	; 0x74
 8004c56:	d50e      	bpl.n	8004c76 <_svfiprintf_r+0x32>
 8004c58:	690b      	ldr	r3, [r1, #16]
 8004c5a:	b963      	cbnz	r3, 8004c76 <_svfiprintf_r+0x32>
 8004c5c:	2140      	movs	r1, #64	; 0x40
 8004c5e:	f000 fafb 	bl	8005258 <_malloc_r>
 8004c62:	6028      	str	r0, [r5, #0]
 8004c64:	6128      	str	r0, [r5, #16]
 8004c66:	b920      	cbnz	r0, 8004c72 <_svfiprintf_r+0x2e>
 8004c68:	230c      	movs	r3, #12
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c70:	e0d1      	b.n	8004e16 <_svfiprintf_r+0x1d2>
 8004c72:	2340      	movs	r3, #64	; 0x40
 8004c74:	616b      	str	r3, [r5, #20]
 8004c76:	2300      	movs	r3, #0
 8004c78:	9309      	str	r3, [sp, #36]	; 0x24
 8004c7a:	2320      	movs	r3, #32
 8004c7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c80:	2330      	movs	r3, #48	; 0x30
 8004c82:	f04f 0901 	mov.w	r9, #1
 8004c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004e30 <_svfiprintf_r+0x1ec>
 8004c8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c92:	4623      	mov	r3, r4
 8004c94:	469a      	mov	sl, r3
 8004c96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c9a:	b10a      	cbz	r2, 8004ca0 <_svfiprintf_r+0x5c>
 8004c9c:	2a25      	cmp	r2, #37	; 0x25
 8004c9e:	d1f9      	bne.n	8004c94 <_svfiprintf_r+0x50>
 8004ca0:	ebba 0b04 	subs.w	fp, sl, r4
 8004ca4:	d00b      	beq.n	8004cbe <_svfiprintf_r+0x7a>
 8004ca6:	465b      	mov	r3, fp
 8004ca8:	4622      	mov	r2, r4
 8004caa:	4629      	mov	r1, r5
 8004cac:	4638      	mov	r0, r7
 8004cae:	f7ff ff6d 	bl	8004b8c <__ssputs_r>
 8004cb2:	3001      	adds	r0, #1
 8004cb4:	f000 80aa 	beq.w	8004e0c <_svfiprintf_r+0x1c8>
 8004cb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cba:	445a      	add	r2, fp
 8004cbc:	9209      	str	r2, [sp, #36]	; 0x24
 8004cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 80a2 	beq.w	8004e0c <_svfiprintf_r+0x1c8>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f04f 32ff 	mov.w	r2, #4294967295
 8004cce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cd2:	f10a 0a01 	add.w	sl, sl, #1
 8004cd6:	9304      	str	r3, [sp, #16]
 8004cd8:	9307      	str	r3, [sp, #28]
 8004cda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004cde:	931a      	str	r3, [sp, #104]	; 0x68
 8004ce0:	4654      	mov	r4, sl
 8004ce2:	2205      	movs	r2, #5
 8004ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ce8:	4851      	ldr	r0, [pc, #324]	; (8004e30 <_svfiprintf_r+0x1ec>)
 8004cea:	f000 fa41 	bl	8005170 <memchr>
 8004cee:	9a04      	ldr	r2, [sp, #16]
 8004cf0:	b9d8      	cbnz	r0, 8004d2a <_svfiprintf_r+0xe6>
 8004cf2:	06d0      	lsls	r0, r2, #27
 8004cf4:	bf44      	itt	mi
 8004cf6:	2320      	movmi	r3, #32
 8004cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cfc:	0711      	lsls	r1, r2, #28
 8004cfe:	bf44      	itt	mi
 8004d00:	232b      	movmi	r3, #43	; 0x2b
 8004d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d06:	f89a 3000 	ldrb.w	r3, [sl]
 8004d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d0c:	d015      	beq.n	8004d3a <_svfiprintf_r+0xf6>
 8004d0e:	4654      	mov	r4, sl
 8004d10:	2000      	movs	r0, #0
 8004d12:	f04f 0c0a 	mov.w	ip, #10
 8004d16:	9a07      	ldr	r2, [sp, #28]
 8004d18:	4621      	mov	r1, r4
 8004d1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d1e:	3b30      	subs	r3, #48	; 0x30
 8004d20:	2b09      	cmp	r3, #9
 8004d22:	d94e      	bls.n	8004dc2 <_svfiprintf_r+0x17e>
 8004d24:	b1b0      	cbz	r0, 8004d54 <_svfiprintf_r+0x110>
 8004d26:	9207      	str	r2, [sp, #28]
 8004d28:	e014      	b.n	8004d54 <_svfiprintf_r+0x110>
 8004d2a:	eba0 0308 	sub.w	r3, r0, r8
 8004d2e:	fa09 f303 	lsl.w	r3, r9, r3
 8004d32:	4313      	orrs	r3, r2
 8004d34:	46a2      	mov	sl, r4
 8004d36:	9304      	str	r3, [sp, #16]
 8004d38:	e7d2      	b.n	8004ce0 <_svfiprintf_r+0x9c>
 8004d3a:	9b03      	ldr	r3, [sp, #12]
 8004d3c:	1d19      	adds	r1, r3, #4
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	9103      	str	r1, [sp, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	bfbb      	ittet	lt
 8004d46:	425b      	neglt	r3, r3
 8004d48:	f042 0202 	orrlt.w	r2, r2, #2
 8004d4c:	9307      	strge	r3, [sp, #28]
 8004d4e:	9307      	strlt	r3, [sp, #28]
 8004d50:	bfb8      	it	lt
 8004d52:	9204      	strlt	r2, [sp, #16]
 8004d54:	7823      	ldrb	r3, [r4, #0]
 8004d56:	2b2e      	cmp	r3, #46	; 0x2e
 8004d58:	d10c      	bne.n	8004d74 <_svfiprintf_r+0x130>
 8004d5a:	7863      	ldrb	r3, [r4, #1]
 8004d5c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d5e:	d135      	bne.n	8004dcc <_svfiprintf_r+0x188>
 8004d60:	9b03      	ldr	r3, [sp, #12]
 8004d62:	3402      	adds	r4, #2
 8004d64:	1d1a      	adds	r2, r3, #4
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	9203      	str	r2, [sp, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	bfb8      	it	lt
 8004d6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d72:	9305      	str	r3, [sp, #20]
 8004d74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004e40 <_svfiprintf_r+0x1fc>
 8004d78:	2203      	movs	r2, #3
 8004d7a:	4650      	mov	r0, sl
 8004d7c:	7821      	ldrb	r1, [r4, #0]
 8004d7e:	f000 f9f7 	bl	8005170 <memchr>
 8004d82:	b140      	cbz	r0, 8004d96 <_svfiprintf_r+0x152>
 8004d84:	2340      	movs	r3, #64	; 0x40
 8004d86:	eba0 000a 	sub.w	r0, r0, sl
 8004d8a:	fa03 f000 	lsl.w	r0, r3, r0
 8004d8e:	9b04      	ldr	r3, [sp, #16]
 8004d90:	3401      	adds	r4, #1
 8004d92:	4303      	orrs	r3, r0
 8004d94:	9304      	str	r3, [sp, #16]
 8004d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d9a:	2206      	movs	r2, #6
 8004d9c:	4825      	ldr	r0, [pc, #148]	; (8004e34 <_svfiprintf_r+0x1f0>)
 8004d9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004da2:	f000 f9e5 	bl	8005170 <memchr>
 8004da6:	2800      	cmp	r0, #0
 8004da8:	d038      	beq.n	8004e1c <_svfiprintf_r+0x1d8>
 8004daa:	4b23      	ldr	r3, [pc, #140]	; (8004e38 <_svfiprintf_r+0x1f4>)
 8004dac:	bb1b      	cbnz	r3, 8004df6 <_svfiprintf_r+0x1b2>
 8004dae:	9b03      	ldr	r3, [sp, #12]
 8004db0:	3307      	adds	r3, #7
 8004db2:	f023 0307 	bic.w	r3, r3, #7
 8004db6:	3308      	adds	r3, #8
 8004db8:	9303      	str	r3, [sp, #12]
 8004dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dbc:	4433      	add	r3, r6
 8004dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8004dc0:	e767      	b.n	8004c92 <_svfiprintf_r+0x4e>
 8004dc2:	460c      	mov	r4, r1
 8004dc4:	2001      	movs	r0, #1
 8004dc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dca:	e7a5      	b.n	8004d18 <_svfiprintf_r+0xd4>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f04f 0c0a 	mov.w	ip, #10
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	3401      	adds	r4, #1
 8004dd6:	9305      	str	r3, [sp, #20]
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dde:	3a30      	subs	r2, #48	; 0x30
 8004de0:	2a09      	cmp	r2, #9
 8004de2:	d903      	bls.n	8004dec <_svfiprintf_r+0x1a8>
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0c5      	beq.n	8004d74 <_svfiprintf_r+0x130>
 8004de8:	9105      	str	r1, [sp, #20]
 8004dea:	e7c3      	b.n	8004d74 <_svfiprintf_r+0x130>
 8004dec:	4604      	mov	r4, r0
 8004dee:	2301      	movs	r3, #1
 8004df0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004df4:	e7f0      	b.n	8004dd8 <_svfiprintf_r+0x194>
 8004df6:	ab03      	add	r3, sp, #12
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	462a      	mov	r2, r5
 8004dfc:	4638      	mov	r0, r7
 8004dfe:	4b0f      	ldr	r3, [pc, #60]	; (8004e3c <_svfiprintf_r+0x1f8>)
 8004e00:	a904      	add	r1, sp, #16
 8004e02:	f3af 8000 	nop.w
 8004e06:	1c42      	adds	r2, r0, #1
 8004e08:	4606      	mov	r6, r0
 8004e0a:	d1d6      	bne.n	8004dba <_svfiprintf_r+0x176>
 8004e0c:	89ab      	ldrh	r3, [r5, #12]
 8004e0e:	065b      	lsls	r3, r3, #25
 8004e10:	f53f af2c 	bmi.w	8004c6c <_svfiprintf_r+0x28>
 8004e14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e16:	b01d      	add	sp, #116	; 0x74
 8004e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e1c:	ab03      	add	r3, sp, #12
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	462a      	mov	r2, r5
 8004e22:	4638      	mov	r0, r7
 8004e24:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <_svfiprintf_r+0x1f8>)
 8004e26:	a904      	add	r1, sp, #16
 8004e28:	f000 f87c 	bl	8004f24 <_printf_i>
 8004e2c:	e7eb      	b.n	8004e06 <_svfiprintf_r+0x1c2>
 8004e2e:	bf00      	nop
 8004e30:	0800548c 	.word	0x0800548c
 8004e34:	08005496 	.word	0x08005496
 8004e38:	00000000 	.word	0x00000000
 8004e3c:	08004b8d 	.word	0x08004b8d
 8004e40:	08005492 	.word	0x08005492

08004e44 <_printf_common>:
 8004e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e48:	4616      	mov	r6, r2
 8004e4a:	4699      	mov	r9, r3
 8004e4c:	688a      	ldr	r2, [r1, #8]
 8004e4e:	690b      	ldr	r3, [r1, #16]
 8004e50:	4607      	mov	r7, r0
 8004e52:	4293      	cmp	r3, r2
 8004e54:	bfb8      	it	lt
 8004e56:	4613      	movlt	r3, r2
 8004e58:	6033      	str	r3, [r6, #0]
 8004e5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e5e:	460c      	mov	r4, r1
 8004e60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e64:	b10a      	cbz	r2, 8004e6a <_printf_common+0x26>
 8004e66:	3301      	adds	r3, #1
 8004e68:	6033      	str	r3, [r6, #0]
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	0699      	lsls	r1, r3, #26
 8004e6e:	bf42      	ittt	mi
 8004e70:	6833      	ldrmi	r3, [r6, #0]
 8004e72:	3302      	addmi	r3, #2
 8004e74:	6033      	strmi	r3, [r6, #0]
 8004e76:	6825      	ldr	r5, [r4, #0]
 8004e78:	f015 0506 	ands.w	r5, r5, #6
 8004e7c:	d106      	bne.n	8004e8c <_printf_common+0x48>
 8004e7e:	f104 0a19 	add.w	sl, r4, #25
 8004e82:	68e3      	ldr	r3, [r4, #12]
 8004e84:	6832      	ldr	r2, [r6, #0]
 8004e86:	1a9b      	subs	r3, r3, r2
 8004e88:	42ab      	cmp	r3, r5
 8004e8a:	dc28      	bgt.n	8004ede <_printf_common+0x9a>
 8004e8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e90:	1e13      	subs	r3, r2, #0
 8004e92:	6822      	ldr	r2, [r4, #0]
 8004e94:	bf18      	it	ne
 8004e96:	2301      	movne	r3, #1
 8004e98:	0692      	lsls	r2, r2, #26
 8004e9a:	d42d      	bmi.n	8004ef8 <_printf_common+0xb4>
 8004e9c:	4649      	mov	r1, r9
 8004e9e:	4638      	mov	r0, r7
 8004ea0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ea4:	47c0      	blx	r8
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	d020      	beq.n	8004eec <_printf_common+0xa8>
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	68e5      	ldr	r5, [r4, #12]
 8004eae:	f003 0306 	and.w	r3, r3, #6
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	bf18      	it	ne
 8004eb6:	2500      	movne	r5, #0
 8004eb8:	6832      	ldr	r2, [r6, #0]
 8004eba:	f04f 0600 	mov.w	r6, #0
 8004ebe:	68a3      	ldr	r3, [r4, #8]
 8004ec0:	bf08      	it	eq
 8004ec2:	1aad      	subeq	r5, r5, r2
 8004ec4:	6922      	ldr	r2, [r4, #16]
 8004ec6:	bf08      	it	eq
 8004ec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	bfc4      	itt	gt
 8004ed0:	1a9b      	subgt	r3, r3, r2
 8004ed2:	18ed      	addgt	r5, r5, r3
 8004ed4:	341a      	adds	r4, #26
 8004ed6:	42b5      	cmp	r5, r6
 8004ed8:	d11a      	bne.n	8004f10 <_printf_common+0xcc>
 8004eda:	2000      	movs	r0, #0
 8004edc:	e008      	b.n	8004ef0 <_printf_common+0xac>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	4652      	mov	r2, sl
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	4638      	mov	r0, r7
 8004ee6:	47c0      	blx	r8
 8004ee8:	3001      	adds	r0, #1
 8004eea:	d103      	bne.n	8004ef4 <_printf_common+0xb0>
 8004eec:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef4:	3501      	adds	r5, #1
 8004ef6:	e7c4      	b.n	8004e82 <_printf_common+0x3e>
 8004ef8:	2030      	movs	r0, #48	; 0x30
 8004efa:	18e1      	adds	r1, r4, r3
 8004efc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f06:	4422      	add	r2, r4
 8004f08:	3302      	adds	r3, #2
 8004f0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f0e:	e7c5      	b.n	8004e9c <_printf_common+0x58>
 8004f10:	2301      	movs	r3, #1
 8004f12:	4622      	mov	r2, r4
 8004f14:	4649      	mov	r1, r9
 8004f16:	4638      	mov	r0, r7
 8004f18:	47c0      	blx	r8
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	d0e6      	beq.n	8004eec <_printf_common+0xa8>
 8004f1e:	3601      	adds	r6, #1
 8004f20:	e7d9      	b.n	8004ed6 <_printf_common+0x92>
	...

08004f24 <_printf_i>:
 8004f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f28:	460c      	mov	r4, r1
 8004f2a:	7e27      	ldrb	r7, [r4, #24]
 8004f2c:	4691      	mov	r9, r2
 8004f2e:	2f78      	cmp	r7, #120	; 0x78
 8004f30:	4680      	mov	r8, r0
 8004f32:	469a      	mov	sl, r3
 8004f34:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f3a:	d807      	bhi.n	8004f4c <_printf_i+0x28>
 8004f3c:	2f62      	cmp	r7, #98	; 0x62
 8004f3e:	d80a      	bhi.n	8004f56 <_printf_i+0x32>
 8004f40:	2f00      	cmp	r7, #0
 8004f42:	f000 80d9 	beq.w	80050f8 <_printf_i+0x1d4>
 8004f46:	2f58      	cmp	r7, #88	; 0x58
 8004f48:	f000 80a4 	beq.w	8005094 <_printf_i+0x170>
 8004f4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f54:	e03a      	b.n	8004fcc <_printf_i+0xa8>
 8004f56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f5a:	2b15      	cmp	r3, #21
 8004f5c:	d8f6      	bhi.n	8004f4c <_printf_i+0x28>
 8004f5e:	a001      	add	r0, pc, #4	; (adr r0, 8004f64 <_printf_i+0x40>)
 8004f60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004f64:	08004fbd 	.word	0x08004fbd
 8004f68:	08004fd1 	.word	0x08004fd1
 8004f6c:	08004f4d 	.word	0x08004f4d
 8004f70:	08004f4d 	.word	0x08004f4d
 8004f74:	08004f4d 	.word	0x08004f4d
 8004f78:	08004f4d 	.word	0x08004f4d
 8004f7c:	08004fd1 	.word	0x08004fd1
 8004f80:	08004f4d 	.word	0x08004f4d
 8004f84:	08004f4d 	.word	0x08004f4d
 8004f88:	08004f4d 	.word	0x08004f4d
 8004f8c:	08004f4d 	.word	0x08004f4d
 8004f90:	080050df 	.word	0x080050df
 8004f94:	08005001 	.word	0x08005001
 8004f98:	080050c1 	.word	0x080050c1
 8004f9c:	08004f4d 	.word	0x08004f4d
 8004fa0:	08004f4d 	.word	0x08004f4d
 8004fa4:	08005101 	.word	0x08005101
 8004fa8:	08004f4d 	.word	0x08004f4d
 8004fac:	08005001 	.word	0x08005001
 8004fb0:	08004f4d 	.word	0x08004f4d
 8004fb4:	08004f4d 	.word	0x08004f4d
 8004fb8:	080050c9 	.word	0x080050c9
 8004fbc:	680b      	ldr	r3, [r1, #0]
 8004fbe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004fc2:	1d1a      	adds	r2, r3, #4
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	600a      	str	r2, [r1, #0]
 8004fc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e0a4      	b.n	800511a <_printf_i+0x1f6>
 8004fd0:	6825      	ldr	r5, [r4, #0]
 8004fd2:	6808      	ldr	r0, [r1, #0]
 8004fd4:	062e      	lsls	r6, r5, #24
 8004fd6:	f100 0304 	add.w	r3, r0, #4
 8004fda:	d50a      	bpl.n	8004ff2 <_printf_i+0xce>
 8004fdc:	6805      	ldr	r5, [r0, #0]
 8004fde:	600b      	str	r3, [r1, #0]
 8004fe0:	2d00      	cmp	r5, #0
 8004fe2:	da03      	bge.n	8004fec <_printf_i+0xc8>
 8004fe4:	232d      	movs	r3, #45	; 0x2d
 8004fe6:	426d      	negs	r5, r5
 8004fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fec:	230a      	movs	r3, #10
 8004fee:	485e      	ldr	r0, [pc, #376]	; (8005168 <_printf_i+0x244>)
 8004ff0:	e019      	b.n	8005026 <_printf_i+0x102>
 8004ff2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004ff6:	6805      	ldr	r5, [r0, #0]
 8004ff8:	600b      	str	r3, [r1, #0]
 8004ffa:	bf18      	it	ne
 8004ffc:	b22d      	sxthne	r5, r5
 8004ffe:	e7ef      	b.n	8004fe0 <_printf_i+0xbc>
 8005000:	680b      	ldr	r3, [r1, #0]
 8005002:	6825      	ldr	r5, [r4, #0]
 8005004:	1d18      	adds	r0, r3, #4
 8005006:	6008      	str	r0, [r1, #0]
 8005008:	0628      	lsls	r0, r5, #24
 800500a:	d501      	bpl.n	8005010 <_printf_i+0xec>
 800500c:	681d      	ldr	r5, [r3, #0]
 800500e:	e002      	b.n	8005016 <_printf_i+0xf2>
 8005010:	0669      	lsls	r1, r5, #25
 8005012:	d5fb      	bpl.n	800500c <_printf_i+0xe8>
 8005014:	881d      	ldrh	r5, [r3, #0]
 8005016:	2f6f      	cmp	r7, #111	; 0x6f
 8005018:	bf0c      	ite	eq
 800501a:	2308      	moveq	r3, #8
 800501c:	230a      	movne	r3, #10
 800501e:	4852      	ldr	r0, [pc, #328]	; (8005168 <_printf_i+0x244>)
 8005020:	2100      	movs	r1, #0
 8005022:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005026:	6866      	ldr	r6, [r4, #4]
 8005028:	2e00      	cmp	r6, #0
 800502a:	bfa8      	it	ge
 800502c:	6821      	ldrge	r1, [r4, #0]
 800502e:	60a6      	str	r6, [r4, #8]
 8005030:	bfa4      	itt	ge
 8005032:	f021 0104 	bicge.w	r1, r1, #4
 8005036:	6021      	strge	r1, [r4, #0]
 8005038:	b90d      	cbnz	r5, 800503e <_printf_i+0x11a>
 800503a:	2e00      	cmp	r6, #0
 800503c:	d04d      	beq.n	80050da <_printf_i+0x1b6>
 800503e:	4616      	mov	r6, r2
 8005040:	fbb5 f1f3 	udiv	r1, r5, r3
 8005044:	fb03 5711 	mls	r7, r3, r1, r5
 8005048:	5dc7      	ldrb	r7, [r0, r7]
 800504a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800504e:	462f      	mov	r7, r5
 8005050:	42bb      	cmp	r3, r7
 8005052:	460d      	mov	r5, r1
 8005054:	d9f4      	bls.n	8005040 <_printf_i+0x11c>
 8005056:	2b08      	cmp	r3, #8
 8005058:	d10b      	bne.n	8005072 <_printf_i+0x14e>
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	07df      	lsls	r7, r3, #31
 800505e:	d508      	bpl.n	8005072 <_printf_i+0x14e>
 8005060:	6923      	ldr	r3, [r4, #16]
 8005062:	6861      	ldr	r1, [r4, #4]
 8005064:	4299      	cmp	r1, r3
 8005066:	bfde      	ittt	le
 8005068:	2330      	movle	r3, #48	; 0x30
 800506a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800506e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005072:	1b92      	subs	r2, r2, r6
 8005074:	6122      	str	r2, [r4, #16]
 8005076:	464b      	mov	r3, r9
 8005078:	4621      	mov	r1, r4
 800507a:	4640      	mov	r0, r8
 800507c:	f8cd a000 	str.w	sl, [sp]
 8005080:	aa03      	add	r2, sp, #12
 8005082:	f7ff fedf 	bl	8004e44 <_printf_common>
 8005086:	3001      	adds	r0, #1
 8005088:	d14c      	bne.n	8005124 <_printf_i+0x200>
 800508a:	f04f 30ff 	mov.w	r0, #4294967295
 800508e:	b004      	add	sp, #16
 8005090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005094:	4834      	ldr	r0, [pc, #208]	; (8005168 <_printf_i+0x244>)
 8005096:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800509a:	680e      	ldr	r6, [r1, #0]
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	f856 5b04 	ldr.w	r5, [r6], #4
 80050a2:	061f      	lsls	r7, r3, #24
 80050a4:	600e      	str	r6, [r1, #0]
 80050a6:	d514      	bpl.n	80050d2 <_printf_i+0x1ae>
 80050a8:	07d9      	lsls	r1, r3, #31
 80050aa:	bf44      	itt	mi
 80050ac:	f043 0320 	orrmi.w	r3, r3, #32
 80050b0:	6023      	strmi	r3, [r4, #0]
 80050b2:	b91d      	cbnz	r5, 80050bc <_printf_i+0x198>
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	f023 0320 	bic.w	r3, r3, #32
 80050ba:	6023      	str	r3, [r4, #0]
 80050bc:	2310      	movs	r3, #16
 80050be:	e7af      	b.n	8005020 <_printf_i+0xfc>
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	f043 0320 	orr.w	r3, r3, #32
 80050c6:	6023      	str	r3, [r4, #0]
 80050c8:	2378      	movs	r3, #120	; 0x78
 80050ca:	4828      	ldr	r0, [pc, #160]	; (800516c <_printf_i+0x248>)
 80050cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050d0:	e7e3      	b.n	800509a <_printf_i+0x176>
 80050d2:	065e      	lsls	r6, r3, #25
 80050d4:	bf48      	it	mi
 80050d6:	b2ad      	uxthmi	r5, r5
 80050d8:	e7e6      	b.n	80050a8 <_printf_i+0x184>
 80050da:	4616      	mov	r6, r2
 80050dc:	e7bb      	b.n	8005056 <_printf_i+0x132>
 80050de:	680b      	ldr	r3, [r1, #0]
 80050e0:	6826      	ldr	r6, [r4, #0]
 80050e2:	1d1d      	adds	r5, r3, #4
 80050e4:	6960      	ldr	r0, [r4, #20]
 80050e6:	600d      	str	r5, [r1, #0]
 80050e8:	0635      	lsls	r5, r6, #24
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	d501      	bpl.n	80050f2 <_printf_i+0x1ce>
 80050ee:	6018      	str	r0, [r3, #0]
 80050f0:	e002      	b.n	80050f8 <_printf_i+0x1d4>
 80050f2:	0671      	lsls	r1, r6, #25
 80050f4:	d5fb      	bpl.n	80050ee <_printf_i+0x1ca>
 80050f6:	8018      	strh	r0, [r3, #0]
 80050f8:	2300      	movs	r3, #0
 80050fa:	4616      	mov	r6, r2
 80050fc:	6123      	str	r3, [r4, #16]
 80050fe:	e7ba      	b.n	8005076 <_printf_i+0x152>
 8005100:	680b      	ldr	r3, [r1, #0]
 8005102:	1d1a      	adds	r2, r3, #4
 8005104:	600a      	str	r2, [r1, #0]
 8005106:	681e      	ldr	r6, [r3, #0]
 8005108:	2100      	movs	r1, #0
 800510a:	4630      	mov	r0, r6
 800510c:	6862      	ldr	r2, [r4, #4]
 800510e:	f000 f82f 	bl	8005170 <memchr>
 8005112:	b108      	cbz	r0, 8005118 <_printf_i+0x1f4>
 8005114:	1b80      	subs	r0, r0, r6
 8005116:	6060      	str	r0, [r4, #4]
 8005118:	6863      	ldr	r3, [r4, #4]
 800511a:	6123      	str	r3, [r4, #16]
 800511c:	2300      	movs	r3, #0
 800511e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005122:	e7a8      	b.n	8005076 <_printf_i+0x152>
 8005124:	4632      	mov	r2, r6
 8005126:	4649      	mov	r1, r9
 8005128:	4640      	mov	r0, r8
 800512a:	6923      	ldr	r3, [r4, #16]
 800512c:	47d0      	blx	sl
 800512e:	3001      	adds	r0, #1
 8005130:	d0ab      	beq.n	800508a <_printf_i+0x166>
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	079b      	lsls	r3, r3, #30
 8005136:	d413      	bmi.n	8005160 <_printf_i+0x23c>
 8005138:	68e0      	ldr	r0, [r4, #12]
 800513a:	9b03      	ldr	r3, [sp, #12]
 800513c:	4298      	cmp	r0, r3
 800513e:	bfb8      	it	lt
 8005140:	4618      	movlt	r0, r3
 8005142:	e7a4      	b.n	800508e <_printf_i+0x16a>
 8005144:	2301      	movs	r3, #1
 8005146:	4632      	mov	r2, r6
 8005148:	4649      	mov	r1, r9
 800514a:	4640      	mov	r0, r8
 800514c:	47d0      	blx	sl
 800514e:	3001      	adds	r0, #1
 8005150:	d09b      	beq.n	800508a <_printf_i+0x166>
 8005152:	3501      	adds	r5, #1
 8005154:	68e3      	ldr	r3, [r4, #12]
 8005156:	9903      	ldr	r1, [sp, #12]
 8005158:	1a5b      	subs	r3, r3, r1
 800515a:	42ab      	cmp	r3, r5
 800515c:	dcf2      	bgt.n	8005144 <_printf_i+0x220>
 800515e:	e7eb      	b.n	8005138 <_printf_i+0x214>
 8005160:	2500      	movs	r5, #0
 8005162:	f104 0619 	add.w	r6, r4, #25
 8005166:	e7f5      	b.n	8005154 <_printf_i+0x230>
 8005168:	0800549d 	.word	0x0800549d
 800516c:	080054ae 	.word	0x080054ae

08005170 <memchr>:
 8005170:	4603      	mov	r3, r0
 8005172:	b510      	push	{r4, lr}
 8005174:	b2c9      	uxtb	r1, r1
 8005176:	4402      	add	r2, r0
 8005178:	4293      	cmp	r3, r2
 800517a:	4618      	mov	r0, r3
 800517c:	d101      	bne.n	8005182 <memchr+0x12>
 800517e:	2000      	movs	r0, #0
 8005180:	e003      	b.n	800518a <memchr+0x1a>
 8005182:	7804      	ldrb	r4, [r0, #0]
 8005184:	3301      	adds	r3, #1
 8005186:	428c      	cmp	r4, r1
 8005188:	d1f6      	bne.n	8005178 <memchr+0x8>
 800518a:	bd10      	pop	{r4, pc}

0800518c <memmove>:
 800518c:	4288      	cmp	r0, r1
 800518e:	b510      	push	{r4, lr}
 8005190:	eb01 0402 	add.w	r4, r1, r2
 8005194:	d902      	bls.n	800519c <memmove+0x10>
 8005196:	4284      	cmp	r4, r0
 8005198:	4623      	mov	r3, r4
 800519a:	d807      	bhi.n	80051ac <memmove+0x20>
 800519c:	1e43      	subs	r3, r0, #1
 800519e:	42a1      	cmp	r1, r4
 80051a0:	d008      	beq.n	80051b4 <memmove+0x28>
 80051a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051aa:	e7f8      	b.n	800519e <memmove+0x12>
 80051ac:	4601      	mov	r1, r0
 80051ae:	4402      	add	r2, r0
 80051b0:	428a      	cmp	r2, r1
 80051b2:	d100      	bne.n	80051b6 <memmove+0x2a>
 80051b4:	bd10      	pop	{r4, pc}
 80051b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051be:	e7f7      	b.n	80051b0 <memmove+0x24>

080051c0 <_free_r>:
 80051c0:	b538      	push	{r3, r4, r5, lr}
 80051c2:	4605      	mov	r5, r0
 80051c4:	2900      	cmp	r1, #0
 80051c6:	d043      	beq.n	8005250 <_free_r+0x90>
 80051c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051cc:	1f0c      	subs	r4, r1, #4
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	bfb8      	it	lt
 80051d2:	18e4      	addlt	r4, r4, r3
 80051d4:	f000 f8d0 	bl	8005378 <__malloc_lock>
 80051d8:	4a1e      	ldr	r2, [pc, #120]	; (8005254 <_free_r+0x94>)
 80051da:	6813      	ldr	r3, [r2, #0]
 80051dc:	4610      	mov	r0, r2
 80051de:	b933      	cbnz	r3, 80051ee <_free_r+0x2e>
 80051e0:	6063      	str	r3, [r4, #4]
 80051e2:	6014      	str	r4, [r2, #0]
 80051e4:	4628      	mov	r0, r5
 80051e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051ea:	f000 b8cb 	b.w	8005384 <__malloc_unlock>
 80051ee:	42a3      	cmp	r3, r4
 80051f0:	d90a      	bls.n	8005208 <_free_r+0x48>
 80051f2:	6821      	ldr	r1, [r4, #0]
 80051f4:	1862      	adds	r2, r4, r1
 80051f6:	4293      	cmp	r3, r2
 80051f8:	bf01      	itttt	eq
 80051fa:	681a      	ldreq	r2, [r3, #0]
 80051fc:	685b      	ldreq	r3, [r3, #4]
 80051fe:	1852      	addeq	r2, r2, r1
 8005200:	6022      	streq	r2, [r4, #0]
 8005202:	6063      	str	r3, [r4, #4]
 8005204:	6004      	str	r4, [r0, #0]
 8005206:	e7ed      	b.n	80051e4 <_free_r+0x24>
 8005208:	461a      	mov	r2, r3
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	b10b      	cbz	r3, 8005212 <_free_r+0x52>
 800520e:	42a3      	cmp	r3, r4
 8005210:	d9fa      	bls.n	8005208 <_free_r+0x48>
 8005212:	6811      	ldr	r1, [r2, #0]
 8005214:	1850      	adds	r0, r2, r1
 8005216:	42a0      	cmp	r0, r4
 8005218:	d10b      	bne.n	8005232 <_free_r+0x72>
 800521a:	6820      	ldr	r0, [r4, #0]
 800521c:	4401      	add	r1, r0
 800521e:	1850      	adds	r0, r2, r1
 8005220:	4283      	cmp	r3, r0
 8005222:	6011      	str	r1, [r2, #0]
 8005224:	d1de      	bne.n	80051e4 <_free_r+0x24>
 8005226:	6818      	ldr	r0, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	4401      	add	r1, r0
 800522c:	6011      	str	r1, [r2, #0]
 800522e:	6053      	str	r3, [r2, #4]
 8005230:	e7d8      	b.n	80051e4 <_free_r+0x24>
 8005232:	d902      	bls.n	800523a <_free_r+0x7a>
 8005234:	230c      	movs	r3, #12
 8005236:	602b      	str	r3, [r5, #0]
 8005238:	e7d4      	b.n	80051e4 <_free_r+0x24>
 800523a:	6820      	ldr	r0, [r4, #0]
 800523c:	1821      	adds	r1, r4, r0
 800523e:	428b      	cmp	r3, r1
 8005240:	bf01      	itttt	eq
 8005242:	6819      	ldreq	r1, [r3, #0]
 8005244:	685b      	ldreq	r3, [r3, #4]
 8005246:	1809      	addeq	r1, r1, r0
 8005248:	6021      	streq	r1, [r4, #0]
 800524a:	6063      	str	r3, [r4, #4]
 800524c:	6054      	str	r4, [r2, #4]
 800524e:	e7c9      	b.n	80051e4 <_free_r+0x24>
 8005250:	bd38      	pop	{r3, r4, r5, pc}
 8005252:	bf00      	nop
 8005254:	200019a8 	.word	0x200019a8

08005258 <_malloc_r>:
 8005258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525a:	1ccd      	adds	r5, r1, #3
 800525c:	f025 0503 	bic.w	r5, r5, #3
 8005260:	3508      	adds	r5, #8
 8005262:	2d0c      	cmp	r5, #12
 8005264:	bf38      	it	cc
 8005266:	250c      	movcc	r5, #12
 8005268:	2d00      	cmp	r5, #0
 800526a:	4606      	mov	r6, r0
 800526c:	db01      	blt.n	8005272 <_malloc_r+0x1a>
 800526e:	42a9      	cmp	r1, r5
 8005270:	d903      	bls.n	800527a <_malloc_r+0x22>
 8005272:	230c      	movs	r3, #12
 8005274:	6033      	str	r3, [r6, #0]
 8005276:	2000      	movs	r0, #0
 8005278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800527a:	f000 f87d 	bl	8005378 <__malloc_lock>
 800527e:	4921      	ldr	r1, [pc, #132]	; (8005304 <_malloc_r+0xac>)
 8005280:	680a      	ldr	r2, [r1, #0]
 8005282:	4614      	mov	r4, r2
 8005284:	b99c      	cbnz	r4, 80052ae <_malloc_r+0x56>
 8005286:	4f20      	ldr	r7, [pc, #128]	; (8005308 <_malloc_r+0xb0>)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	b923      	cbnz	r3, 8005296 <_malloc_r+0x3e>
 800528c:	4621      	mov	r1, r4
 800528e:	4630      	mov	r0, r6
 8005290:	f000 f862 	bl	8005358 <_sbrk_r>
 8005294:	6038      	str	r0, [r7, #0]
 8005296:	4629      	mov	r1, r5
 8005298:	4630      	mov	r0, r6
 800529a:	f000 f85d 	bl	8005358 <_sbrk_r>
 800529e:	1c43      	adds	r3, r0, #1
 80052a0:	d123      	bne.n	80052ea <_malloc_r+0x92>
 80052a2:	230c      	movs	r3, #12
 80052a4:	4630      	mov	r0, r6
 80052a6:	6033      	str	r3, [r6, #0]
 80052a8:	f000 f86c 	bl	8005384 <__malloc_unlock>
 80052ac:	e7e3      	b.n	8005276 <_malloc_r+0x1e>
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	1b5b      	subs	r3, r3, r5
 80052b2:	d417      	bmi.n	80052e4 <_malloc_r+0x8c>
 80052b4:	2b0b      	cmp	r3, #11
 80052b6:	d903      	bls.n	80052c0 <_malloc_r+0x68>
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	441c      	add	r4, r3
 80052bc:	6025      	str	r5, [r4, #0]
 80052be:	e004      	b.n	80052ca <_malloc_r+0x72>
 80052c0:	6863      	ldr	r3, [r4, #4]
 80052c2:	42a2      	cmp	r2, r4
 80052c4:	bf0c      	ite	eq
 80052c6:	600b      	streq	r3, [r1, #0]
 80052c8:	6053      	strne	r3, [r2, #4]
 80052ca:	4630      	mov	r0, r6
 80052cc:	f000 f85a 	bl	8005384 <__malloc_unlock>
 80052d0:	f104 000b 	add.w	r0, r4, #11
 80052d4:	1d23      	adds	r3, r4, #4
 80052d6:	f020 0007 	bic.w	r0, r0, #7
 80052da:	1ac2      	subs	r2, r0, r3
 80052dc:	d0cc      	beq.n	8005278 <_malloc_r+0x20>
 80052de:	1a1b      	subs	r3, r3, r0
 80052e0:	50a3      	str	r3, [r4, r2]
 80052e2:	e7c9      	b.n	8005278 <_malloc_r+0x20>
 80052e4:	4622      	mov	r2, r4
 80052e6:	6864      	ldr	r4, [r4, #4]
 80052e8:	e7cc      	b.n	8005284 <_malloc_r+0x2c>
 80052ea:	1cc4      	adds	r4, r0, #3
 80052ec:	f024 0403 	bic.w	r4, r4, #3
 80052f0:	42a0      	cmp	r0, r4
 80052f2:	d0e3      	beq.n	80052bc <_malloc_r+0x64>
 80052f4:	1a21      	subs	r1, r4, r0
 80052f6:	4630      	mov	r0, r6
 80052f8:	f000 f82e 	bl	8005358 <_sbrk_r>
 80052fc:	3001      	adds	r0, #1
 80052fe:	d1dd      	bne.n	80052bc <_malloc_r+0x64>
 8005300:	e7cf      	b.n	80052a2 <_malloc_r+0x4a>
 8005302:	bf00      	nop
 8005304:	200019a8 	.word	0x200019a8
 8005308:	200019ac 	.word	0x200019ac

0800530c <_realloc_r>:
 800530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530e:	4607      	mov	r7, r0
 8005310:	4614      	mov	r4, r2
 8005312:	460e      	mov	r6, r1
 8005314:	b921      	cbnz	r1, 8005320 <_realloc_r+0x14>
 8005316:	4611      	mov	r1, r2
 8005318:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800531c:	f7ff bf9c 	b.w	8005258 <_malloc_r>
 8005320:	b922      	cbnz	r2, 800532c <_realloc_r+0x20>
 8005322:	f7ff ff4d 	bl	80051c0 <_free_r>
 8005326:	4625      	mov	r5, r4
 8005328:	4628      	mov	r0, r5
 800532a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800532c:	f000 f830 	bl	8005390 <_malloc_usable_size_r>
 8005330:	42a0      	cmp	r0, r4
 8005332:	d20f      	bcs.n	8005354 <_realloc_r+0x48>
 8005334:	4621      	mov	r1, r4
 8005336:	4638      	mov	r0, r7
 8005338:	f7ff ff8e 	bl	8005258 <_malloc_r>
 800533c:	4605      	mov	r5, r0
 800533e:	2800      	cmp	r0, #0
 8005340:	d0f2      	beq.n	8005328 <_realloc_r+0x1c>
 8005342:	4631      	mov	r1, r6
 8005344:	4622      	mov	r2, r4
 8005346:	f7ff fbeb 	bl	8004b20 <memcpy>
 800534a:	4631      	mov	r1, r6
 800534c:	4638      	mov	r0, r7
 800534e:	f7ff ff37 	bl	80051c0 <_free_r>
 8005352:	e7e9      	b.n	8005328 <_realloc_r+0x1c>
 8005354:	4635      	mov	r5, r6
 8005356:	e7e7      	b.n	8005328 <_realloc_r+0x1c>

08005358 <_sbrk_r>:
 8005358:	b538      	push	{r3, r4, r5, lr}
 800535a:	2300      	movs	r3, #0
 800535c:	4d05      	ldr	r5, [pc, #20]	; (8005374 <_sbrk_r+0x1c>)
 800535e:	4604      	mov	r4, r0
 8005360:	4608      	mov	r0, r1
 8005362:	602b      	str	r3, [r5, #0]
 8005364:	f7fb f9dc 	bl	8000720 <_sbrk>
 8005368:	1c43      	adds	r3, r0, #1
 800536a:	d102      	bne.n	8005372 <_sbrk_r+0x1a>
 800536c:	682b      	ldr	r3, [r5, #0]
 800536e:	b103      	cbz	r3, 8005372 <_sbrk_r+0x1a>
 8005370:	6023      	str	r3, [r4, #0]
 8005372:	bd38      	pop	{r3, r4, r5, pc}
 8005374:	20001a80 	.word	0x20001a80

08005378 <__malloc_lock>:
 8005378:	4801      	ldr	r0, [pc, #4]	; (8005380 <__malloc_lock+0x8>)
 800537a:	f000 b811 	b.w	80053a0 <__retarget_lock_acquire_recursive>
 800537e:	bf00      	nop
 8005380:	20001a88 	.word	0x20001a88

08005384 <__malloc_unlock>:
 8005384:	4801      	ldr	r0, [pc, #4]	; (800538c <__malloc_unlock+0x8>)
 8005386:	f000 b80c 	b.w	80053a2 <__retarget_lock_release_recursive>
 800538a:	bf00      	nop
 800538c:	20001a88 	.word	0x20001a88

08005390 <_malloc_usable_size_r>:
 8005390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005394:	1f18      	subs	r0, r3, #4
 8005396:	2b00      	cmp	r3, #0
 8005398:	bfbc      	itt	lt
 800539a:	580b      	ldrlt	r3, [r1, r0]
 800539c:	18c0      	addlt	r0, r0, r3
 800539e:	4770      	bx	lr

080053a0 <__retarget_lock_acquire_recursive>:
 80053a0:	4770      	bx	lr

080053a2 <__retarget_lock_release_recursive>:
 80053a2:	4770      	bx	lr

080053a4 <_init>:
 80053a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a6:	bf00      	nop
 80053a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053aa:	bc08      	pop	{r3}
 80053ac:	469e      	mov	lr, r3
 80053ae:	4770      	bx	lr

080053b0 <_fini>:
 80053b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b2:	bf00      	nop
 80053b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b6:	bc08      	pop	{r3}
 80053b8:	469e      	mov	lr, r3
 80053ba:	4770      	bx	lr
