
RTOS_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043e8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080044f8  080044f8  000144f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004610  08004610  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004610  08004610  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004610  08004610  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004610  08004610  00014610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004614  08004614  00014614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000036a4  20000010  08004628  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200036b4  08004628  000236b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000184ff  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003528  00000000  00000000  00038538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  0003ba60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  0003ce60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa5c  00000000  00000000  0003e0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000162dd  00000000  00000000  00058b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097dff  00000000  00000000  0006ee11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00106c10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005348  00000000  00000000  00106c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080044e0 	.word	0x080044e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080044e0 	.word	0x080044e0

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000038 	.word	0x20000038
 800017c:	2000008c 	.word	0x2000008c

08000180 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af02      	add	r7, sp, #8
  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  SEGGER_SYSVIEW_Conf();
 8000186:	f002 fda1 	bl	8002ccc <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 800018a:	f003 fbfb 	bl	8003984 <SEGGER_SYSVIEW_Start>
  xTaskCreate(Task_1_Handle,"Task_1", configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, &handleTask1);
 800018e:	4b0b      	ldr	r3, [pc, #44]	; (80001bc <MX_FREERTOS_Init+0x3c>)
 8000190:	9301      	str	r3, [sp, #4]
 8000192:	2300      	movs	r3, #0
 8000194:	9300      	str	r3, [sp, #0]
 8000196:	2300      	movs	r3, #0
 8000198:	2280      	movs	r2, #128	; 0x80
 800019a:	4909      	ldr	r1, [pc, #36]	; (80001c0 <MX_FREERTOS_Init+0x40>)
 800019c:	4809      	ldr	r0, [pc, #36]	; (80001c4 <MX_FREERTOS_Init+0x44>)
 800019e:	f001 fd52 	bl	8001c46 <xTaskCreate>
  xTaskCreate(Task_2_Handle,"Task_2", configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, &handleTask2);
 80001a2:	4b09      	ldr	r3, [pc, #36]	; (80001c8 <MX_FREERTOS_Init+0x48>)
 80001a4:	9301      	str	r3, [sp, #4]
 80001a6:	2300      	movs	r3, #0
 80001a8:	9300      	str	r3, [sp, #0]
 80001aa:	2300      	movs	r3, #0
 80001ac:	2280      	movs	r2, #128	; 0x80
 80001ae:	4907      	ldr	r1, [pc, #28]	; (80001cc <MX_FREERTOS_Init+0x4c>)
 80001b0:	4807      	ldr	r0, [pc, #28]	; (80001d0 <MX_FREERTOS_Init+0x50>)
 80001b2:	f001 fd48 	bl	8001c46 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

}
 80001b6:	bf00      	nop
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	2000002c 	.word	0x2000002c
 80001c0:	080044f8 	.word	0x080044f8
 80001c4:	080001d5 	.word	0x080001d5
 80001c8:	20000030 	.word	0x20000030
 80001cc:	08004500 	.word	0x08004500
 80001d0:	0800020d 	.word	0x0800020d

080001d4 <Task_1_Handle>:


/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void Task_1_Handle(void  * argument)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  if( KEY_AVAILABE == u8KeyUart ){
 80001dc:	4b09      	ldr	r3, [pc, #36]	; (8000204 <Task_1_Handle+0x30>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d1fb      	bne.n	80001dc <Task_1_Handle+0x8>
		  u8KeyUart= KEY_NOT_AVAILABLE;
 80001e4:	4b07      	ldr	r3, [pc, #28]	; (8000204 <Task_1_Handle+0x30>)
 80001e6:	2201      	movs	r2, #1
 80001e8:	701a      	strb	r2, [r3, #0]
		  //HAL_UART_Transmit( &huart1, (uint8_t *)"Hello world in task 1\n",23u, 100u );
		  u8KeyUart= KEY_AVAILABE;
 80001ea:	4b06      	ldr	r3, [pc, #24]	; (8000204 <Task_1_Handle+0x30>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	701a      	strb	r2, [r3, #0]
		  /* manual contex switching */
		  taskYIELD();
 80001f0:	4b05      	ldr	r3, [pc, #20]	; (8000208 <Task_1_Handle+0x34>)
 80001f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80001f6:	601a      	str	r2, [r3, #0]
 80001f8:	f3bf 8f4f 	dsb	sy
 80001fc:	f3bf 8f6f 	isb	sy
	  if( KEY_AVAILABE == u8KeyUart ){
 8000200:	e7ec      	b.n	80001dc <Task_1_Handle+0x8>
 8000202:	bf00      	nop
 8000204:	20000034 	.word	0x20000034
 8000208:	e000ed04 	.word	0xe000ed04

0800020c <Task_2_Handle>:
  }
}


void Task_2_Handle(void  * argument)
{
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
	for(;;)
	{
	  if( KEY_AVAILABE == u8KeyUart ){
 8000214:	4b09      	ldr	r3, [pc, #36]	; (800023c <Task_2_Handle+0x30>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d1fb      	bne.n	8000214 <Task_2_Handle+0x8>
		  u8KeyUart= KEY_NOT_AVAILABLE;
 800021c:	4b07      	ldr	r3, [pc, #28]	; (800023c <Task_2_Handle+0x30>)
 800021e:	2201      	movs	r2, #1
 8000220:	701a      	strb	r2, [r3, #0]
		  //HAL_UART_Transmit( &huart1, (uint8_t *)"Hello world in task 2\n",23u, 100u );
		  //osDelay(500u);
		  u8KeyUart= KEY_AVAILABE;
 8000222:	4b06      	ldr	r3, [pc, #24]	; (800023c <Task_2_Handle+0x30>)
 8000224:	2200      	movs	r2, #0
 8000226:	701a      	strb	r2, [r3, #0]
		  /* manual contex switching */
		  taskYIELD();
 8000228:	4b05      	ldr	r3, [pc, #20]	; (8000240 <Task_2_Handle+0x34>)
 800022a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	f3bf 8f4f 	dsb	sy
 8000234:	f3bf 8f6f 	isb	sy
	  if( KEY_AVAILABE == u8KeyUart ){
 8000238:	e7ec      	b.n	8000214 <Task_2_Handle+0x8>
 800023a:	bf00      	nop
 800023c:	20000034 	.word	0x20000034
 8000240:	e000ed04 	.word	0xe000ed04

08000244 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b088      	sub	sp, #32
 8000248:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024a:	f107 0310 	add.w	r3, r7, #16
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000258:	4b2a      	ldr	r3, [pc, #168]	; (8000304 <MX_GPIO_Init+0xc0>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	4a29      	ldr	r2, [pc, #164]	; (8000304 <MX_GPIO_Init+0xc0>)
 800025e:	f043 0310 	orr.w	r3, r3, #16
 8000262:	6193      	str	r3, [r2, #24]
 8000264:	4b27      	ldr	r3, [pc, #156]	; (8000304 <MX_GPIO_Init+0xc0>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	f003 0310 	and.w	r3, r3, #16
 800026c:	60fb      	str	r3, [r7, #12]
 800026e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000270:	4b24      	ldr	r3, [pc, #144]	; (8000304 <MX_GPIO_Init+0xc0>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	4a23      	ldr	r2, [pc, #140]	; (8000304 <MX_GPIO_Init+0xc0>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6193      	str	r3, [r2, #24]
 800027c:	4b21      	ldr	r3, [pc, #132]	; (8000304 <MX_GPIO_Init+0xc0>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	f003 0320 	and.w	r3, r3, #32
 8000284:	60bb      	str	r3, [r7, #8]
 8000286:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000288:	4b1e      	ldr	r3, [pc, #120]	; (8000304 <MX_GPIO_Init+0xc0>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	4a1d      	ldr	r2, [pc, #116]	; (8000304 <MX_GPIO_Init+0xc0>)
 800028e:	f043 0304 	orr.w	r3, r3, #4
 8000292:	6193      	str	r3, [r2, #24]
 8000294:	4b1b      	ldr	r3, [pc, #108]	; (8000304 <MX_GPIO_Init+0xc0>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	f003 0304 	and.w	r3, r3, #4
 800029c:	607b      	str	r3, [r7, #4]
 800029e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a0:	4b18      	ldr	r3, [pc, #96]	; (8000304 <MX_GPIO_Init+0xc0>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a17      	ldr	r2, [pc, #92]	; (8000304 <MX_GPIO_Init+0xc0>)
 80002a6:	f043 0308 	orr.w	r3, r3, #8
 80002aa:	6193      	str	r3, [r2, #24]
 80002ac:	4b15      	ldr	r3, [pc, #84]	; (8000304 <MX_GPIO_Init+0xc0>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	f003 0308 	and.w	r3, r3, #8
 80002b4:	603b      	str	r3, [r7, #0]
 80002b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80002b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002be:	2303      	movs	r3, #3
 80002c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002c2:	f107 0310 	add.w	r3, r7, #16
 80002c6:	4619      	mov	r1, r3
 80002c8:	480f      	ldr	r0, [pc, #60]	; (8000308 <MX_GPIO_Init+0xc4>)
 80002ca:	f000 faf1 	bl	80008b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80002ce:	f649 13ff 	movw	r3, #39423	; 0x99ff
 80002d2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002d4:	2303      	movs	r3, #3
 80002d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002d8:	f107 0310 	add.w	r3, r7, #16
 80002dc:	4619      	mov	r1, r3
 80002de:	480b      	ldr	r0, [pc, #44]	; (800030c <MX_GPIO_Init+0xc8>)
 80002e0:	f000 fae6 	bl	80008b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80002e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002e8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002ea:	2303      	movs	r3, #3
 80002ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ee:	f107 0310 	add.w	r3, r7, #16
 80002f2:	4619      	mov	r1, r3
 80002f4:	4806      	ldr	r0, [pc, #24]	; (8000310 <MX_GPIO_Init+0xcc>)
 80002f6:	f000 fadb 	bl	80008b0 <HAL_GPIO_Init>

}
 80002fa:	bf00      	nop
 80002fc:	3720      	adds	r7, #32
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40021000 	.word	0x40021000
 8000308:	40011000 	.word	0x40011000
 800030c:	40010800 	.word	0x40010800
 8000310:	40010c00 	.word	0x40010c00

08000314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  DWT->CTRL |= (1 << 0); // enable cycle count
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <main+0x2c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a08      	ldr	r2, [pc, #32]	; (8000340 <main+0x2c>)
 800031e:	f043 0301 	orr.w	r3, r3, #1
 8000322:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000324:	f000 f9b2 	bl	800068c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000328:	f000 f80c 	bl	8000344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800032c:	f7ff ff8a 	bl	8000244 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000330:	f000 f910 	bl	8000554 <MX_USART1_UART_Init>
  /* start recording */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000334:	f7ff ff24 	bl	8000180 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000338:	f001 fbae 	bl	8001a98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800033c:	e7fe      	b.n	800033c <main+0x28>
 800033e:	bf00      	nop
 8000340:	e0001000 	.word	0xe0001000

08000344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b090      	sub	sp, #64	; 0x40
 8000348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034a:	f107 0318 	add.w	r3, r7, #24
 800034e:	2228      	movs	r2, #40	; 0x28
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f004 f8bc 	bl	80044d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
 8000364:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000366:	2302      	movs	r3, #2
 8000368:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036a:	2301      	movs	r3, #1
 800036c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036e:	2310      	movs	r3, #16
 8000370:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000372:	2300      	movs	r3, #0
 8000374:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000376:	f107 0318 	add.w	r3, r7, #24
 800037a:	4618      	mov	r0, r3
 800037c:	f000 fc1c 	bl	8000bb8 <HAL_RCC_OscConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000386:	f000 f82b 	bl	80003e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038a:	230f      	movs	r3, #15
 800038c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800038e:	2300      	movs	r3, #0
 8000390:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 fe88 	bl	80010b8 <HAL_RCC_ClockConfig>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003ae:	f000 f817 	bl	80003e0 <Error_Handler>
  }
}
 80003b2:	bf00      	nop
 80003b4:	3740      	adds	r7, #64	; 0x40
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
	...

080003bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a04      	ldr	r2, [pc, #16]	; (80003dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d101      	bne.n	80003d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003ce:	f000 f973 	bl	80006b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40000400 	.word	0x40000400

080003e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e4:	b672      	cpsid	i
}
 80003e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <Error_Handler+0x8>
	...

080003ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003f2:	4b18      	ldr	r3, [pc, #96]	; (8000454 <HAL_MspInit+0x68>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	4a17      	ldr	r2, [pc, #92]	; (8000454 <HAL_MspInit+0x68>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6193      	str	r3, [r2, #24]
 80003fe:	4b15      	ldr	r3, [pc, #84]	; (8000454 <HAL_MspInit+0x68>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	60bb      	str	r3, [r7, #8]
 8000408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040a:	4b12      	ldr	r3, [pc, #72]	; (8000454 <HAL_MspInit+0x68>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	4a11      	ldr	r2, [pc, #68]	; (8000454 <HAL_MspInit+0x68>)
 8000410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000414:	61d3      	str	r3, [r2, #28]
 8000416:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <HAL_MspInit+0x68>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000422:	2200      	movs	r2, #0
 8000424:	210f      	movs	r1, #15
 8000426:	f06f 0001 	mvn.w	r0, #1
 800042a:	f000 fa16 	bl	800085a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800042e:	4b0a      	ldr	r3, [pc, #40]	; (8000458 <HAL_MspInit+0x6c>)
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	4a04      	ldr	r2, [pc, #16]	; (8000458 <HAL_MspInit+0x6c>)
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044a:	bf00      	nop
 800044c:	3710      	adds	r7, #16
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40021000 	.word	0x40021000
 8000458:	40010000 	.word	0x40010000

0800045c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b08c      	sub	sp, #48	; 0x30
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000468:	2300      	movs	r3, #0
 800046a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 800046c:	2200      	movs	r2, #0
 800046e:	6879      	ldr	r1, [r7, #4]
 8000470:	201d      	movs	r0, #29
 8000472:	f000 f9f2 	bl	800085a <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000476:	201d      	movs	r0, #29
 8000478:	f000 fa0b 	bl	8000892 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800047c:	4b1e      	ldr	r3, [pc, #120]	; (80004f8 <HAL_InitTick+0x9c>)
 800047e:	69db      	ldr	r3, [r3, #28]
 8000480:	4a1d      	ldr	r2, [pc, #116]	; (80004f8 <HAL_InitTick+0x9c>)
 8000482:	f043 0302 	orr.w	r3, r3, #2
 8000486:	61d3      	str	r3, [r2, #28]
 8000488:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <HAL_InitTick+0x9c>)
 800048a:	69db      	ldr	r3, [r3, #28]
 800048c:	f003 0302 	and.w	r3, r3, #2
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000494:	f107 0210 	add.w	r2, r7, #16
 8000498:	f107 0314 	add.w	r3, r7, #20
 800049c:	4611      	mov	r1, r2
 800049e:	4618      	mov	r0, r3
 80004a0:	f000 ff86 	bl	80013b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004a4:	f000 ff5c 	bl	8001360 <HAL_RCC_GetPCLK1Freq>
 80004a8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004ac:	4a13      	ldr	r2, [pc, #76]	; (80004fc <HAL_InitTick+0xa0>)
 80004ae:	fba2 2303 	umull	r2, r3, r2, r3
 80004b2:	0c9b      	lsrs	r3, r3, #18
 80004b4:	3b01      	subs	r3, #1
 80004b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80004b8:	4b11      	ldr	r3, [pc, #68]	; (8000500 <HAL_InitTick+0xa4>)
 80004ba:	4a12      	ldr	r2, [pc, #72]	; (8000504 <HAL_InitTick+0xa8>)
 80004bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80004be:	4b10      	ldr	r3, [pc, #64]	; (8000500 <HAL_InitTick+0xa4>)
 80004c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004c4:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80004c6:	4a0e      	ldr	r2, [pc, #56]	; (8000500 <HAL_InitTick+0xa4>)
 80004c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004ca:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80004cc:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <HAL_InitTick+0xa4>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <HAL_InitTick+0xa4>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80004d8:	4809      	ldr	r0, [pc, #36]	; (8000500 <HAL_InitTick+0xa4>)
 80004da:	f000 ffb7 	bl	800144c <HAL_TIM_Base_Init>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d104      	bne.n	80004ee <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80004e4:	4806      	ldr	r0, [pc, #24]	; (8000500 <HAL_InitTick+0xa4>)
 80004e6:	f001 f809 	bl	80014fc <HAL_TIM_Base_Start_IT>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e000      	b.n	80004f0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80004ee:	2301      	movs	r3, #1
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3730      	adds	r7, #48	; 0x30
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40021000 	.word	0x40021000
 80004fc:	431bde83 	.word	0x431bde83
 8000500:	20003580 	.word	0x20003580
 8000504:	40000400 	.word	0x40000400

08000508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800050c:	e7fe      	b.n	800050c <NMI_Handler+0x4>

0800050e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000512:	e7fe      	b.n	8000512 <HardFault_Handler+0x4>

08000514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000518:	e7fe      	b.n	8000518 <MemManage_Handler+0x4>

0800051a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800051e:	e7fe      	b.n	800051e <BusFault_Handler+0x4>

08000520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <UsageFault_Handler+0x4>

08000526 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr
	...

08000534 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000538:	4802      	ldr	r0, [pc, #8]	; (8000544 <TIM3_IRQHandler+0x10>)
 800053a:	f001 f831 	bl	80015a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20003580 	.word	0x20003580

08000548 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000558:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 800055a:	4a12      	ldr	r2, [pc, #72]	; (80005a4 <MX_USART1_UART_Init+0x50>)
 800055c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800055e:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 8000560:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000564:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 8000574:	2200      	movs	r2, #0
 8000576:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000578:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 800057a:	220c      	movs	r2, #12
 800057c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800057e:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 8000580:	2200      	movs	r2, #0
 8000582:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000584:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 8000586:	2200      	movs	r2, #0
 8000588:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800058a:	4805      	ldr	r0, [pc, #20]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 800058c:	f001 f9a8 	bl	80018e0 <HAL_UART_Init>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000596:	f7ff ff23 	bl	80003e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	200035c8 	.word	0x200035c8
 80005a4:	40013800 	.word	0x40013800

080005a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b0:	f107 0310 	add.w	r3, r7, #16
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a1c      	ldr	r2, [pc, #112]	; (8000634 <HAL_UART_MspInit+0x8c>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d131      	bne.n	800062c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005c8:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <HAL_UART_MspInit+0x90>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a1a      	ldr	r2, [pc, #104]	; (8000638 <HAL_UART_MspInit+0x90>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b18      	ldr	r3, [pc, #96]	; (8000638 <HAL_UART_MspInit+0x90>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b15      	ldr	r3, [pc, #84]	; (8000638 <HAL_UART_MspInit+0x90>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	4a14      	ldr	r2, [pc, #80]	; (8000638 <HAL_UART_MspInit+0x90>)
 80005e6:	f043 0304 	orr.w	r3, r3, #4
 80005ea:	6193      	str	r3, [r2, #24]
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <HAL_UART_MspInit+0x90>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f003 0304 	and.w	r3, r3, #4
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fe:	2302      	movs	r3, #2
 8000600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000602:	2303      	movs	r3, #3
 8000604:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000606:	f107 0310 	add.w	r3, r7, #16
 800060a:	4619      	mov	r1, r3
 800060c:	480b      	ldr	r0, [pc, #44]	; (800063c <HAL_UART_MspInit+0x94>)
 800060e:	f000 f94f 	bl	80008b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000616:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	4619      	mov	r1, r3
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <HAL_UART_MspInit+0x94>)
 8000628:	f000 f942 	bl	80008b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800062c:	bf00      	nop
 800062e:	3720      	adds	r7, #32
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40013800 	.word	0x40013800
 8000638:	40021000 	.word	0x40021000
 800063c:	40010800 	.word	0x40010800

08000640 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000640:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000642:	e003      	b.n	800064c <LoopCopyDataInit>

08000644 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000644:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000646:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000648:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800064a:	3104      	adds	r1, #4

0800064c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800064c:	480a      	ldr	r0, [pc, #40]	; (8000678 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000650:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000652:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000654:	d3f6      	bcc.n	8000644 <CopyDataInit>
  ldr r2, =_sbss
 8000656:	4a0a      	ldr	r2, [pc, #40]	; (8000680 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000658:	e002      	b.n	8000660 <LoopFillZerobss>

0800065a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800065c:	f842 3b04 	str.w	r3, [r2], #4

08000660 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000662:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000664:	d3f9      	bcc.n	800065a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000666:	f7ff ff6f 	bl	8000548 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800066a:	f003 fef1 	bl	8004450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800066e:	f7ff fe51 	bl	8000314 <main>
  bx lr
 8000672:	4770      	bx	lr
  ldr r3, =_sidata
 8000674:	08004618 	.word	0x08004618
  ldr r0, =_sdata
 8000678:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800067c:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000680:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000684:	200036b4 	.word	0x200036b4

08000688 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000688:	e7fe      	b.n	8000688 <ADC1_2_IRQHandler>
	...

0800068c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <HAL_Init+0x28>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <HAL_Init+0x28>)
 8000696:	f043 0310 	orr.w	r3, r3, #16
 800069a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800069c:	2003      	movs	r0, #3
 800069e:	f000 f8d1 	bl	8000844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f7ff feda 	bl	800045c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006a8:	f7ff fea0 	bl	80003ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ac:	2300      	movs	r3, #0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40022000 	.word	0x40022000

080006b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <HAL_IncTick+0x1c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <HAL_IncTick+0x20>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4413      	add	r3, r2
 80006c8:	4a03      	ldr	r2, [pc, #12]	; (80006d8 <HAL_IncTick+0x20>)
 80006ca:	6013      	str	r3, [r2, #0]
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	20000008 	.word	0x20000008
 80006d8:	20003608 	.word	0x20003608

080006dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return uwTick;
 80006e0:	4b02      	ldr	r3, [pc, #8]	; (80006ec <HAL_GetTick+0x10>)
 80006e2:	681b      	ldr	r3, [r3, #0]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	20003608 	.word	0x20003608

080006f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <__NVIC_SetPriorityGrouping+0x44>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000706:	68ba      	ldr	r2, [r7, #8]
 8000708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800070c:	4013      	ands	r3, r2
 800070e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800071c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000722:	4a04      	ldr	r2, [pc, #16]	; (8000734 <__NVIC_SetPriorityGrouping+0x44>)
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	60d3      	str	r3, [r2, #12]
}
 8000728:	bf00      	nop
 800072a:	3714      	adds	r7, #20
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800073c:	4b04      	ldr	r3, [pc, #16]	; (8000750 <__NVIC_GetPriorityGrouping+0x18>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	0a1b      	lsrs	r3, r3, #8
 8000742:	f003 0307 	and.w	r3, r3, #7
}
 8000746:	4618      	mov	r0, r3
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	2b00      	cmp	r3, #0
 8000764:	db0b      	blt.n	800077e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	f003 021f 	and.w	r2, r3, #31
 800076c:	4906      	ldr	r1, [pc, #24]	; (8000788 <__NVIC_EnableIRQ+0x34>)
 800076e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000772:	095b      	lsrs	r3, r3, #5
 8000774:	2001      	movs	r0, #1
 8000776:	fa00 f202 	lsl.w	r2, r0, r2
 800077a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	e000e100 	.word	0xe000e100

0800078c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	6039      	str	r1, [r7, #0]
 8000796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079c:	2b00      	cmp	r3, #0
 800079e:	db0a      	blt.n	80007b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	490c      	ldr	r1, [pc, #48]	; (80007d8 <__NVIC_SetPriority+0x4c>)
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	0112      	lsls	r2, r2, #4
 80007ac:	b2d2      	uxtb	r2, r2
 80007ae:	440b      	add	r3, r1
 80007b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007b4:	e00a      	b.n	80007cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4908      	ldr	r1, [pc, #32]	; (80007dc <__NVIC_SetPriority+0x50>)
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	f003 030f 	and.w	r3, r3, #15
 80007c2:	3b04      	subs	r3, #4
 80007c4:	0112      	lsls	r2, r2, #4
 80007c6:	b2d2      	uxtb	r2, r2
 80007c8:	440b      	add	r3, r1
 80007ca:	761a      	strb	r2, [r3, #24]
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000e100 	.word	0xe000e100
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b089      	sub	sp, #36	; 0x24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007f4:	69fb      	ldr	r3, [r7, #28]
 80007f6:	f1c3 0307 	rsb	r3, r3, #7
 80007fa:	2b04      	cmp	r3, #4
 80007fc:	bf28      	it	cs
 80007fe:	2304      	movcs	r3, #4
 8000800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	3304      	adds	r3, #4
 8000806:	2b06      	cmp	r3, #6
 8000808:	d902      	bls.n	8000810 <NVIC_EncodePriority+0x30>
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	3b03      	subs	r3, #3
 800080e:	e000      	b.n	8000812 <NVIC_EncodePriority+0x32>
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000814:	f04f 32ff 	mov.w	r2, #4294967295
 8000818:	69bb      	ldr	r3, [r7, #24]
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	43da      	mvns	r2, r3
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	401a      	ands	r2, r3
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000828:	f04f 31ff 	mov.w	r1, #4294967295
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	fa01 f303 	lsl.w	r3, r1, r3
 8000832:	43d9      	mvns	r1, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000838:	4313      	orrs	r3, r2
         );
}
 800083a:	4618      	mov	r0, r3
 800083c:	3724      	adds	r7, #36	; 0x24
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff ff4f 	bl	80006f0 <__NVIC_SetPriorityGrouping>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800085a:	b580      	push	{r7, lr}
 800085c:	b086      	sub	sp, #24
 800085e:	af00      	add	r7, sp, #0
 8000860:	4603      	mov	r3, r0
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
 8000866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800086c:	f7ff ff64 	bl	8000738 <__NVIC_GetPriorityGrouping>
 8000870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	68b9      	ldr	r1, [r7, #8]
 8000876:	6978      	ldr	r0, [r7, #20]
 8000878:	f7ff ffb2 	bl	80007e0 <NVIC_EncodePriority>
 800087c:	4602      	mov	r2, r0
 800087e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff81 	bl	800078c <__NVIC_SetPriority>
}
 800088a:	bf00      	nop
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	4603      	mov	r3, r0
 800089a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800089c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff57 	bl	8000754 <__NVIC_EnableIRQ>
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b08b      	sub	sp, #44	; 0x2c
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008c2:	e169      	b.n	8000b98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008c4:	2201      	movs	r2, #1
 80008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	69fa      	ldr	r2, [r7, #28]
 80008d4:	4013      	ands	r3, r2
 80008d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008d8:	69ba      	ldr	r2, [r7, #24]
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	429a      	cmp	r2, r3
 80008de:	f040 8158 	bne.w	8000b92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	4a9a      	ldr	r2, [pc, #616]	; (8000b50 <HAL_GPIO_Init+0x2a0>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d05e      	beq.n	80009aa <HAL_GPIO_Init+0xfa>
 80008ec:	4a98      	ldr	r2, [pc, #608]	; (8000b50 <HAL_GPIO_Init+0x2a0>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d875      	bhi.n	80009de <HAL_GPIO_Init+0x12e>
 80008f2:	4a98      	ldr	r2, [pc, #608]	; (8000b54 <HAL_GPIO_Init+0x2a4>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d058      	beq.n	80009aa <HAL_GPIO_Init+0xfa>
 80008f8:	4a96      	ldr	r2, [pc, #600]	; (8000b54 <HAL_GPIO_Init+0x2a4>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d86f      	bhi.n	80009de <HAL_GPIO_Init+0x12e>
 80008fe:	4a96      	ldr	r2, [pc, #600]	; (8000b58 <HAL_GPIO_Init+0x2a8>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d052      	beq.n	80009aa <HAL_GPIO_Init+0xfa>
 8000904:	4a94      	ldr	r2, [pc, #592]	; (8000b58 <HAL_GPIO_Init+0x2a8>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d869      	bhi.n	80009de <HAL_GPIO_Init+0x12e>
 800090a:	4a94      	ldr	r2, [pc, #592]	; (8000b5c <HAL_GPIO_Init+0x2ac>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d04c      	beq.n	80009aa <HAL_GPIO_Init+0xfa>
 8000910:	4a92      	ldr	r2, [pc, #584]	; (8000b5c <HAL_GPIO_Init+0x2ac>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d863      	bhi.n	80009de <HAL_GPIO_Init+0x12e>
 8000916:	4a92      	ldr	r2, [pc, #584]	; (8000b60 <HAL_GPIO_Init+0x2b0>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d046      	beq.n	80009aa <HAL_GPIO_Init+0xfa>
 800091c:	4a90      	ldr	r2, [pc, #576]	; (8000b60 <HAL_GPIO_Init+0x2b0>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d85d      	bhi.n	80009de <HAL_GPIO_Init+0x12e>
 8000922:	2b12      	cmp	r3, #18
 8000924:	d82a      	bhi.n	800097c <HAL_GPIO_Init+0xcc>
 8000926:	2b12      	cmp	r3, #18
 8000928:	d859      	bhi.n	80009de <HAL_GPIO_Init+0x12e>
 800092a:	a201      	add	r2, pc, #4	; (adr r2, 8000930 <HAL_GPIO_Init+0x80>)
 800092c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000930:	080009ab 	.word	0x080009ab
 8000934:	08000985 	.word	0x08000985
 8000938:	08000997 	.word	0x08000997
 800093c:	080009d9 	.word	0x080009d9
 8000940:	080009df 	.word	0x080009df
 8000944:	080009df 	.word	0x080009df
 8000948:	080009df 	.word	0x080009df
 800094c:	080009df 	.word	0x080009df
 8000950:	080009df 	.word	0x080009df
 8000954:	080009df 	.word	0x080009df
 8000958:	080009df 	.word	0x080009df
 800095c:	080009df 	.word	0x080009df
 8000960:	080009df 	.word	0x080009df
 8000964:	080009df 	.word	0x080009df
 8000968:	080009df 	.word	0x080009df
 800096c:	080009df 	.word	0x080009df
 8000970:	080009df 	.word	0x080009df
 8000974:	0800098d 	.word	0x0800098d
 8000978:	080009a1 	.word	0x080009a1
 800097c:	4a79      	ldr	r2, [pc, #484]	; (8000b64 <HAL_GPIO_Init+0x2b4>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d013      	beq.n	80009aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000982:	e02c      	b.n	80009de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	623b      	str	r3, [r7, #32]
          break;
 800098a:	e029      	b.n	80009e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	3304      	adds	r3, #4
 8000992:	623b      	str	r3, [r7, #32]
          break;
 8000994:	e024      	b.n	80009e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	3308      	adds	r3, #8
 800099c:	623b      	str	r3, [r7, #32]
          break;
 800099e:	e01f      	b.n	80009e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	330c      	adds	r3, #12
 80009a6:	623b      	str	r3, [r7, #32]
          break;
 80009a8:	e01a      	b.n	80009e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d102      	bne.n	80009b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009b2:	2304      	movs	r3, #4
 80009b4:	623b      	str	r3, [r7, #32]
          break;
 80009b6:	e013      	b.n	80009e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d105      	bne.n	80009cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009c0:	2308      	movs	r3, #8
 80009c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	69fa      	ldr	r2, [r7, #28]
 80009c8:	611a      	str	r2, [r3, #16]
          break;
 80009ca:	e009      	b.n	80009e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009cc:	2308      	movs	r3, #8
 80009ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	69fa      	ldr	r2, [r7, #28]
 80009d4:	615a      	str	r2, [r3, #20]
          break;
 80009d6:	e003      	b.n	80009e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
          break;
 80009dc:	e000      	b.n	80009e0 <HAL_GPIO_Init+0x130>
          break;
 80009de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	2bff      	cmp	r3, #255	; 0xff
 80009e4:	d801      	bhi.n	80009ea <HAL_GPIO_Init+0x13a>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	e001      	b.n	80009ee <HAL_GPIO_Init+0x13e>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3304      	adds	r3, #4
 80009ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	2bff      	cmp	r3, #255	; 0xff
 80009f4:	d802      	bhi.n	80009fc <HAL_GPIO_Init+0x14c>
 80009f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	e002      	b.n	8000a02 <HAL_GPIO_Init+0x152>
 80009fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fe:	3b08      	subs	r3, #8
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	210f      	movs	r1, #15
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	401a      	ands	r2, r3
 8000a14:	6a39      	ldr	r1, [r7, #32]
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	f000 80b1 	beq.w	8000b92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a30:	4b4d      	ldr	r3, [pc, #308]	; (8000b68 <HAL_GPIO_Init+0x2b8>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a4c      	ldr	r2, [pc, #304]	; (8000b68 <HAL_GPIO_Init+0x2b8>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b4a      	ldr	r3, [pc, #296]	; (8000b68 <HAL_GPIO_Init+0x2b8>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a48:	4a48      	ldr	r2, [pc, #288]	; (8000b6c <HAL_GPIO_Init+0x2bc>)
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4c:	089b      	lsrs	r3, r3, #2
 8000a4e:	3302      	adds	r3, #2
 8000a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a58:	f003 0303 	and.w	r3, r3, #3
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	220f      	movs	r2, #15
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	43db      	mvns	r3, r3
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4a40      	ldr	r2, [pc, #256]	; (8000b70 <HAL_GPIO_Init+0x2c0>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d013      	beq.n	8000a9c <HAL_GPIO_Init+0x1ec>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a3f      	ldr	r2, [pc, #252]	; (8000b74 <HAL_GPIO_Init+0x2c4>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d00d      	beq.n	8000a98 <HAL_GPIO_Init+0x1e8>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a3e      	ldr	r2, [pc, #248]	; (8000b78 <HAL_GPIO_Init+0x2c8>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d007      	beq.n	8000a94 <HAL_GPIO_Init+0x1e4>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a3d      	ldr	r2, [pc, #244]	; (8000b7c <HAL_GPIO_Init+0x2cc>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d101      	bne.n	8000a90 <HAL_GPIO_Init+0x1e0>
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	e006      	b.n	8000a9e <HAL_GPIO_Init+0x1ee>
 8000a90:	2304      	movs	r3, #4
 8000a92:	e004      	b.n	8000a9e <HAL_GPIO_Init+0x1ee>
 8000a94:	2302      	movs	r3, #2
 8000a96:	e002      	b.n	8000a9e <HAL_GPIO_Init+0x1ee>
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e000      	b.n	8000a9e <HAL_GPIO_Init+0x1ee>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aa0:	f002 0203 	and.w	r2, r2, #3
 8000aa4:	0092      	lsls	r2, r2, #2
 8000aa6:	4093      	lsls	r3, r2
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000aae:	492f      	ldr	r1, [pc, #188]	; (8000b6c <HAL_GPIO_Init+0x2bc>)
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab2:	089b      	lsrs	r3, r3, #2
 8000ab4:	3302      	adds	r3, #2
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d006      	beq.n	8000ad6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ac8:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	492c      	ldr	r1, [pc, #176]	; (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	600b      	str	r3, [r1, #0]
 8000ad4:	e006      	b.n	8000ae4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ad6:	4b2a      	ldr	r3, [pc, #168]	; (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	4928      	ldr	r1, [pc, #160]	; (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d006      	beq.n	8000afe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000af0:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	4922      	ldr	r1, [pc, #136]	; (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	604b      	str	r3, [r1, #4]
 8000afc:	e006      	b.n	8000b0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000b00:	685a      	ldr	r2, [r3, #4]
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	43db      	mvns	r3, r3
 8000b06:	491e      	ldr	r1, [pc, #120]	; (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000b08:	4013      	ands	r3, r2
 8000b0a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d006      	beq.n	8000b26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b18:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000b1a:	689a      	ldr	r2, [r3, #8]
 8000b1c:	4918      	ldr	r1, [pc, #96]	; (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	608b      	str	r3, [r1, #8]
 8000b24:	e006      	b.n	8000b34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000b28:	689a      	ldr	r2, [r3, #8]
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	4914      	ldr	r1, [pc, #80]	; (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000b30:	4013      	ands	r3, r2
 8000b32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d021      	beq.n	8000b84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000b42:	68da      	ldr	r2, [r3, #12]
 8000b44:	490e      	ldr	r1, [pc, #56]	; (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	60cb      	str	r3, [r1, #12]
 8000b4c:	e021      	b.n	8000b92 <HAL_GPIO_Init+0x2e2>
 8000b4e:	bf00      	nop
 8000b50:	10320000 	.word	0x10320000
 8000b54:	10310000 	.word	0x10310000
 8000b58:	10220000 	.word	0x10220000
 8000b5c:	10210000 	.word	0x10210000
 8000b60:	10120000 	.word	0x10120000
 8000b64:	10110000 	.word	0x10110000
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40010000 	.word	0x40010000
 8000b70:	40010800 	.word	0x40010800
 8000b74:	40010c00 	.word	0x40010c00
 8000b78:	40011000 	.word	0x40011000
 8000b7c:	40011400 	.word	0x40011400
 8000b80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b84:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <HAL_GPIO_Init+0x304>)
 8000b86:	68da      	ldr	r2, [r3, #12]
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	4909      	ldr	r1, [pc, #36]	; (8000bb4 <HAL_GPIO_Init+0x304>)
 8000b8e:	4013      	ands	r3, r2
 8000b90:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b94:	3301      	adds	r3, #1
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	f47f ae8e 	bne.w	80008c4 <HAL_GPIO_Init+0x14>
  }
}
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	372c      	adds	r7, #44	; 0x2c
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	40010400 	.word	0x40010400

08000bb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d101      	bne.n	8000bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e26c      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f000 8087 	beq.w	8000ce6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bd8:	4b92      	ldr	r3, [pc, #584]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 030c 	and.w	r3, r3, #12
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	d00c      	beq.n	8000bfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000be4:	4b8f      	ldr	r3, [pc, #572]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 030c 	and.w	r3, r3, #12
 8000bec:	2b08      	cmp	r3, #8
 8000bee:	d112      	bne.n	8000c16 <HAL_RCC_OscConfig+0x5e>
 8000bf0:	4b8c      	ldr	r3, [pc, #560]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bfc:	d10b      	bne.n	8000c16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bfe:	4b89      	ldr	r3, [pc, #548]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d06c      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x12c>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d168      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e246      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c1e:	d106      	bne.n	8000c2e <HAL_RCC_OscConfig+0x76>
 8000c20:	4b80      	ldr	r3, [pc, #512]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a7f      	ldr	r2, [pc, #508]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	e02e      	b.n	8000c8c <HAL_RCC_OscConfig+0xd4>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d10c      	bne.n	8000c50 <HAL_RCC_OscConfig+0x98>
 8000c36:	4b7b      	ldr	r3, [pc, #492]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a7a      	ldr	r2, [pc, #488]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	4b78      	ldr	r3, [pc, #480]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a77      	ldr	r2, [pc, #476]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	e01d      	b.n	8000c8c <HAL_RCC_OscConfig+0xd4>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c58:	d10c      	bne.n	8000c74 <HAL_RCC_OscConfig+0xbc>
 8000c5a:	4b72      	ldr	r3, [pc, #456]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a71      	ldr	r2, [pc, #452]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	4b6f      	ldr	r3, [pc, #444]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a6e      	ldr	r2, [pc, #440]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	e00b      	b.n	8000c8c <HAL_RCC_OscConfig+0xd4>
 8000c74:	4b6b      	ldr	r3, [pc, #428]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a6a      	ldr	r2, [pc, #424]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b68      	ldr	r3, [pc, #416]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a67      	ldr	r2, [pc, #412]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d013      	beq.n	8000cbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c94:	f7ff fd22 	bl	80006dc <HAL_GetTick>
 8000c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c9a:	e008      	b.n	8000cae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c9c:	f7ff fd1e 	bl	80006dc <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b64      	cmp	r3, #100	; 0x64
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e1fa      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cae:	4b5d      	ldr	r3, [pc, #372]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f0      	beq.n	8000c9c <HAL_RCC_OscConfig+0xe4>
 8000cba:	e014      	b.n	8000ce6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cbc:	f7ff fd0e 	bl	80006dc <HAL_GetTick>
 8000cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cc2:	e008      	b.n	8000cd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cc4:	f7ff fd0a 	bl	80006dc <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2b64      	cmp	r3, #100	; 0x64
 8000cd0:	d901      	bls.n	8000cd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	e1e6      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cd6:	4b53      	ldr	r3, [pc, #332]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1f0      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x10c>
 8000ce2:	e000      	b.n	8000ce6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d063      	beq.n	8000dba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cf2:	4b4c      	ldr	r3, [pc, #304]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 030c 	and.w	r3, r3, #12
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d00b      	beq.n	8000d16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cfe:	4b49      	ldr	r3, [pc, #292]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 030c 	and.w	r3, r3, #12
 8000d06:	2b08      	cmp	r3, #8
 8000d08:	d11c      	bne.n	8000d44 <HAL_RCC_OscConfig+0x18c>
 8000d0a:	4b46      	ldr	r3, [pc, #280]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d116      	bne.n	8000d44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d16:	4b43      	ldr	r3, [pc, #268]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d005      	beq.n	8000d2e <HAL_RCC_OscConfig+0x176>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	691b      	ldr	r3, [r3, #16]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d001      	beq.n	8000d2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e1ba      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d2e:	4b3d      	ldr	r3, [pc, #244]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	4939      	ldr	r1, [pc, #228]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d42:	e03a      	b.n	8000dba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	691b      	ldr	r3, [r3, #16]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d020      	beq.n	8000d8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d4c:	4b36      	ldr	r3, [pc, #216]	; (8000e28 <HAL_RCC_OscConfig+0x270>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d52:	f7ff fcc3 	bl	80006dc <HAL_GetTick>
 8000d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d58:	e008      	b.n	8000d6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d5a:	f7ff fcbf 	bl	80006dc <HAL_GetTick>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d901      	bls.n	8000d6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e19b      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d6c:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d0f0      	beq.n	8000d5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d78:	4b2a      	ldr	r3, [pc, #168]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	695b      	ldr	r3, [r3, #20]
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	4927      	ldr	r1, [pc, #156]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	600b      	str	r3, [r1, #0]
 8000d8c:	e015      	b.n	8000dba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d8e:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <HAL_RCC_OscConfig+0x270>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d94:	f7ff fca2 	bl	80006dc <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d9a:	e008      	b.n	8000dae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d9c:	f7ff fc9e 	bl	80006dc <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e17a      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1f0      	bne.n	8000d9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0308 	and.w	r3, r3, #8
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d03a      	beq.n	8000e3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d019      	beq.n	8000e02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_RCC_OscConfig+0x274>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd4:	f7ff fc82 	bl	80006dc <HAL_GetTick>
 8000dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dda:	e008      	b.n	8000dee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ddc:	f7ff fc7e 	bl	80006dc <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d901      	bls.n	8000dee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e15a      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dee:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <HAL_RCC_OscConfig+0x26c>)
 8000df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d0f0      	beq.n	8000ddc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f000 fb08 	bl	8001410 <RCC_Delay>
 8000e00:	e01c      	b.n	8000e3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_RCC_OscConfig+0x274>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e08:	f7ff fc68 	bl	80006dc <HAL_GetTick>
 8000e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e0e:	e00f      	b.n	8000e30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e10:	f7ff fc64 	bl	80006dc <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d908      	bls.n	8000e30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e140      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000
 8000e28:	42420000 	.word	0x42420000
 8000e2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e30:	4b9e      	ldr	r3, [pc, #632]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d1e9      	bne.n	8000e10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	f000 80a6 	beq.w	8000f96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e4e:	4b97      	ldr	r3, [pc, #604]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d10d      	bne.n	8000e76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	4b94      	ldr	r3, [pc, #592]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	4a93      	ldr	r2, [pc, #588]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e64:	61d3      	str	r3, [r2, #28]
 8000e66:	4b91      	ldr	r3, [pc, #580]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e72:	2301      	movs	r3, #1
 8000e74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e76:	4b8e      	ldr	r3, [pc, #568]	; (80010b0 <HAL_RCC_OscConfig+0x4f8>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d118      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e82:	4b8b      	ldr	r3, [pc, #556]	; (80010b0 <HAL_RCC_OscConfig+0x4f8>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a8a      	ldr	r2, [pc, #552]	; (80010b0 <HAL_RCC_OscConfig+0x4f8>)
 8000e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e8e:	f7ff fc25 	bl	80006dc <HAL_GetTick>
 8000e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e94:	e008      	b.n	8000ea8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e96:	f7ff fc21 	bl	80006dc <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b64      	cmp	r3, #100	; 0x64
 8000ea2:	d901      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e0fd      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea8:	4b81      	ldr	r3, [pc, #516]	; (80010b0 <HAL_RCC_OscConfig+0x4f8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0f0      	beq.n	8000e96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d106      	bne.n	8000eca <HAL_RCC_OscConfig+0x312>
 8000ebc:	4b7b      	ldr	r3, [pc, #492]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
 8000ec0:	4a7a      	ldr	r2, [pc, #488]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	6213      	str	r3, [r2, #32]
 8000ec8:	e02d      	b.n	8000f26 <HAL_RCC_OscConfig+0x36e>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10c      	bne.n	8000eec <HAL_RCC_OscConfig+0x334>
 8000ed2:	4b76      	ldr	r3, [pc, #472]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000ed4:	6a1b      	ldr	r3, [r3, #32]
 8000ed6:	4a75      	ldr	r2, [pc, #468]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000ed8:	f023 0301 	bic.w	r3, r3, #1
 8000edc:	6213      	str	r3, [r2, #32]
 8000ede:	4b73      	ldr	r3, [pc, #460]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000ee0:	6a1b      	ldr	r3, [r3, #32]
 8000ee2:	4a72      	ldr	r2, [pc, #456]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000ee4:	f023 0304 	bic.w	r3, r3, #4
 8000ee8:	6213      	str	r3, [r2, #32]
 8000eea:	e01c      	b.n	8000f26 <HAL_RCC_OscConfig+0x36e>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	2b05      	cmp	r3, #5
 8000ef2:	d10c      	bne.n	8000f0e <HAL_RCC_OscConfig+0x356>
 8000ef4:	4b6d      	ldr	r3, [pc, #436]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	4a6c      	ldr	r2, [pc, #432]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000efa:	f043 0304 	orr.w	r3, r3, #4
 8000efe:	6213      	str	r3, [r2, #32]
 8000f00:	4b6a      	ldr	r3, [pc, #424]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	4a69      	ldr	r2, [pc, #420]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6213      	str	r3, [r2, #32]
 8000f0c:	e00b      	b.n	8000f26 <HAL_RCC_OscConfig+0x36e>
 8000f0e:	4b67      	ldr	r3, [pc, #412]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000f10:	6a1b      	ldr	r3, [r3, #32]
 8000f12:	4a66      	ldr	r2, [pc, #408]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000f14:	f023 0301 	bic.w	r3, r3, #1
 8000f18:	6213      	str	r3, [r2, #32]
 8000f1a:	4b64      	ldr	r3, [pc, #400]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000f1c:	6a1b      	ldr	r3, [r3, #32]
 8000f1e:	4a63      	ldr	r2, [pc, #396]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000f20:	f023 0304 	bic.w	r3, r3, #4
 8000f24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d015      	beq.n	8000f5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2e:	f7ff fbd5 	bl	80006dc <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f34:	e00a      	b.n	8000f4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f36:	f7ff fbd1 	bl	80006dc <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e0ab      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f4c:	4b57      	ldr	r3, [pc, #348]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000f4e:	6a1b      	ldr	r3, [r3, #32]
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d0ee      	beq.n	8000f36 <HAL_RCC_OscConfig+0x37e>
 8000f58:	e014      	b.n	8000f84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f5a:	f7ff fbbf 	bl	80006dc <HAL_GetTick>
 8000f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f60:	e00a      	b.n	8000f78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f62:	f7ff fbbb 	bl	80006dc <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d901      	bls.n	8000f78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e095      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f78:	4b4c      	ldr	r3, [pc, #304]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1ee      	bne.n	8000f62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f84:	7dfb      	ldrb	r3, [r7, #23]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d105      	bne.n	8000f96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f8a:	4b48      	ldr	r3, [pc, #288]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a47      	ldr	r2, [pc, #284]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 8081 	beq.w	80010a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fa0:	4b42      	ldr	r3, [pc, #264]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 030c 	and.w	r3, r3, #12
 8000fa8:	2b08      	cmp	r3, #8
 8000faa:	d061      	beq.n	8001070 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69db      	ldr	r3, [r3, #28]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d146      	bne.n	8001042 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fb4:	4b3f      	ldr	r3, [pc, #252]	; (80010b4 <HAL_RCC_OscConfig+0x4fc>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fba:	f7ff fb8f 	bl	80006dc <HAL_GetTick>
 8000fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc0:	e008      	b.n	8000fd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fc2:	f7ff fb8b 	bl	80006dc <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e067      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fd4:	4b35      	ldr	r3, [pc, #212]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f0      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe8:	d108      	bne.n	8000ffc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fea:	4b30      	ldr	r3, [pc, #192]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	492d      	ldr	r1, [pc, #180]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ffc:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a19      	ldr	r1, [r3, #32]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100c:	430b      	orrs	r3, r1
 800100e:	4927      	ldr	r1, [pc, #156]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8001010:	4313      	orrs	r3, r2
 8001012:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001014:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <HAL_RCC_OscConfig+0x4fc>)
 8001016:	2201      	movs	r2, #1
 8001018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101a:	f7ff fb5f 	bl	80006dc <HAL_GetTick>
 800101e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001022:	f7ff fb5b 	bl	80006dc <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e037      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001034:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0f0      	beq.n	8001022 <HAL_RCC_OscConfig+0x46a>
 8001040:	e02f      	b.n	80010a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <HAL_RCC_OscConfig+0x4fc>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001048:	f7ff fb48 	bl	80006dc <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001050:	f7ff fb44 	bl	80006dc <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b02      	cmp	r3, #2
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e020      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001062:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f0      	bne.n	8001050 <HAL_RCC_OscConfig+0x498>
 800106e:	e018      	b.n	80010a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d101      	bne.n	800107c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e013      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <HAL_RCC_OscConfig+0x4f4>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a1b      	ldr	r3, [r3, #32]
 800108c:	429a      	cmp	r2, r3
 800108e:	d106      	bne.n	800109e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800109a:	429a      	cmp	r2, r3
 800109c:	d001      	beq.n	80010a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40007000 	.word	0x40007000
 80010b4:	42420060 	.word	0x42420060

080010b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e0d0      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010cc:	4b6a      	ldr	r3, [pc, #424]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0307 	and.w	r3, r3, #7
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d910      	bls.n	80010fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010da:	4b67      	ldr	r3, [pc, #412]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f023 0207 	bic.w	r2, r3, #7
 80010e2:	4965      	ldr	r1, [pc, #404]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ea:	4b63      	ldr	r3, [pc, #396]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d001      	beq.n	80010fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e0b8      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d020      	beq.n	800114a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	2b00      	cmp	r3, #0
 8001112:	d005      	beq.n	8001120 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001114:	4b59      	ldr	r3, [pc, #356]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	4a58      	ldr	r2, [pc, #352]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800111e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0308 	and.w	r3, r3, #8
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800112c:	4b53      	ldr	r3, [pc, #332]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	4a52      	ldr	r2, [pc, #328]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001132:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001136:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001138:	4b50      	ldr	r3, [pc, #320]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	494d      	ldr	r1, [pc, #308]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001146:	4313      	orrs	r3, r2
 8001148:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d040      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d107      	bne.n	800116e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115e:	4b47      	ldr	r3, [pc, #284]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d115      	bne.n	8001196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e07f      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d107      	bne.n	8001186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001176:	4b41      	ldr	r3, [pc, #260]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d109      	bne.n	8001196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e073      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001186:	4b3d      	ldr	r3, [pc, #244]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e06b      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001196:	4b39      	ldr	r3, [pc, #228]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f023 0203 	bic.w	r2, r3, #3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	4936      	ldr	r1, [pc, #216]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 80011a4:	4313      	orrs	r3, r2
 80011a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011a8:	f7ff fa98 	bl	80006dc <HAL_GetTick>
 80011ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ae:	e00a      	b.n	80011c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b0:	f7ff fa94 	bl	80006dc <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80011be:	4293      	cmp	r3, r2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e053      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011c6:	4b2d      	ldr	r3, [pc, #180]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 020c 	and.w	r2, r3, #12
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d1eb      	bne.n	80011b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011d8:	4b27      	ldr	r3, [pc, #156]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d210      	bcs.n	8001208 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e6:	4b24      	ldr	r3, [pc, #144]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f023 0207 	bic.w	r2, r3, #7
 80011ee:	4922      	ldr	r1, [pc, #136]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	429a      	cmp	r2, r3
 8001202:	d001      	beq.n	8001208 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e032      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	d008      	beq.n	8001226 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001214:	4b19      	ldr	r3, [pc, #100]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	4916      	ldr	r1, [pc, #88]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	4313      	orrs	r3, r2
 8001224:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	2b00      	cmp	r3, #0
 8001230:	d009      	beq.n	8001246 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	490e      	ldr	r1, [pc, #56]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	4313      	orrs	r3, r2
 8001244:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001246:	f000 f821 	bl	800128c <HAL_RCC_GetSysClockFreq>
 800124a:	4602      	mov	r2, r0
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	091b      	lsrs	r3, r3, #4
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	490a      	ldr	r1, [pc, #40]	; (8001280 <HAL_RCC_ClockConfig+0x1c8>)
 8001258:	5ccb      	ldrb	r3, [r1, r3]
 800125a:	fa22 f303 	lsr.w	r3, r2, r3
 800125e:	4a09      	ldr	r2, [pc, #36]	; (8001284 <HAL_RCC_ClockConfig+0x1cc>)
 8001260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_RCC_ClockConfig+0x1d0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f8f8 	bl	800045c <HAL_InitTick>

  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40022000 	.word	0x40022000
 800127c:	40021000 	.word	0x40021000
 8001280:	080045e4 	.word	0x080045e4
 8001284:	20000000 	.word	0x20000000
 8001288:	20000004 	.word	0x20000004

0800128c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800128c:	b490      	push	{r4, r7}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001292:	4b2a      	ldr	r3, [pc, #168]	; (800133c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001294:	1d3c      	adds	r4, r7, #4
 8001296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800129c:	f240 2301 	movw	r3, #513	; 0x201
 80012a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012b6:	4b22      	ldr	r3, [pc, #136]	; (8001340 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	d002      	beq.n	80012cc <HAL_RCC_GetSysClockFreq+0x40>
 80012c6:	2b08      	cmp	r3, #8
 80012c8:	d003      	beq.n	80012d2 <HAL_RCC_GetSysClockFreq+0x46>
 80012ca:	e02d      	b.n	8001328 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012ce:	623b      	str	r3, [r7, #32]
      break;
 80012d0:	e02d      	b.n	800132e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	0c9b      	lsrs	r3, r3, #18
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012de:	4413      	add	r3, r2
 80012e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d013      	beq.n	8001318 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	0c5b      	lsrs	r3, r3, #17
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012fe:	4413      	add	r3, r2
 8001300:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001304:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <HAL_RCC_GetSysClockFreq+0xb8>)
 800130a:	fb02 f203 	mul.w	r2, r2, r3
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	fbb2 f3f3 	udiv	r3, r2, r3
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
 8001316:	e004      	b.n	8001322 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <HAL_RCC_GetSysClockFreq+0xbc>)
 800131c:	fb02 f303 	mul.w	r3, r2, r3
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	623b      	str	r3, [r7, #32]
      break;
 8001326:	e002      	b.n	800132e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_RCC_GetSysClockFreq+0xb8>)
 800132a:	623b      	str	r3, [r7, #32]
      break;
 800132c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800132e:	6a3b      	ldr	r3, [r7, #32]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3728      	adds	r7, #40	; 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bc90      	pop	{r4, r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	08004508 	.word	0x08004508
 8001340:	40021000 	.word	0x40021000
 8001344:	007a1200 	.word	0x007a1200
 8001348:	003d0900 	.word	0x003d0900

0800134c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001350:	4b02      	ldr	r3, [pc, #8]	; (800135c <HAL_RCC_GetHCLKFreq+0x10>)
 8001352:	681b      	ldr	r3, [r3, #0]
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	20000000 	.word	0x20000000

08001360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001364:	f7ff fff2 	bl	800134c <HAL_RCC_GetHCLKFreq>
 8001368:	4602      	mov	r2, r0
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	0a1b      	lsrs	r3, r3, #8
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	4903      	ldr	r1, [pc, #12]	; (8001384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001376:	5ccb      	ldrb	r3, [r1, r3]
 8001378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800137c:	4618      	mov	r0, r3
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40021000 	.word	0x40021000
 8001384:	080045f4 	.word	0x080045f4

08001388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800138c:	f7ff ffde 	bl	800134c <HAL_RCC_GetHCLKFreq>
 8001390:	4602      	mov	r2, r0
 8001392:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	0adb      	lsrs	r3, r3, #11
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	4903      	ldr	r1, [pc, #12]	; (80013ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800139e:	5ccb      	ldrb	r3, [r1, r3]
 80013a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40021000 	.word	0x40021000
 80013ac:	080045f4 	.word	0x080045f4

080013b0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	220f      	movs	r2, #15
 80013be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_RCC_GetClockConfig+0x58>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0203 	and.w	r2, r3, #3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <HAL_RCC_GetClockConfig+0x58>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_RCC_GetClockConfig+0x58>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <HAL_RCC_GetClockConfig+0x58>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	08db      	lsrs	r3, r3, #3
 80013ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_RCC_GetClockConfig+0x5c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0207 	and.w	r2, r3, #7
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	40021000 	.word	0x40021000
 800140c:	40022000 	.word	0x40022000

08001410 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <RCC_Delay+0x34>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <RCC_Delay+0x38>)
 800141e:	fba2 2303 	umull	r2, r3, r2, r3
 8001422:	0a5b      	lsrs	r3, r3, #9
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	fb02 f303 	mul.w	r3, r2, r3
 800142a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800142c:	bf00      	nop
  }
  while (Delay --);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1e5a      	subs	r2, r3, #1
 8001432:	60fa      	str	r2, [r7, #12]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1f9      	bne.n	800142c <RCC_Delay+0x1c>
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	20000000 	.word	0x20000000
 8001448:	10624dd3 	.word	0x10624dd3

0800144c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e041      	b.n	80014e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d106      	bne.n	8001478 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 f839 	bl	80014ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2202      	movs	r2, #2
 800147c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3304      	adds	r3, #4
 8001488:	4619      	mov	r1, r3
 800148a:	4610      	mov	r0, r2
 800148c:	f000 f9b4 	bl	80017f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b01      	cmp	r3, #1
 800150e:	d001      	beq.n	8001514 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e03a      	b.n	800158a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2202      	movs	r2, #2
 8001518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68da      	ldr	r2, [r3, #12]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0201 	orr.w	r2, r2, #1
 800152a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a18      	ldr	r2, [pc, #96]	; (8001594 <HAL_TIM_Base_Start_IT+0x98>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d00e      	beq.n	8001554 <HAL_TIM_Base_Start_IT+0x58>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800153e:	d009      	beq.n	8001554 <HAL_TIM_Base_Start_IT+0x58>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a14      	ldr	r2, [pc, #80]	; (8001598 <HAL_TIM_Base_Start_IT+0x9c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d004      	beq.n	8001554 <HAL_TIM_Base_Start_IT+0x58>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a13      	ldr	r2, [pc, #76]	; (800159c <HAL_TIM_Base_Start_IT+0xa0>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d111      	bne.n	8001578 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b06      	cmp	r3, #6
 8001564:	d010      	beq.n	8001588 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f042 0201 	orr.w	r2, r2, #1
 8001574:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001576:	e007      	b.n	8001588 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0201 	orr.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	40012c00 	.word	0x40012c00
 8001598:	40000400 	.word	0x40000400
 800159c:	40000800 	.word	0x40000800

080015a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d122      	bne.n	80015fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d11b      	bne.n	80015fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f06f 0202 	mvn.w	r2, #2
 80015cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f8ed 	bl	80017c2 <HAL_TIM_IC_CaptureCallback>
 80015e8:	e005      	b.n	80015f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 f8e0 	bl	80017b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 f8ef 	bl	80017d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	2b04      	cmp	r3, #4
 8001608:	d122      	bne.n	8001650 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	2b04      	cmp	r3, #4
 8001616:	d11b      	bne.n	8001650 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f06f 0204 	mvn.w	r2, #4
 8001620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2202      	movs	r2, #2
 8001626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f8c3 	bl	80017c2 <HAL_TIM_IC_CaptureCallback>
 800163c:	e005      	b.n	800164a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f8b6 	bl	80017b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 f8c5 	bl	80017d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b08      	cmp	r3, #8
 800165c:	d122      	bne.n	80016a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	f003 0308 	and.w	r3, r3, #8
 8001668:	2b08      	cmp	r3, #8
 800166a:	d11b      	bne.n	80016a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f06f 0208 	mvn.w	r2, #8
 8001674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2204      	movs	r2, #4
 800167a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f899 	bl	80017c2 <HAL_TIM_IC_CaptureCallback>
 8001690:	e005      	b.n	800169e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 f88c 	bl	80017b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 f89b 	bl	80017d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	f003 0310 	and.w	r3, r3, #16
 80016ae:	2b10      	cmp	r3, #16
 80016b0:	d122      	bne.n	80016f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	f003 0310 	and.w	r3, r3, #16
 80016bc:	2b10      	cmp	r3, #16
 80016be:	d11b      	bne.n	80016f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f06f 0210 	mvn.w	r2, #16
 80016c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2208      	movs	r2, #8
 80016ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f86f 	bl	80017c2 <HAL_TIM_IC_CaptureCallback>
 80016e4:	e005      	b.n	80016f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 f862 	bl	80017b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 f871 	bl	80017d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b01      	cmp	r3, #1
 8001704:	d10e      	bne.n	8001724 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b01      	cmp	r3, #1
 8001712:	d107      	bne.n	8001724 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f06f 0201 	mvn.w	r2, #1
 800171c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7fe fe4c 	bl	80003bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800172e:	2b80      	cmp	r3, #128	; 0x80
 8001730:	d10e      	bne.n	8001750 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173c:	2b80      	cmp	r3, #128	; 0x80
 800173e:	d107      	bne.n	8001750 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f8bf 	bl	80018ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800175a:	2b40      	cmp	r3, #64	; 0x40
 800175c:	d10e      	bne.n	800177c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001768:	2b40      	cmp	r3, #64	; 0x40
 800176a:	d107      	bne.n	800177c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f835 	bl	80017e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	f003 0320 	and.w	r3, r3, #32
 8001786:	2b20      	cmp	r3, #32
 8001788:	d10e      	bne.n	80017a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	f003 0320 	and.w	r3, r3, #32
 8001794:	2b20      	cmp	r3, #32
 8001796:	d107      	bne.n	80017a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f06f 0220 	mvn.w	r2, #32
 80017a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f88a 	bl	80018bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr

080017e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a29      	ldr	r2, [pc, #164]	; (80018b0 <TIM_Base_SetConfig+0xb8>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d00b      	beq.n	8001828 <TIM_Base_SetConfig+0x30>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001816:	d007      	beq.n	8001828 <TIM_Base_SetConfig+0x30>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a26      	ldr	r2, [pc, #152]	; (80018b4 <TIM_Base_SetConfig+0xbc>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d003      	beq.n	8001828 <TIM_Base_SetConfig+0x30>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a25      	ldr	r2, [pc, #148]	; (80018b8 <TIM_Base_SetConfig+0xc0>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d108      	bne.n	800183a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800182e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a1c      	ldr	r2, [pc, #112]	; (80018b0 <TIM_Base_SetConfig+0xb8>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d00b      	beq.n	800185a <TIM_Base_SetConfig+0x62>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001848:	d007      	beq.n	800185a <TIM_Base_SetConfig+0x62>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <TIM_Base_SetConfig+0xbc>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d003      	beq.n	800185a <TIM_Base_SetConfig+0x62>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a18      	ldr	r2, [pc, #96]	; (80018b8 <TIM_Base_SetConfig+0xc0>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d108      	bne.n	800186c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	4313      	orrs	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	4313      	orrs	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a07      	ldr	r2, [pc, #28]	; (80018b0 <TIM_Base_SetConfig+0xb8>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d103      	bne.n	80018a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	615a      	str	r2, [r3, #20]
}
 80018a6:	bf00      	nop
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	40012c00 	.word	0x40012c00
 80018b4:	40000400 	.word	0x40000400
 80018b8:	40000800 	.word	0x40000800

080018bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr

080018ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e03f      	b.n	8001972 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d106      	bne.n	800190c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7fe fe4e 	bl	80005a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2224      	movs	r2, #36	; 0x24
 8001910:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001922:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 f829 	bl	800197c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	691a      	ldr	r2, [r3, #16]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001938:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	695a      	ldr	r2, [r3, #20]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001948:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001958:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2220      	movs	r2, #32
 8001964:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2220      	movs	r2, #32
 800196c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80019b6:	f023 030c 	bic.w	r3, r3, #12
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6812      	ldr	r2, [r2, #0]
 80019be:	68b9      	ldr	r1, [r7, #8]
 80019c0:	430b      	orrs	r3, r1
 80019c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699a      	ldr	r2, [r3, #24]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a2c      	ldr	r2, [pc, #176]	; (8001a90 <UART_SetConfig+0x114>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d103      	bne.n	80019ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80019e4:	f7ff fcd0 	bl	8001388 <HAL_RCC_GetPCLK2Freq>
 80019e8:	60f8      	str	r0, [r7, #12]
 80019ea:	e002      	b.n	80019f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80019ec:	f7ff fcb8 	bl	8001360 <HAL_RCC_GetPCLK1Freq>
 80019f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	009a      	lsls	r2, r3, #2
 80019fc:	441a      	add	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a08:	4a22      	ldr	r2, [pc, #136]	; (8001a94 <UART_SetConfig+0x118>)
 8001a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0e:	095b      	lsrs	r3, r3, #5
 8001a10:	0119      	lsls	r1, r3, #4
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	009a      	lsls	r2, r3, #2
 8001a1c:	441a      	add	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a28:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <UART_SetConfig+0x118>)
 8001a2a:	fba3 0302 	umull	r0, r3, r3, r2
 8001a2e:	095b      	lsrs	r3, r3, #5
 8001a30:	2064      	movs	r0, #100	; 0x64
 8001a32:	fb00 f303 	mul.w	r3, r0, r3
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	3332      	adds	r3, #50	; 0x32
 8001a3c:	4a15      	ldr	r2, [pc, #84]	; (8001a94 <UART_SetConfig+0x118>)
 8001a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a48:	4419      	add	r1, r3
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	009a      	lsls	r2, r3, #2
 8001a54:	441a      	add	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <UART_SetConfig+0x118>)
 8001a62:	fba3 0302 	umull	r0, r3, r3, r2
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	2064      	movs	r0, #100	; 0x64
 8001a6a:	fb00 f303 	mul.w	r3, r0, r3
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	011b      	lsls	r3, r3, #4
 8001a72:	3332      	adds	r3, #50	; 0x32
 8001a74:	4a07      	ldr	r2, [pc, #28]	; (8001a94 <UART_SetConfig+0x118>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	095b      	lsrs	r3, r3, #5
 8001a7c:	f003 020f 	and.w	r2, r3, #15
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	440a      	add	r2, r1
 8001a86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001a88:	bf00      	nop
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40013800 	.word	0x40013800
 8001a94:	51eb851f 	.word	0x51eb851f

08001a98 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001a9c:	f000 fa1e 	bl	8001edc <vTaskStartScheduler>
  
  return osOK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f103 0208 	add.w	r2, r3, #8
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f04f 32ff 	mov.w	r2, #4294967295
 8001abe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f103 0208 	add.w	r2, r3, #8
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f103 0208 	add.w	r2, r3, #8
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	601a      	str	r2, [r3, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b42:	b480      	push	{r7}
 8001b44:	b085      	sub	sp, #20
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6892      	ldr	r2, [r2, #8]
 8001b58:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6852      	ldr	r2, [r2, #4]
 8001b62:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d103      	bne.n	8001b76 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	1e5a      	subs	r2, r3, #1
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08e      	sub	sp, #56	; 0x38
 8001b98:	af04      	add	r7, sp, #16
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d109      	bne.n	8001bbc <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bac:	f383 8811 	msr	BASEPRI, r3
 8001bb0:	f3bf 8f6f 	isb	sy
 8001bb4:	f3bf 8f4f 	dsb	sy
 8001bb8:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001bba:	bf00      	nop
		configASSERT( pxTaskBuffer != NULL );
 8001bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d109      	bne.n	8001bd6 <xTaskCreateStatic+0x42>
	__asm volatile
 8001bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bc6:	f383 8811 	msr	BASEPRI, r3
 8001bca:	f3bf 8f6f 	isb	sy
 8001bce:	f3bf 8f4f 	dsb	sy
 8001bd2:	61fb      	str	r3, [r7, #28]
}
 8001bd4:	bf00      	nop
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001bd6:	2354      	movs	r3, #84	; 0x54
 8001bd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2b54      	cmp	r3, #84	; 0x54
 8001bde:	d009      	beq.n	8001bf4 <xTaskCreateStatic+0x60>
	__asm volatile
 8001be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be4:	f383 8811 	msr	BASEPRI, r3
 8001be8:	f3bf 8f6f 	isb	sy
 8001bec:	f3bf 8f4f 	dsb	sy
 8001bf0:	61bb      	str	r3, [r7, #24]
}
 8001bf2:	bf00      	nop
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d01e      	beq.n	8001c38 <xTaskCreateStatic+0xa4>
 8001bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d01b      	beq.n	8001c38 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001c12:	2300      	movs	r3, #0
 8001c14:	9303      	str	r3, [sp, #12]
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	9302      	str	r3, [sp, #8]
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 f850 	bl	8001cd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001c30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c32:	f000 f8cb 	bl	8001dcc <prvAddNewTaskToReadyList>
 8001c36:	e001      	b.n	8001c3c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001c3c:	697b      	ldr	r3, [r7, #20]
	}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3728      	adds	r7, #40	; 0x28
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b08c      	sub	sp, #48	; 0x30
 8001c4a:	af04      	add	r7, sp, #16
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	4613      	mov	r3, r2
 8001c54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c56:	88fb      	ldrh	r3, [r7, #6]
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 fe54 	bl	8002908 <pvPortMalloc>
 8001c60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00e      	beq.n	8001c86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001c68:	2054      	movs	r0, #84	; 0x54
 8001c6a:	f000 fe4d 	bl	8002908 <pvPortMalloc>
 8001c6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c7c:	e005      	b.n	8001c8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001c7e:	6978      	ldr	r0, [r7, #20]
 8001c80:	f000 ff04 	bl	8002a8c <vPortFree>
 8001c84:	e001      	b.n	8001c8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d017      	beq.n	8001cc0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001c98:	88fa      	ldrh	r2, [r7, #6]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	9303      	str	r3, [sp, #12]
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	9302      	str	r3, [sp, #8]
 8001ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca4:	9301      	str	r3, [sp, #4]
 8001ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 f80e 	bl	8001cd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001cb4:	69f8      	ldr	r0, [r7, #28]
 8001cb6:	f000 f889 	bl	8001dcc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	e002      	b.n	8001cc6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001cc6:	69bb      	ldr	r3, [r7, #24]
	}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3720      	adds	r7, #32
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	f023 0307 	bic.w	r3, r3, #7
 8001cf6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d009      	beq.n	8001d16 <prvInitialiseNewTask+0x46>
	__asm volatile
 8001d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d06:	f383 8811 	msr	BASEPRI, r3
 8001d0a:	f3bf 8f6f 	isb	sy
 8001d0e:	f3bf 8f4f 	dsb	sy
 8001d12:	617b      	str	r3, [r7, #20]
}
 8001d14:	bf00      	nop
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
 8001d1a:	e012      	b.n	8001d42 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	4413      	add	r3, r2
 8001d22:	7819      	ldrb	r1, [r3, #0]
 8001d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	4413      	add	r3, r2
 8001d2a:	3334      	adds	r3, #52	; 0x34
 8001d2c:	460a      	mov	r2, r1
 8001d2e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	4413      	add	r3, r2
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d006      	beq.n	8001d4a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	2b0f      	cmp	r3, #15
 8001d46:	d9e9      	bls.n	8001d1c <prvInitialiseNewTask+0x4c>
 8001d48:	e000      	b.n	8001d4c <prvInitialiseNewTask+0x7c>
		{
			break;
 8001d4a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d901      	bls.n	8001d5e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d62:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d68:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d72:	3304      	adds	r3, #4
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff feb5 	bl	8001ae4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7c:	3318      	adds	r3, #24
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff feb0 	bl	8001ae4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d88:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8c:	f1c3 0205 	rsb	r2, r3, #5
 8001d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d92:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d98:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	68f9      	ldr	r1, [r7, #12]
 8001dac:	69b8      	ldr	r0, [r7, #24]
 8001dae:	f000 fbb5 	bl	800251c <pxPortInitialiseStack>
 8001db2:	4602      	mov	r2, r0
 8001db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d002      	beq.n	8001dc4 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dc2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001dc4:	bf00      	nop
 8001dc6:	3720      	adds	r7, #32
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001dcc:	b5b0      	push	{r4, r5, r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af02      	add	r7, sp, #8
 8001dd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001dd4:	f000 fc90 	bl	80026f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001dd8:	4b39      	ldr	r3, [pc, #228]	; (8001ec0 <prvAddNewTaskToReadyList+0xf4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	4a38      	ldr	r2, [pc, #224]	; (8001ec0 <prvAddNewTaskToReadyList+0xf4>)
 8001de0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001de2:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <prvAddNewTaskToReadyList+0xf8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d109      	bne.n	8001dfe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001dea:	4a36      	ldr	r2, [pc, #216]	; (8001ec4 <prvAddNewTaskToReadyList+0xf8>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001df0:	4b33      	ldr	r3, [pc, #204]	; (8001ec0 <prvAddNewTaskToReadyList+0xf4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d110      	bne.n	8001e1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001df8:	f000 fad0 	bl	800239c <prvInitialiseTaskLists>
 8001dfc:	e00d      	b.n	8001e1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001dfe:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <prvAddNewTaskToReadyList+0xfc>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d109      	bne.n	8001e1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001e06:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <prvAddNewTaskToReadyList+0xf8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d802      	bhi.n	8001e1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001e14:	4a2b      	ldr	r2, [pc, #172]	; (8001ec4 <prvAddNewTaskToReadyList+0xf8>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001e1a:	4b2c      	ldr	r3, [pc, #176]	; (8001ecc <prvAddNewTaskToReadyList+0x100>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	4a2a      	ldr	r2, [pc, #168]	; (8001ecc <prvAddNewTaskToReadyList+0x100>)
 8001e22:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d016      	beq.n	8001e58 <prvAddNewTaskToReadyList+0x8c>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f002 f90b 	bl	8004048 <SEGGER_SYSVIEW_OnTaskCreate>
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	461d      	mov	r5, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	461c      	mov	r4, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	1ae3      	subs	r3, r4, r3
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	462b      	mov	r3, r5
 8001e54:	f000 ffd4 	bl	8002e00 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f002 f97c 	bl	8004158 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	2201      	movs	r2, #1
 8001e66:	409a      	lsls	r2, r3
 8001e68:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <prvAddNewTaskToReadyList+0x104>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	4a18      	ldr	r2, [pc, #96]	; (8001ed0 <prvAddNewTaskToReadyList+0x104>)
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e76:	4613      	mov	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4a15      	ldr	r2, [pc, #84]	; (8001ed4 <prvAddNewTaskToReadyList+0x108>)
 8001e80:	441a      	add	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3304      	adds	r3, #4
 8001e86:	4619      	mov	r1, r3
 8001e88:	4610      	mov	r0, r2
 8001e8a:	f7ff fe37 	bl	8001afc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001e8e:	f000 fc61 	bl	8002754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001e92:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <prvAddNewTaskToReadyList+0xfc>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00e      	beq.n	8001eb8 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <prvAddNewTaskToReadyList+0xf8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d207      	bcs.n	8001eb8 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <prvAddNewTaskToReadyList+0x10c>)
 8001eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	f3bf 8f4f 	dsb	sy
 8001eb4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8001ec0:	20000364 	.word	0x20000364
 8001ec4:	2000028c 	.word	0x2000028c
 8001ec8:	20000370 	.word	0x20000370
 8001ecc:	20000380 	.word	0x20000380
 8001ed0:	2000036c 	.word	0x2000036c
 8001ed4:	20000290 	.word	0x20000290
 8001ed8:	e000ed04 	.word	0xe000ed04

08001edc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	; 0x28
 8001ee0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001eea:	463a      	mov	r2, r7
 8001eec:	1d39      	adds	r1, r7, #4
 8001eee:	f107 0308 	add.w	r3, r7, #8
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe f92c 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001ef8:	6839      	ldr	r1, [r7, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	9202      	str	r2, [sp, #8]
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	2300      	movs	r3, #0
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	2300      	movs	r3, #0
 8001f08:	460a      	mov	r2, r1
 8001f0a:	491e      	ldr	r1, [pc, #120]	; (8001f84 <vTaskStartScheduler+0xa8>)
 8001f0c:	481e      	ldr	r0, [pc, #120]	; (8001f88 <vTaskStartScheduler+0xac>)
 8001f0e:	f7ff fe41 	bl	8001b94 <xTaskCreateStatic>
 8001f12:	4603      	mov	r3, r0
 8001f14:	4a1d      	ldr	r2, [pc, #116]	; (8001f8c <vTaskStartScheduler+0xb0>)
 8001f16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001f18:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <vTaskStartScheduler+0xb0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001f20:	2301      	movs	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	e001      	b.n	8001f2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d116      	bne.n	8001f5e <vTaskStartScheduler+0x82>
	__asm volatile
 8001f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f34:	f383 8811 	msr	BASEPRI, r3
 8001f38:	f3bf 8f6f 	isb	sy
 8001f3c:	f3bf 8f4f 	dsb	sy
 8001f40:	613b      	str	r3, [r7, #16]
}
 8001f42:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <vTaskStartScheduler+0xb4>)
 8001f46:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <vTaskStartScheduler+0xb8>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001f52:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <vTaskStartScheduler+0xbc>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001f58:	f000 fb5e 	bl	8002618 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001f5c:	e00d      	b.n	8001f7a <vTaskStartScheduler+0x9e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f64:	d109      	bne.n	8001f7a <vTaskStartScheduler+0x9e>
	__asm volatile
 8001f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f6a:	f383 8811 	msr	BASEPRI, r3
 8001f6e:	f3bf 8f6f 	isb	sy
 8001f72:	f3bf 8f4f 	dsb	sy
 8001f76:	60fb      	str	r3, [r7, #12]
}
 8001f78:	bf00      	nop
}
 8001f7a:	bf00      	nop
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	08004518 	.word	0x08004518
 8001f88:	0800236d 	.word	0x0800236d
 8001f8c:	20000388 	.word	0x20000388
 8001f90:	20000384 	.word	0x20000384
 8001f94:	20000370 	.word	0x20000370
 8001f98:	20000368 	.word	0x20000368

08001f9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <vTaskSuspendAll+0x18>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	4a03      	ldr	r2, [pc, #12]	; (8001fb4 <vTaskSuspendAll+0x18>)
 8001fa8:	6013      	str	r3, [r2, #0]
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	2000038c 	.word	0x2000038c

08001fb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001fc6:	4b43      	ldr	r3, [pc, #268]	; (80020d4 <xTaskResumeAll+0x11c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d109      	bne.n	8001fe2 <xTaskResumeAll+0x2a>
	__asm volatile
 8001fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd2:	f383 8811 	msr	BASEPRI, r3
 8001fd6:	f3bf 8f6f 	isb	sy
 8001fda:	f3bf 8f4f 	dsb	sy
 8001fde:	603b      	str	r3, [r7, #0]
}
 8001fe0:	bf00      	nop
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001fe2:	f000 fb89 	bl	80026f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001fe6:	4b3b      	ldr	r3, [pc, #236]	; (80020d4 <xTaskResumeAll+0x11c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	4a39      	ldr	r2, [pc, #228]	; (80020d4 <xTaskResumeAll+0x11c>)
 8001fee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ff0:	4b38      	ldr	r3, [pc, #224]	; (80020d4 <xTaskResumeAll+0x11c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d165      	bne.n	80020c4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001ff8:	4b37      	ldr	r3, [pc, #220]	; (80020d8 <xTaskResumeAll+0x120>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d061      	beq.n	80020c4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002000:	e032      	b.n	8002068 <xTaskResumeAll+0xb0>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002002:	4b36      	ldr	r3, [pc, #216]	; (80020dc <xTaskResumeAll+0x124>)
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	3318      	adds	r3, #24
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fd97 	bl	8001b42 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	3304      	adds	r3, #4
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fd92 	bl	8001b42 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4618      	mov	r0, r3
 8002022:	f002 f899 	bl	8004158 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202a:	2201      	movs	r2, #1
 800202c:	409a      	lsls	r2, r3
 800202e:	4b2c      	ldr	r3, [pc, #176]	; (80020e0 <xTaskResumeAll+0x128>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	4a2a      	ldr	r2, [pc, #168]	; (80020e0 <xTaskResumeAll+0x128>)
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4a27      	ldr	r2, [pc, #156]	; (80020e4 <xTaskResumeAll+0x12c>)
 8002046:	441a      	add	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	3304      	adds	r3, #4
 800204c:	4619      	mov	r1, r3
 800204e:	4610      	mov	r0, r2
 8002050:	f7ff fd54 	bl	8001afc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002058:	4b23      	ldr	r3, [pc, #140]	; (80020e8 <xTaskResumeAll+0x130>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205e:	429a      	cmp	r2, r3
 8002060:	d302      	bcc.n	8002068 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8002062:	4b22      	ldr	r3, [pc, #136]	; (80020ec <xTaskResumeAll+0x134>)
 8002064:	2201      	movs	r2, #1
 8002066:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002068:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <xTaskResumeAll+0x124>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1c8      	bne.n	8002002 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002076:	f000 fa2d 	bl	80024d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800207a:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <xTaskResumeAll+0x138>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d010      	beq.n	80020a8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002086:	f000 f849 	bl	800211c <xTaskIncrementTick>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d002      	beq.n	8002096 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <xTaskResumeAll+0x134>)
 8002092:	2201      	movs	r2, #1
 8002094:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3b01      	subs	r3, #1
 800209a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f1      	bne.n	8002086 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80020a2:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <xTaskResumeAll+0x138>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80020a8:	4b10      	ldr	r3, [pc, #64]	; (80020ec <xTaskResumeAll+0x134>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d009      	beq.n	80020c4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80020b0:	2301      	movs	r3, #1
 80020b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80020b4:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <xTaskResumeAll+0x13c>)
 80020b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	f3bf 8f4f 	dsb	sy
 80020c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80020c4:	f000 fb46 	bl	8002754 <vPortExitCritical>

	return xAlreadyYielded;
 80020c8:	68bb      	ldr	r3, [r7, #8]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	2000038c 	.word	0x2000038c
 80020d8:	20000364 	.word	0x20000364
 80020dc:	20000324 	.word	0x20000324
 80020e0:	2000036c 	.word	0x2000036c
 80020e4:	20000290 	.word	0x20000290
 80020e8:	2000028c 	.word	0x2000028c
 80020ec:	20000378 	.word	0x20000378
 80020f0:	20000374 	.word	0x20000374
 80020f4:	e000ed04 	.word	0xe000ed04

080020f8 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80020fe:	f000 fbc7 	bl	8002890 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002102:	2300      	movs	r3, #0
 8002104:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8002106:	4b04      	ldr	r3, [pc, #16]	; (8002118 <xTaskGetTickCountFromISR+0x20>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800210c:	683b      	ldr	r3, [r7, #0]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000368 	.word	0x20000368

0800211c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002126:	4b52      	ldr	r3, [pc, #328]	; (8002270 <xTaskIncrementTick+0x154>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	f040 8090 	bne.w	8002250 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002130:	4b50      	ldr	r3, [pc, #320]	; (8002274 <xTaskIncrementTick+0x158>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	3301      	adds	r3, #1
 8002136:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002138:	4a4e      	ldr	r2, [pc, #312]	; (8002274 <xTaskIncrementTick+0x158>)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d11f      	bne.n	8002184 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002144:	4b4c      	ldr	r3, [pc, #304]	; (8002278 <xTaskIncrementTick+0x15c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d009      	beq.n	8002162 <xTaskIncrementTick+0x46>
	__asm volatile
 800214e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002152:	f383 8811 	msr	BASEPRI, r3
 8002156:	f3bf 8f6f 	isb	sy
 800215a:	f3bf 8f4f 	dsb	sy
 800215e:	603b      	str	r3, [r7, #0]
}
 8002160:	bf00      	nop
 8002162:	4b45      	ldr	r3, [pc, #276]	; (8002278 <xTaskIncrementTick+0x15c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	4b44      	ldr	r3, [pc, #272]	; (800227c <xTaskIncrementTick+0x160>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a42      	ldr	r2, [pc, #264]	; (8002278 <xTaskIncrementTick+0x15c>)
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	4a42      	ldr	r2, [pc, #264]	; (800227c <xTaskIncrementTick+0x160>)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b42      	ldr	r3, [pc, #264]	; (8002280 <xTaskIncrementTick+0x164>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	3301      	adds	r3, #1
 800217c:	4a40      	ldr	r2, [pc, #256]	; (8002280 <xTaskIncrementTick+0x164>)
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	f000 f9a8 	bl	80024d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002184:	4b3f      	ldr	r3, [pc, #252]	; (8002284 <xTaskIncrementTick+0x168>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	429a      	cmp	r2, r3
 800218c:	d351      	bcc.n	8002232 <xTaskIncrementTick+0x116>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800218e:	4b3a      	ldr	r3, [pc, #232]	; (8002278 <xTaskIncrementTick+0x15c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <xTaskIncrementTick+0x80>
 8002198:	2301      	movs	r3, #1
 800219a:	e000      	b.n	800219e <xTaskIncrementTick+0x82>
 800219c:	2300      	movs	r3, #0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d004      	beq.n	80021ac <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021a2:	4b38      	ldr	r3, [pc, #224]	; (8002284 <xTaskIncrementTick+0x168>)
 80021a4:	f04f 32ff 	mov.w	r2, #4294967295
 80021a8:	601a      	str	r2, [r3, #0]
					break;
 80021aa:	e042      	b.n	8002232 <xTaskIncrementTick+0x116>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80021ac:	4b32      	ldr	r3, [pc, #200]	; (8002278 <xTaskIncrementTick+0x15c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d203      	bcs.n	80021cc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80021c4:	4a2f      	ldr	r2, [pc, #188]	; (8002284 <xTaskIncrementTick+0x168>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6013      	str	r3, [r2, #0]
						break;
 80021ca:	e032      	b.n	8002232 <xTaskIncrementTick+0x116>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	3304      	adds	r3, #4
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fcb6 	bl	8001b42 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d004      	beq.n	80021e8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	3318      	adds	r3, #24
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fcad 	bl	8001b42 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f001 ffb4 	bl	8004158 <SEGGER_SYSVIEW_OnTaskStartReady>
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	2201      	movs	r2, #1
 80021f6:	409a      	lsls	r2, r3
 80021f8:	4b23      	ldr	r3, [pc, #140]	; (8002288 <xTaskIncrementTick+0x16c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	4a22      	ldr	r2, [pc, #136]	; (8002288 <xTaskIncrementTick+0x16c>)
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4a1f      	ldr	r2, [pc, #124]	; (800228c <xTaskIncrementTick+0x170>)
 8002210:	441a      	add	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	3304      	adds	r3, #4
 8002216:	4619      	mov	r1, r3
 8002218:	4610      	mov	r0, r2
 800221a:	f7ff fc6f 	bl	8001afc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002222:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <xTaskIncrementTick+0x174>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	429a      	cmp	r2, r3
 800222a:	d3b0      	bcc.n	800218e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800222c:	2301      	movs	r3, #1
 800222e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002230:	e7ad      	b.n	800218e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002232:	4b17      	ldr	r3, [pc, #92]	; (8002290 <xTaskIncrementTick+0x174>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002238:	4914      	ldr	r1, [pc, #80]	; (800228c <xTaskIncrementTick+0x170>)
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d907      	bls.n	800225a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800224a:	2301      	movs	r3, #1
 800224c:	617b      	str	r3, [r7, #20]
 800224e:	e004      	b.n	800225a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002250:	4b10      	ldr	r3, [pc, #64]	; (8002294 <xTaskIncrementTick+0x178>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	4a0f      	ldr	r2, [pc, #60]	; (8002294 <xTaskIncrementTick+0x178>)
 8002258:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800225a:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <xTaskIncrementTick+0x17c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <xTaskIncrementTick+0x14a>
		{
			xSwitchRequired = pdTRUE;
 8002262:	2301      	movs	r3, #1
 8002264:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002266:	697b      	ldr	r3, [r7, #20]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	2000038c 	.word	0x2000038c
 8002274:	20000368 	.word	0x20000368
 8002278:	2000031c 	.word	0x2000031c
 800227c:	20000320 	.word	0x20000320
 8002280:	2000037c 	.word	0x2000037c
 8002284:	20000384 	.word	0x20000384
 8002288:	2000036c 	.word	0x2000036c
 800228c:	20000290 	.word	0x20000290
 8002290:	2000028c 	.word	0x2000028c
 8002294:	20000374 	.word	0x20000374
 8002298:	20000378 	.word	0x20000378

0800229c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80022a2:	4b2c      	ldr	r3, [pc, #176]	; (8002354 <vTaskSwitchContext+0xb8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80022aa:	4b2b      	ldr	r3, [pc, #172]	; (8002358 <vTaskSwitchContext+0xbc>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80022b0:	e04c      	b.n	800234c <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 80022b2:	4b29      	ldr	r3, [pc, #164]	; (8002358 <vTaskSwitchContext+0xbc>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80022b8:	4b28      	ldr	r3, [pc, #160]	; (800235c <vTaskSwitchContext+0xc0>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	fab3 f383 	clz	r3, r3
 80022c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80022c6:	7afb      	ldrb	r3, [r7, #11]
 80022c8:	f1c3 031f 	rsb	r3, r3, #31
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	4924      	ldr	r1, [pc, #144]	; (8002360 <vTaskSwitchContext+0xc4>)
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d109      	bne.n	80022f6 <vTaskSwitchContext+0x5a>
	__asm volatile
 80022e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e6:	f383 8811 	msr	BASEPRI, r3
 80022ea:	f3bf 8f6f 	isb	sy
 80022ee:	f3bf 8f4f 	dsb	sy
 80022f2:	607b      	str	r3, [r7, #4]
}
 80022f4:	bf00      	nop
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4a17      	ldr	r2, [pc, #92]	; (8002360 <vTaskSwitchContext+0xc4>)
 8002302:	4413      	add	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	3308      	adds	r3, #8
 8002318:	429a      	cmp	r2, r3
 800231a:	d104      	bne.n	8002326 <vTaskSwitchContext+0x8a>
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4a0d      	ldr	r2, [pc, #52]	; (8002364 <vTaskSwitchContext+0xc8>)
 800232e:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <vTaskSwitchContext+0xc8>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <vTaskSwitchContext+0xcc>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d102      	bne.n	8002342 <vTaskSwitchContext+0xa6>
 800233c:	f001 fe68 	bl	8004010 <SEGGER_SYSVIEW_OnIdle>
}
 8002340:	e004      	b.n	800234c <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 8002342:	4b08      	ldr	r3, [pc, #32]	; (8002364 <vTaskSwitchContext+0xc8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f001 fec2 	bl	80040d0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800234c:	bf00      	nop
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	2000038c 	.word	0x2000038c
 8002358:	20000378 	.word	0x20000378
 800235c:	2000036c 	.word	0x2000036c
 8002360:	20000290 	.word	0x20000290
 8002364:	2000028c 	.word	0x2000028c
 8002368:	20000388 	.word	0x20000388

0800236c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002374:	f000 f852 	bl	800241c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <prvIdleTask+0x28>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d9f9      	bls.n	8002374 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <prvIdleTask+0x2c>)
 8002382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	f3bf 8f4f 	dsb	sy
 800238c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002390:	e7f0      	b.n	8002374 <prvIdleTask+0x8>
 8002392:	bf00      	nop
 8002394:	20000290 	.word	0x20000290
 8002398:	e000ed04 	.word	0xe000ed04

0800239c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80023a2:	2300      	movs	r3, #0
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	e00c      	b.n	80023c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4a12      	ldr	r2, [pc, #72]	; (80023fc <prvInitialiseTaskLists+0x60>)
 80023b4:	4413      	add	r3, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fb75 	bl	8001aa6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3301      	adds	r3, #1
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d9ef      	bls.n	80023a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80023c8:	480d      	ldr	r0, [pc, #52]	; (8002400 <prvInitialiseTaskLists+0x64>)
 80023ca:	f7ff fb6c 	bl	8001aa6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80023ce:	480d      	ldr	r0, [pc, #52]	; (8002404 <prvInitialiseTaskLists+0x68>)
 80023d0:	f7ff fb69 	bl	8001aa6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80023d4:	480c      	ldr	r0, [pc, #48]	; (8002408 <prvInitialiseTaskLists+0x6c>)
 80023d6:	f7ff fb66 	bl	8001aa6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80023da:	480c      	ldr	r0, [pc, #48]	; (800240c <prvInitialiseTaskLists+0x70>)
 80023dc:	f7ff fb63 	bl	8001aa6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80023e0:	480b      	ldr	r0, [pc, #44]	; (8002410 <prvInitialiseTaskLists+0x74>)
 80023e2:	f7ff fb60 	bl	8001aa6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80023e6:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <prvInitialiseTaskLists+0x78>)
 80023e8:	4a05      	ldr	r2, [pc, #20]	; (8002400 <prvInitialiseTaskLists+0x64>)
 80023ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80023ec:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <prvInitialiseTaskLists+0x7c>)
 80023ee:	4a05      	ldr	r2, [pc, #20]	; (8002404 <prvInitialiseTaskLists+0x68>)
 80023f0:	601a      	str	r2, [r3, #0]
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000290 	.word	0x20000290
 8002400:	200002f4 	.word	0x200002f4
 8002404:	20000308 	.word	0x20000308
 8002408:	20000324 	.word	0x20000324
 800240c:	20000338 	.word	0x20000338
 8002410:	20000350 	.word	0x20000350
 8002414:	2000031c 	.word	0x2000031c
 8002418:	20000320 	.word	0x20000320

0800241c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002422:	e019      	b.n	8002458 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002424:	f000 f968 	bl	80026f8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002428:	4b10      	ldr	r3, [pc, #64]	; (800246c <prvCheckTasksWaitingTermination+0x50>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3304      	adds	r3, #4
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fb84 	bl	8001b42 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800243a:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <prvCheckTasksWaitingTermination+0x54>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	3b01      	subs	r3, #1
 8002440:	4a0b      	ldr	r2, [pc, #44]	; (8002470 <prvCheckTasksWaitingTermination+0x54>)
 8002442:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <prvCheckTasksWaitingTermination+0x58>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	3b01      	subs	r3, #1
 800244a:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <prvCheckTasksWaitingTermination+0x58>)
 800244c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800244e:	f000 f981 	bl	8002754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f810 	bl	8002478 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <prvCheckTasksWaitingTermination+0x58>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1e1      	bne.n	8002424 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002460:	bf00      	nop
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000338 	.word	0x20000338
 8002470:	20000364 	.word	0x20000364
 8002474:	2000034c 	.word	0x2000034c

08002478 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002486:	2b00      	cmp	r3, #0
 8002488:	d108      	bne.n	800249c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	4618      	mov	r0, r3
 8002490:	f000 fafc 	bl	8002a8c <vPortFree>
				vPortFree( pxTCB );
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 faf9 	bl	8002a8c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800249a:	e017      	b.n	80024cc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d103      	bne.n	80024ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 faf0 	bl	8002a8c <vPortFree>
	}
 80024ac:	e00e      	b.n	80024cc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d009      	beq.n	80024cc <prvDeleteTCB+0x54>
	__asm volatile
 80024b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024bc:	f383 8811 	msr	BASEPRI, r3
 80024c0:	f3bf 8f6f 	isb	sy
 80024c4:	f3bf 8f4f 	dsb	sy
 80024c8:	60fb      	str	r3, [r7, #12]
}
 80024ca:	bf00      	nop
	}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024da:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <prvResetNextTaskUnblockTime+0x40>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <prvResetNextTaskUnblockTime+0x14>
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <prvResetNextTaskUnblockTime+0x16>
 80024e8:	2300      	movs	r3, #0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d004      	beq.n	80024f8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80024ee:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <prvResetNextTaskUnblockTime+0x44>)
 80024f0:	f04f 32ff 	mov.w	r2, #4294967295
 80024f4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80024f6:	e008      	b.n	800250a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <prvResetNextTaskUnblockTime+0x40>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4a04      	ldr	r2, [pc, #16]	; (8002518 <prvResetNextTaskUnblockTime+0x44>)
 8002508:	6013      	str	r3, [r2, #0]
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr
 8002514:	2000031c 	.word	0x2000031c
 8002518:	20000384 	.word	0x20000384

0800251c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	3b04      	subs	r3, #4
 800252c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002534:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	3b04      	subs	r3, #4
 800253a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f023 0201 	bic.w	r2, r3, #1
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	3b04      	subs	r3, #4
 800254a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800254c:	4a08      	ldr	r2, [pc, #32]	; (8002570 <pxPortInitialiseStack+0x54>)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	3b14      	subs	r3, #20
 8002556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	3b20      	subs	r3, #32
 8002562:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002564:	68fb      	ldr	r3, [r7, #12]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr
 8002570:	08002575 	.word	0x08002575

08002574 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <prvTaskExitError+0x50>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002586:	d009      	beq.n	800259c <prvTaskExitError+0x28>
	__asm volatile
 8002588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800258c:	f383 8811 	msr	BASEPRI, r3
 8002590:	f3bf 8f6f 	isb	sy
 8002594:	f3bf 8f4f 	dsb	sy
 8002598:	60fb      	str	r3, [r7, #12]
}
 800259a:	bf00      	nop
	__asm volatile
 800259c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a0:	f383 8811 	msr	BASEPRI, r3
 80025a4:	f3bf 8f6f 	isb	sy
 80025a8:	f3bf 8f4f 	dsb	sy
 80025ac:	60bb      	str	r3, [r7, #8]
}
 80025ae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80025b0:	bf00      	nop
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0fc      	beq.n	80025b2 <prvTaskExitError+0x3e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	2000000c 	.word	0x2000000c
	...

080025d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80025d0:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <pxCurrentTCBConst2>)
 80025d2:	6819      	ldr	r1, [r3, #0]
 80025d4:	6808      	ldr	r0, [r1, #0]
 80025d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80025da:	f380 8809 	msr	PSP, r0
 80025de:	f3bf 8f6f 	isb	sy
 80025e2:	f04f 0000 	mov.w	r0, #0
 80025e6:	f380 8811 	msr	BASEPRI, r0
 80025ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80025ee:	4770      	bx	lr

080025f0 <pxCurrentTCBConst2>:
 80025f0:	2000028c 	.word	0x2000028c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80025f4:	bf00      	nop
 80025f6:	bf00      	nop

080025f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80025f8:	4806      	ldr	r0, [pc, #24]	; (8002614 <prvPortStartFirstTask+0x1c>)
 80025fa:	6800      	ldr	r0, [r0, #0]
 80025fc:	6800      	ldr	r0, [r0, #0]
 80025fe:	f380 8808 	msr	MSP, r0
 8002602:	b662      	cpsie	i
 8002604:	b661      	cpsie	f
 8002606:	f3bf 8f4f 	dsb	sy
 800260a:	f3bf 8f6f 	isb	sy
 800260e:	df00      	svc	0
 8002610:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002612:	bf00      	nop
 8002614:	e000ed08 	.word	0xe000ed08

08002618 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800261e:	4b31      	ldr	r3, [pc, #196]	; (80026e4 <xPortStartScheduler+0xcc>)
 8002620:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	22ff      	movs	r2, #255	; 0xff
 800262e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	b2db      	uxtb	r3, r3
 800263c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <xPortStartScheduler+0xd0>)
 8002644:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002646:	4b29      	ldr	r3, [pc, #164]	; (80026ec <xPortStartScheduler+0xd4>)
 8002648:	2207      	movs	r2, #7
 800264a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800264c:	e009      	b.n	8002662 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800264e:	4b27      	ldr	r3, [pc, #156]	; (80026ec <xPortStartScheduler+0xd4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	3b01      	subs	r3, #1
 8002654:	4a25      	ldr	r2, [pc, #148]	; (80026ec <xPortStartScheduler+0xd4>)
 8002656:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002658:	78fb      	ldrb	r3, [r7, #3]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	b2db      	uxtb	r3, r3
 8002660:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002662:	78fb      	ldrb	r3, [r7, #3]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266a:	2b80      	cmp	r3, #128	; 0x80
 800266c:	d0ef      	beq.n	800264e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800266e:	4b1f      	ldr	r3, [pc, #124]	; (80026ec <xPortStartScheduler+0xd4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f1c3 0307 	rsb	r3, r3, #7
 8002676:	2b04      	cmp	r3, #4
 8002678:	d009      	beq.n	800268e <xPortStartScheduler+0x76>
	__asm volatile
 800267a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267e:	f383 8811 	msr	BASEPRI, r3
 8002682:	f3bf 8f6f 	isb	sy
 8002686:	f3bf 8f4f 	dsb	sy
 800268a:	60bb      	str	r3, [r7, #8]
}
 800268c:	bf00      	nop
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800268e:	4b17      	ldr	r3, [pc, #92]	; (80026ec <xPortStartScheduler+0xd4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	4a15      	ldr	r2, [pc, #84]	; (80026ec <xPortStartScheduler+0xd4>)
 8002696:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002698:	4b14      	ldr	r3, [pc, #80]	; (80026ec <xPortStartScheduler+0xd4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026a0:	4a12      	ldr	r2, [pc, #72]	; (80026ec <xPortStartScheduler+0xd4>)
 80026a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80026ac:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <xPortStartScheduler+0xd8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0f      	ldr	r2, [pc, #60]	; (80026f0 <xPortStartScheduler+0xd8>)
 80026b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80026b8:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <xPortStartScheduler+0xd8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0c      	ldr	r2, [pc, #48]	; (80026f0 <xPortStartScheduler+0xd8>)
 80026be:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80026c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80026c4:	f000 f8c2 	bl	800284c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80026c8:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <xPortStartScheduler+0xdc>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80026ce:	f7ff ff93 	bl	80025f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80026d2:	f7ff fde3 	bl	800229c <vTaskSwitchContext>
	prvTaskExitError();
 80026d6:	f7ff ff4d 	bl	8002574 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	e000e400 	.word	0xe000e400
 80026e8:	20000390 	.word	0x20000390
 80026ec:	20000394 	.word	0x20000394
 80026f0:	e000ed20 	.word	0xe000ed20
 80026f4:	2000000c 	.word	0x2000000c

080026f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
	__asm volatile
 80026fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002702:	f383 8811 	msr	BASEPRI, r3
 8002706:	f3bf 8f6f 	isb	sy
 800270a:	f3bf 8f4f 	dsb	sy
 800270e:	607b      	str	r3, [r7, #4]
}
 8002710:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <vPortEnterCritical+0x54>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	3301      	adds	r3, #1
 8002718:	4a0c      	ldr	r2, [pc, #48]	; (800274c <vPortEnterCritical+0x54>)
 800271a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <vPortEnterCritical+0x54>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d10e      	bne.n	8002742 <vPortEnterCritical+0x4a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002724:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <vPortEnterCritical+0x58>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <vPortEnterCritical+0x4a>
	__asm volatile
 800272e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002732:	f383 8811 	msr	BASEPRI, r3
 8002736:	f3bf 8f6f 	isb	sy
 800273a:	f3bf 8f4f 	dsb	sy
 800273e:	603b      	str	r3, [r7, #0]
}
 8002740:	bf00      	nop
	}
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	2000000c 	.word	0x2000000c
 8002750:	e000ed04 	.word	0xe000ed04

08002754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800275a:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <vPortExitCritical+0x4c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d109      	bne.n	8002776 <vPortExitCritical+0x22>
	__asm volatile
 8002762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002766:	f383 8811 	msr	BASEPRI, r3
 800276a:	f3bf 8f6f 	isb	sy
 800276e:	f3bf 8f4f 	dsb	sy
 8002772:	607b      	str	r3, [r7, #4]
}
 8002774:	bf00      	nop
	uxCriticalNesting--;
 8002776:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <vPortExitCritical+0x4c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3b01      	subs	r3, #1
 800277c:	4a08      	ldr	r2, [pc, #32]	; (80027a0 <vPortExitCritical+0x4c>)
 800277e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002780:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <vPortExitCritical+0x4c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d105      	bne.n	8002794 <vPortExitCritical+0x40>
 8002788:	2300      	movs	r3, #0
 800278a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002792:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	2000000c 	.word	0x2000000c
	...

080027b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80027b0:	f3ef 8009 	mrs	r0, PSP
 80027b4:	f3bf 8f6f 	isb	sy
 80027b8:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <pxCurrentTCBConst>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80027c0:	6010      	str	r0, [r2, #0]
 80027c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80027c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80027ca:	f380 8811 	msr	BASEPRI, r0
 80027ce:	f7ff fd65 	bl	800229c <vTaskSwitchContext>
 80027d2:	f04f 0000 	mov.w	r0, #0
 80027d6:	f380 8811 	msr	BASEPRI, r0
 80027da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80027de:	6819      	ldr	r1, [r3, #0]
 80027e0:	6808      	ldr	r0, [r1, #0]
 80027e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80027e6:	f380 8809 	msr	PSP, r0
 80027ea:	f3bf 8f6f 	isb	sy
 80027ee:	4770      	bx	lr

080027f0 <pxCurrentTCBConst>:
 80027f0:	2000028c 	.word	0x2000028c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop

080027f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
	__asm volatile
 80027fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002802:	f383 8811 	msr	BASEPRI, r3
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	f3bf 8f4f 	dsb	sy
 800280e:	607b      	str	r3, [r7, #4]
}
 8002810:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8002812:	f001 fb83 	bl	8003f1c <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002816:	f7ff fc81 	bl	800211c <xTaskIncrementTick>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d006      	beq.n	800282e <SysTick_Handler+0x36>
		{
      traceISR_EXIT_TO_SCHEDULER();
 8002820:	f001 fbda 	bl	8003fd8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002824:	4b08      	ldr	r3, [pc, #32]	; (8002848 <SysTick_Handler+0x50>)
 8002826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	e001      	b.n	8002832 <SysTick_Handler+0x3a>
		}
		else
		{
			traceISR_EXIT();
 800282e:	f001 fbb7 	bl	8003fa0 <SEGGER_SYSVIEW_RecordExitISR>
 8002832:	2300      	movs	r3, #0
 8002834:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	f383 8811 	msr	BASEPRI, r3
}
 800283c:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	e000ed04 	.word	0xe000ed04

0800284c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002850:	4b0a      	ldr	r3, [pc, #40]	; (800287c <vPortSetupTimerInterrupt+0x30>)
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002856:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <vPortSetupTimerInterrupt+0x34>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800285c:	4b09      	ldr	r3, [pc, #36]	; (8002884 <vPortSetupTimerInterrupt+0x38>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a09      	ldr	r2, [pc, #36]	; (8002888 <vPortSetupTimerInterrupt+0x3c>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	099b      	lsrs	r3, r3, #6
 8002868:	4a08      	ldr	r2, [pc, #32]	; (800288c <vPortSetupTimerInterrupt+0x40>)
 800286a:	3b01      	subs	r3, #1
 800286c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800286e:	4b03      	ldr	r3, [pc, #12]	; (800287c <vPortSetupTimerInterrupt+0x30>)
 8002870:	2207      	movs	r2, #7
 8002872:	601a      	str	r2, [r3, #0]
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	e000e010 	.word	0xe000e010
 8002880:	e000e018 	.word	0xe000e018
 8002884:	20000000 	.word	0x20000000
 8002888:	10624dd3 	.word	0x10624dd3
 800288c:	e000e014 	.word	0xe000e014

08002890 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002896:	f3ef 8305 	mrs	r3, IPSR
 800289a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2b0f      	cmp	r3, #15
 80028a0:	d913      	bls.n	80028ca <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80028a2:	4a15      	ldr	r2, [pc, #84]	; (80028f8 <vPortValidateInterruptPriority+0x68>)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4413      	add	r3, r2
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80028ac:	4b13      	ldr	r3, [pc, #76]	; (80028fc <vPortValidateInterruptPriority+0x6c>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	7afa      	ldrb	r2, [r7, #11]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d209      	bcs.n	80028ca <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80028b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ba:	f383 8811 	msr	BASEPRI, r3
 80028be:	f3bf 8f6f 	isb	sy
 80028c2:	f3bf 8f4f 	dsb	sy
 80028c6:	607b      	str	r3, [r7, #4]
}
 80028c8:	bf00      	nop
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80028ca:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <vPortValidateInterruptPriority+0x70>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028d2:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <vPortValidateInterruptPriority+0x74>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d909      	bls.n	80028ee <vPortValidateInterruptPriority+0x5e>
	__asm volatile
 80028da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028de:	f383 8811 	msr	BASEPRI, r3
 80028e2:	f3bf 8f6f 	isb	sy
 80028e6:	f3bf 8f4f 	dsb	sy
 80028ea:	603b      	str	r3, [r7, #0]
}
 80028ec:	bf00      	nop
	}
 80028ee:	bf00      	nop
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	e000e3f0 	.word	0xe000e3f0
 80028fc:	20000390 	.word	0x20000390
 8002900:	e000ed0c 	.word	0xe000ed0c
 8002904:	20000394 	.word	0x20000394

08002908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08a      	sub	sp, #40	; 0x28
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002910:	2300      	movs	r3, #0
 8002912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002914:	f7ff fb42 	bl	8001f9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002918:	4b57      	ldr	r3, [pc, #348]	; (8002a78 <pvPortMalloc+0x170>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002920:	f000 f90c 	bl	8002b3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002924:	4b55      	ldr	r3, [pc, #340]	; (8002a7c <pvPortMalloc+0x174>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4013      	ands	r3, r2
 800292c:	2b00      	cmp	r3, #0
 800292e:	f040 808c 	bne.w	8002a4a <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d01c      	beq.n	8002972 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002938:	2208      	movs	r2, #8
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	2b00      	cmp	r3, #0
 8002948:	d013      	beq.n	8002972 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f023 0307 	bic.w	r3, r3, #7
 8002950:	3308      	adds	r3, #8
 8002952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	2b00      	cmp	r3, #0
 800295c:	d009      	beq.n	8002972 <pvPortMalloc+0x6a>
	__asm volatile
 800295e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002962:	f383 8811 	msr	BASEPRI, r3
 8002966:	f3bf 8f6f 	isb	sy
 800296a:	f3bf 8f4f 	dsb	sy
 800296e:	617b      	str	r3, [r7, #20]
}
 8002970:	bf00      	nop
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d068      	beq.n	8002a4a <pvPortMalloc+0x142>
 8002978:	4b41      	ldr	r3, [pc, #260]	; (8002a80 <pvPortMalloc+0x178>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	429a      	cmp	r2, r3
 8002980:	d863      	bhi.n	8002a4a <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002982:	4b40      	ldr	r3, [pc, #256]	; (8002a84 <pvPortMalloc+0x17c>)
 8002984:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002986:	4b3f      	ldr	r3, [pc, #252]	; (8002a84 <pvPortMalloc+0x17c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800298c:	e004      	b.n	8002998 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d903      	bls.n	80029aa <pvPortMalloc+0xa2>
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f1      	bne.n	800298e <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80029aa:	4b33      	ldr	r3, [pc, #204]	; (8002a78 <pvPortMalloc+0x170>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d04a      	beq.n	8002a4a <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2208      	movs	r2, #8
 80029ba:	4413      	add	r3, r2
 80029bc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	1ad2      	subs	r2, r2, r3
 80029ce:	2308      	movs	r3, #8
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d91e      	bls.n	8002a14 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80029d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4413      	add	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d009      	beq.n	80029fc <pvPortMalloc+0xf4>
	__asm volatile
 80029e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ec:	f383 8811 	msr	BASEPRI, r3
 80029f0:	f3bf 8f6f 	isb	sy
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	613b      	str	r3, [r7, #16]
}
 80029fa:	bf00      	nop

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	1ad2      	subs	r2, r2, r3
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002a0e:	69b8      	ldr	r0, [r7, #24]
 8002a10:	f000 f8f6 	bl	8002c00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a14:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <pvPortMalloc+0x178>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	4a18      	ldr	r2, [pc, #96]	; (8002a80 <pvPortMalloc+0x178>)
 8002a20:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a22:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <pvPortMalloc+0x178>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <pvPortMalloc+0x180>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d203      	bcs.n	8002a36 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002a2e:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <pvPortMalloc+0x178>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a15      	ldr	r2, [pc, #84]	; (8002a88 <pvPortMalloc+0x180>)
 8002a34:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <pvPortMalloc+0x174>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002a4a:	f7ff fab5 	bl	8001fb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d009      	beq.n	8002a6c <pvPortMalloc+0x164>
	__asm volatile
 8002a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5c:	f383 8811 	msr	BASEPRI, r3
 8002a60:	f3bf 8f6f 	isb	sy
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	60fb      	str	r3, [r7, #12]
}
 8002a6a:	bf00      	nop
	return pvReturn;
 8002a6c:	69fb      	ldr	r3, [r7, #28]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3728      	adds	r7, #40	; 0x28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20000fa0 	.word	0x20000fa0
 8002a7c:	20000fac 	.word	0x20000fac
 8002a80:	20000fa4 	.word	0x20000fa4
 8002a84:	20000f98 	.word	0x20000f98
 8002a88:	20000fa8 	.word	0x20000fa8

08002a8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d046      	beq.n	8002b2c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002a9e:	2308      	movs	r3, #8
 8002aa0:	425b      	negs	r3, r3
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	4b20      	ldr	r3, [pc, #128]	; (8002b34 <vPortFree+0xa8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <vPortFree+0x42>
	__asm volatile
 8002aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002abe:	f383 8811 	msr	BASEPRI, r3
 8002ac2:	f3bf 8f6f 	isb	sy
 8002ac6:	f3bf 8f4f 	dsb	sy
 8002aca:	60fb      	str	r3, [r7, #12]
}
 8002acc:	bf00      	nop
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <vPortFree+0x5e>
	__asm volatile
 8002ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ada:	f383 8811 	msr	BASEPRI, r3
 8002ade:	f3bf 8f6f 	isb	sy
 8002ae2:	f3bf 8f4f 	dsb	sy
 8002ae6:	60bb      	str	r3, [r7, #8]
}
 8002ae8:	bf00      	nop

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <vPortFree+0xa8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d019      	beq.n	8002b2c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d115      	bne.n	8002b2c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <vPortFree+0xa8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002b10:	f7ff fa44 	bl	8001f9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <vPortFree+0xac>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	4a06      	ldr	r2, [pc, #24]	; (8002b38 <vPortFree+0xac>)
 8002b20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b22:	6938      	ldr	r0, [r7, #16]
 8002b24:	f000 f86c 	bl	8002c00 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002b28:	f7ff fa46 	bl	8001fb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002b2c:	bf00      	nop
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20000fac 	.word	0x20000fac
 8002b38:	20000fa4 	.word	0x20000fa4

08002b3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002b42:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002b48:	4b27      	ldr	r3, [pc, #156]	; (8002be8 <prvHeapInit+0xac>)
 8002b4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00c      	beq.n	8002b70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	3307      	adds	r3, #7
 8002b5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f023 0307 	bic.w	r3, r3, #7
 8002b62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	4a1f      	ldr	r2, [pc, #124]	; (8002be8 <prvHeapInit+0xac>)
 8002b6c:	4413      	add	r3, r2
 8002b6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002b74:	4a1d      	ldr	r2, [pc, #116]	; (8002bec <prvHeapInit+0xb0>)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002b7a:	4b1c      	ldr	r3, [pc, #112]	; (8002bec <prvHeapInit+0xb0>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	4413      	add	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002b88:	2208      	movs	r2, #8
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f023 0307 	bic.w	r3, r3, #7
 8002b96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4a15      	ldr	r2, [pc, #84]	; (8002bf0 <prvHeapInit+0xb4>)
 8002b9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002b9e:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <prvHeapInit+0xb4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002ba6:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <prvHeapInit+0xb4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	1ad2      	subs	r2, r2, r3
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <prvHeapInit+0xb4>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4a0a      	ldr	r2, [pc, #40]	; (8002bf4 <prvHeapInit+0xb8>)
 8002bca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	4a09      	ldr	r2, [pc, #36]	; (8002bf8 <prvHeapInit+0xbc>)
 8002bd2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002bd4:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <prvHeapInit+0xc0>)
 8002bd6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002bda:	601a      	str	r2, [r3, #0]
}
 8002bdc:	bf00      	nop
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	20000398 	.word	0x20000398
 8002bec:	20000f98 	.word	0x20000f98
 8002bf0:	20000fa0 	.word	0x20000fa0
 8002bf4:	20000fa8 	.word	0x20000fa8
 8002bf8:	20000fa4 	.word	0x20000fa4
 8002bfc:	20000fac 	.word	0x20000fac

08002c00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002c08:	4b27      	ldr	r3, [pc, #156]	; (8002ca8 <prvInsertBlockIntoFreeList+0xa8>)
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	e002      	b.n	8002c14 <prvInsertBlockIntoFreeList+0x14>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d8f7      	bhi.n	8002c0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	4413      	add	r3, r2
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d108      	bne.n	8002c42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	441a      	add	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	441a      	add	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d118      	bne.n	8002c88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4b14      	ldr	r3, [pc, #80]	; (8002cac <prvInsertBlockIntoFreeList+0xac>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d00d      	beq.n	8002c7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	441a      	add	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	e008      	b.n	8002c90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <prvInsertBlockIntoFreeList+0xac>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	e003      	b.n	8002c90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d002      	beq.n	8002c9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c9e:	bf00      	nop
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr
 8002ca8:	20000f98 	.word	0x20000f98
 8002cac:	20000fa0 	.word	0x20000fa0

08002cb0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002cb4:	4803      	ldr	r0, [pc, #12]	; (8002cc4 <_cbSendSystemDesc+0x14>)
 8002cb6:	f001 f8db 	bl	8003e70 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002cba:	4803      	ldr	r0, [pc, #12]	; (8002cc8 <_cbSendSystemDesc+0x18>)
 8002cbc:	f001 f8d8 	bl	8003e70 <SEGGER_SYSVIEW_SendSysDesc>
}
 8002cc0:	bf00      	nop
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	08004520 	.word	0x08004520
 8002cc8:	0800455c 	.word	0x0800455c

08002ccc <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002cd0:	4b06      	ldr	r3, [pc, #24]	; (8002cec <SEGGER_SYSVIEW_Conf+0x20>)
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <SEGGER_SYSVIEW_Conf+0x20>)
 8002cd6:	6819      	ldr	r1, [r3, #0]
 8002cd8:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <SEGGER_SYSVIEW_Conf+0x24>)
 8002cda:	4a06      	ldr	r2, [pc, #24]	; (8002cf4 <SEGGER_SYSVIEW_Conf+0x28>)
 8002cdc:	f000 fd52 	bl	8003784 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002ce0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002ce4:	f000 fd8c 	bl	8003800 <SEGGER_SYSVIEW_SetRAMBase>
}
 8002ce8:	bf00      	nop
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20000000 	.word	0x20000000
 8002cf0:	08002cb1 	.word	0x08002cb1
 8002cf4:	080045fc 	.word	0x080045fc

08002cf8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002cfe:	2300      	movs	r3, #0
 8002d00:	607b      	str	r3, [r7, #4]
 8002d02:	e033      	b.n	8002d6c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002d04:	491e      	ldr	r1, [pc, #120]	; (8002d80 <_cbSendTaskList+0x88>)
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	491a      	ldr	r1, [pc, #104]	; (8002d80 <_cbSendTaskList+0x88>)
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	3304      	adds	r3, #4
 8002d24:	6819      	ldr	r1, [r3, #0]
 8002d26:	4c16      	ldr	r4, [pc, #88]	; (8002d80 <_cbSendTaskList+0x88>)
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4423      	add	r3, r4
 8002d34:	3308      	adds	r3, #8
 8002d36:	681c      	ldr	r4, [r3, #0]
 8002d38:	4d11      	ldr	r5, [pc, #68]	; (8002d80 <_cbSendTaskList+0x88>)
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	442b      	add	r3, r5
 8002d46:	330c      	adds	r3, #12
 8002d48:	681d      	ldr	r5, [r3, #0]
 8002d4a:	4e0d      	ldr	r6, [pc, #52]	; (8002d80 <_cbSendTaskList+0x88>)
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4433      	add	r3, r6
 8002d58:	3310      	adds	r3, #16
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	462b      	mov	r3, r5
 8002d60:	4622      	mov	r2, r4
 8002d62:	f000 f8b5 	bl	8002ed0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	607b      	str	r3, [r7, #4]
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <_cbSendTaskList+0x8c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d3c6      	bcc.n	8002d04 <_cbSendTaskList+0xc>
  }
}
 8002d76:	bf00      	nop
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d80:	20000fb0 	.word	0x20000fb0
 8002d84:	20001050 	.word	0x20001050

08002d88 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002d88:	b5b0      	push	{r4, r5, r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002d8e:	f7ff f9b3 	bl	80020f8 <xTaskGetTickCountFromISR>
 8002d92:	4603      	mov	r3, r0
 8002d94:	461a      	mov	r2, r3
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002d9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	f04f 0400 	mov.w	r4, #0
 8002daa:	f04f 0500 	mov.w	r5, #0
 8002dae:	015d      	lsls	r5, r3, #5
 8002db0:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002db4:	0154      	lsls	r4, r2, #5
 8002db6:	4622      	mov	r2, r4
 8002db8:	462b      	mov	r3, r5
 8002dba:	1a12      	subs	r2, r2, r0
 8002dbc:	eb63 0301 	sbc.w	r3, r3, r1
 8002dc0:	f04f 0400 	mov.w	r4, #0
 8002dc4:	f04f 0500 	mov.w	r5, #0
 8002dc8:	009d      	lsls	r5, r3, #2
 8002dca:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8002dce:	0094      	lsls	r4, r2, #2
 8002dd0:	4622      	mov	r2, r4
 8002dd2:	462b      	mov	r3, r5
 8002dd4:	1812      	adds	r2, r2, r0
 8002dd6:	eb41 0303 	adc.w	r3, r1, r3
 8002dda:	f04f 0000 	mov.w	r0, #0
 8002dde:	f04f 0100 	mov.w	r1, #0
 8002de2:	00d9      	lsls	r1, r3, #3
 8002de4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002de8:	00d0      	lsls	r0, r2, #3
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8002df2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002df6:	4610      	mov	r0, r2
 8002df8:	4619      	mov	r1, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bdb0      	pop	{r4, r5, r7, pc}

08002e00 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002e0e:	2205      	movs	r2, #5
 8002e10:	492b      	ldr	r1, [pc, #172]	; (8002ec0 <SYSVIEW_AddTask+0xc0>)
 8002e12:	68b8      	ldr	r0, [r7, #8]
 8002e14:	f001 fb40 	bl	8004498 <memcmp>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d04b      	beq.n	8002eb6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002e1e:	4b29      	ldr	r3, [pc, #164]	; (8002ec4 <SYSVIEW_AddTask+0xc4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b07      	cmp	r3, #7
 8002e24:	d903      	bls.n	8002e2e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002e26:	4828      	ldr	r0, [pc, #160]	; (8002ec8 <SYSVIEW_AddTask+0xc8>)
 8002e28:	f001 fab6 	bl	8004398 <SEGGER_SYSVIEW_Warn>
    return;
 8002e2c:	e044      	b.n	8002eb8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002e2e:	4b25      	ldr	r3, [pc, #148]	; (8002ec4 <SYSVIEW_AddTask+0xc4>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	4926      	ldr	r1, [pc, #152]	; (8002ecc <SYSVIEW_AddTask+0xcc>)
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002e42:	4b20      	ldr	r3, [pc, #128]	; (8002ec4 <SYSVIEW_AddTask+0xc4>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	4921      	ldr	r1, [pc, #132]	; (8002ecc <SYSVIEW_AddTask+0xcc>)
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	3304      	adds	r3, #4
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002e58:	4b1a      	ldr	r3, [pc, #104]	; (8002ec4 <SYSVIEW_AddTask+0xc4>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	491b      	ldr	r1, [pc, #108]	; (8002ecc <SYSVIEW_AddTask+0xcc>)
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	3308      	adds	r3, #8
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002e6e:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <SYSVIEW_AddTask+0xc4>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	4916      	ldr	r1, [pc, #88]	; (8002ecc <SYSVIEW_AddTask+0xcc>)
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	330c      	adds	r3, #12
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002e84:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <SYSVIEW_AddTask+0xc4>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	4910      	ldr	r1, [pc, #64]	; (8002ecc <SYSVIEW_AddTask+0xcc>)
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	3310      	adds	r3, #16
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <SYSVIEW_AddTask+0xc4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	4a08      	ldr	r2, [pc, #32]	; (8002ec4 <SYSVIEW_AddTask+0xc4>)
 8002ea2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f80e 	bl	8002ed0 <SYSVIEW_SendTaskInfo>
 8002eb4:	e000      	b.n	8002eb8 <SYSVIEW_AddTask+0xb8>
    return;
 8002eb6:	bf00      	nop

}
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	0800456c 	.word	0x0800456c
 8002ec4:	20001050 	.word	0x20001050
 8002ec8:	08004574 	.word	0x08004574
 8002ecc:	20000fb0 	.word	0x20000fb0

08002ed0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	; 0x28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002ede:	f107 0314 	add.w	r3, r7, #20
 8002ee2:	2214      	movs	r2, #20
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f001 faf2 	bl	80044d0 <memset>
  TaskInfo.TaskID     = TaskID;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002f00:	f107 0314 	add.w	r3, r7, #20
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 feb9 	bl	8003c7c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002f0a:	bf00      	nop
 8002f0c:	3728      	adds	r7, #40	; 0x28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8002f1a:	4b21      	ldr	r3, [pc, #132]	; (8002fa0 <_DoInit+0x8c>)
 8002f1c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2203      	movs	r2, #3
 8002f22:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2203      	movs	r2, #3
 8002f28:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a1d      	ldr	r2, [pc, #116]	; (8002fa4 <_DoInit+0x90>)
 8002f2e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a1d      	ldr	r2, [pc, #116]	; (8002fa8 <_DoInit+0x94>)
 8002f34:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f3c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a14      	ldr	r2, [pc, #80]	; (8002fa4 <_DoInit+0x90>)
 8002f54:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a14      	ldr	r2, [pc, #80]	; (8002fac <_DoInit+0x98>)
 8002f5a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2210      	movs	r2, #16
 8002f60:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3307      	adds	r3, #7
 8002f78:	4a0d      	ldr	r2, [pc, #52]	; (8002fb0 <_DoInit+0x9c>)
 8002f7a:	6810      	ldr	r0, [r2, #0]
 8002f7c:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a0c      	ldr	r2, [pc, #48]	; (8002fb4 <_DoInit+0xa0>)
 8002f82:	6810      	ldr	r0, [r2, #0]
 8002f84:	6018      	str	r0, [r3, #0]
 8002f86:	8891      	ldrh	r1, [r2, #4]
 8002f88:	7992      	ldrb	r2, [r2, #6]
 8002f8a:	8099      	strh	r1, [r3, #4]
 8002f8c:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2220      	movs	r2, #32
 8002f92:	719a      	strb	r2, [r3, #6]
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	2000360c 	.word	0x2000360c
 8002fa4:	080045c4 	.word	0x080045c4
 8002fa8:	20001054 	.word	0x20001054
 8002fac:	20001454 	.word	0x20001454
 8002fb0:	080045d0 	.word	0x080045d0
 8002fb4:	080045d4 	.word	0x080045d4

08002fb8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	; 0x28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8002fc4:	4b3c      	ldr	r3, [pc, #240]	; (80030b8 <SEGGER_RTT_ReadNoLock+0x100>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <SEGGER_RTT_ReadNoLock+0x18>
 8002fcc:	f7ff ffa2 	bl	8002f14 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	4413      	add	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	3360      	adds	r3, #96	; 0x60
 8002fdc:	4a36      	ldr	r2, [pc, #216]	; (80030b8 <SEGGER_RTT_ReadNoLock+0x100>)
 8002fde:	4413      	add	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002ff6:	6a3a      	ldr	r2, [r7, #32]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d92a      	bls.n	8003054 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4293      	cmp	r3, r2
 800300e:	bf28      	it	cs
 8003010:	4613      	movcs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	4413      	add	r3, r2
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4619      	mov	r1, r3
 8003020:	69f8      	ldr	r0, [r7, #28]
 8003022:	f001 fa47 	bl	80044b4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4413      	add	r3, r2
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800302e:	69fa      	ldr	r2, [r7, #28]
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4413      	add	r3, r2
 8003034:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800303e:	6a3a      	ldr	r2, [r7, #32]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4413      	add	r3, r2
 8003044:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	6a3a      	ldr	r2, [r7, #32]
 800304c:	429a      	cmp	r2, r3
 800304e:	d101      	bne.n	8003054 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8003050:	2300      	movs	r3, #0
 8003052:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4293      	cmp	r3, r2
 8003062:	bf28      	it	cs
 8003064:	4613      	movcs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d018      	beq.n	80030a0 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	4413      	add	r3, r2
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4619      	mov	r1, r3
 800307a:	69f8      	ldr	r0, [r7, #28]
 800307c:	f001 fa1a 	bl	80044b4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4413      	add	r3, r2
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8003088:	69fa      	ldr	r2, [r7, #28]
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4413      	add	r3, r2
 800308e:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003098:	6a3a      	ldr	r2, [r7, #32]
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	4413      	add	r3, r2
 800309e:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	6a3a      	ldr	r2, [r7, #32]
 80030aa:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3728      	adds	r7, #40	; 0x28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	2000360c 	.word	0x2000360c

080030bc <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	; 0x28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4a3f      	ldr	r2, [pc, #252]	; (80031d8 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 80030da:	4413      	add	r3, r2
 80030dc:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 80030ea:	69fa      	ldr	r2, [r7, #28]
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d854      	bhi.n	800319c <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	429a      	cmp	r2, r3
 8003104:	d30f      	bcc.n	8003126 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	4413      	add	r3, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003112:	4618      	mov	r0, r3
 8003114:	f001 f9ce 	bl	80044b4 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	441a      	add	r2, r3
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8003122:	2301      	movs	r3, #1
 8003124:	e054      	b.n	80031d0 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	4413      	add	r3, r2
 800312c:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	429a      	cmp	r2, r3
 8003134:	d34b      	bcc.n	80031ce <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	429a      	cmp	r2, r3
 8003146:	d90e      	bls.n	8003166 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	4413      	add	r3, r2
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003154:	4618      	mov	r0, r3
 8003156:	f001 f9ad 	bl	80044b4 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	441a      	add	r2, r3
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	60da      	str	r2, [r3, #12]
 8003164:	e018      	b.n	8003198 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	4413      	add	r3, r2
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003172:	4618      	mov	r0, r3
 8003174:	f001 f99e 	bl	80044b4 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	6858      	ldr	r0, [r3, #4]
 800317c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	18d1      	adds	r1, r2, r3
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	461a      	mov	r2, r3
 800318a:	f001 f993 	bl	80044b4 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad2      	subs	r2, r2, r3
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8003198:	2301      	movs	r3, #1
 800319a:	e019      	b.n	80031d0 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 800319c:	69fa      	ldr	r2, [r7, #28]
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	3b01      	subs	r3, #1
 80031a4:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d30f      	bcc.n	80031ce <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	4413      	add	r3, r2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031ba:	4618      	mov	r0, r3
 80031bc:	f001 f97a 	bl	80044b4 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	441a      	add	r2, r3
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3728      	adds	r7, #40	; 0x28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	2000360c 	.word	0x2000360c

080031dc <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80031ea:	4b30      	ldr	r3, [pc, #192]	; (80032ac <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 80031f2:	f7ff fe8f 	bl	8002f14 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 80031f6:	4b2d      	ldr	r3, [pc, #180]	; (80032ac <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	461a      	mov	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4293      	cmp	r3, r2
 8003200:	d24c      	bcs.n	800329c <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8003202:	f3ef 8311 	mrs	r3, BASEPRI
 8003206:	f04f 0120 	mov.w	r1, #32
 800320a:	f381 8811 	msr	BASEPRI, r1
 800320e:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d032      	beq.n	800327c <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8003216:	4925      	ldr	r1, [pc, #148]	; (80032ac <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	4613      	mov	r3, r2
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	4413      	add	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	440b      	add	r3, r1
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800322a:	4920      	ldr	r1, [pc, #128]	; (80032ac <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	4613      	mov	r3, r2
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	4413      	add	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	440b      	add	r3, r1
 800323a:	3304      	adds	r3, #4
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003240:	491a      	ldr	r1, [pc, #104]	; (80032ac <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4613      	mov	r3, r2
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	4413      	add	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	440b      	add	r3, r1
 800324e:	3320      	adds	r3, #32
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8003254:	4915      	ldr	r1, [pc, #84]	; (80032ac <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4613      	mov	r3, r2
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	4413      	add	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	440b      	add	r3, r1
 8003262:	3328      	adds	r3, #40	; 0x28
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8003268:	4910      	ldr	r1, [pc, #64]	; (80032ac <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4613      	mov	r3, r2
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	4413      	add	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	440b      	add	r3, r1
 8003276:	3324      	adds	r3, #36	; 0x24
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 800327c:	490b      	ldr	r1, [pc, #44]	; (80032ac <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4613      	mov	r3, r2
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	4413      	add	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	440b      	add	r3, r1
 800328a:	332c      	adds	r3, #44	; 0x2c
 800328c:	6a3a      	ldr	r2, [r7, #32]
 800328e:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	e002      	b.n	80032a2 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 800329c:	f04f 33ff 	mov.w	r3, #4294967295
 80032a0:	617b      	str	r3, [r7, #20]
  }
  return r;
 80032a2:	697b      	ldr	r3, [r7, #20]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	2000360c 	.word	0x2000360c

080032b0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80032be:	4b30      	ldr	r3, [pc, #192]	; (8003380 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <SEGGER_RTT_ConfigDownBuffer+0x1a>
 80032c6:	f7ff fe25 	bl	8002f14 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 80032ca:	4b2d      	ldr	r3, [pc, #180]	; (8003380 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	461a      	mov	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d24b      	bcs.n	800336e <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 80032d6:	f3ef 8311 	mrs	r3, BASEPRI
 80032da:	f04f 0120 	mov.w	r1, #32
 80032de:	f381 8811 	msr	BASEPRI, r1
 80032e2:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d031      	beq.n	800334e <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 80032ea:	4925      	ldr	r1, [pc, #148]	; (8003380 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4613      	mov	r3, r2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	4413      	add	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	440b      	add	r3, r1
 80032f8:	3360      	adds	r3, #96	; 0x60
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80032fe:	4920      	ldr	r1, [pc, #128]	; (8003380 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4613      	mov	r3, r2
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	4413      	add	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	440b      	add	r3, r1
 800330c:	3364      	adds	r3, #100	; 0x64
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003312:	491b      	ldr	r1, [pc, #108]	; (8003380 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4613      	mov	r3, r2
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	4413      	add	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	440b      	add	r3, r1
 8003320:	3368      	adds	r3, #104	; 0x68
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8003326:	4916      	ldr	r1, [pc, #88]	; (8003380 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	4613      	mov	r3, r2
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	4413      	add	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	440b      	add	r3, r1
 8003334:	3370      	adds	r3, #112	; 0x70
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 800333a:	4911      	ldr	r1, [pc, #68]	; (8003380 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	4613      	mov	r3, r2
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	4413      	add	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	440b      	add	r3, r1
 8003348:	336c      	adds	r3, #108	; 0x6c
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 800334e:	490c      	ldr	r1, [pc, #48]	; (8003380 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4613      	mov	r3, r2
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	4413      	add	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	440b      	add	r3, r1
 800335c:	3374      	adds	r3, #116	; 0x74
 800335e:	6a3a      	ldr	r2, [r7, #32]
 8003360:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	e002      	b.n	8003374 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 800336e:	f04f 33ff 	mov.w	r3, #4294967295
 8003372:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003374:	697b      	ldr	r3, [r7, #20]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	2000360c 	.word	0x2000360c

08003384 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003390:	2300      	movs	r3, #0
 8003392:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003394:	e002      	b.n	800339c <_EncodeStr+0x18>
    Len++;
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	3301      	adds	r3, #1
 800339a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	4413      	add	r3, r2
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1f6      	bne.n	8003396 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d901      	bls.n	80033b4 <_EncodeStr+0x30>
    Len = Limit;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	2bfe      	cmp	r3, #254	; 0xfe
 80033b8:	d806      	bhi.n	80033c8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	60fa      	str	r2, [r7, #12]
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]
 80033c6:	e011      	b.n	80033ec <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	60fa      	str	r2, [r7, #12]
 80033ce:	22ff      	movs	r2, #255	; 0xff
 80033d0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	60fa      	str	r2, [r7, #12]
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	0a19      	lsrs	r1, r3, #8
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	60fa      	str	r2, [r7, #12]
 80033e8:	b2ca      	uxtb	r2, r1
 80033ea:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80033f0:	e00a      	b.n	8003408 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	1c53      	adds	r3, r2, #1
 80033f6:	60bb      	str	r3, [r7, #8]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1c59      	adds	r1, r3, #1
 80033fc:	60f9      	str	r1, [r7, #12]
 80033fe:	7812      	ldrb	r2, [r2, #0]
 8003400:	701a      	strb	r2, [r3, #0]
    n++;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	3301      	adds	r3, #1
 8003406:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	429a      	cmp	r2, r3
 800340e:	d3f0      	bcc.n	80033f2 <_EncodeStr+0x6e>
  }
  return pPayload;
 8003410:	68fb      	ldr	r3, [r7, #12]
}
 8003412:	4618      	mov	r0, r3
 8003414:	371c      	adds	r7, #28
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr

0800341c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3304      	adds	r3, #4
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr
	...

08003434 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800343a:	1cfb      	adds	r3, r7, #3
 800343c:	2201      	movs	r2, #1
 800343e:	4619      	mov	r1, r3
 8003440:	2001      	movs	r0, #1
 8003442:	f7ff fdb9 	bl	8002fb8 <SEGGER_RTT_ReadNoLock>
 8003446:	4603      	mov	r3, r0
 8003448:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	dd4c      	ble.n	80034ea <_HandleIncomingPacket+0xb6>
    switch (Cmd) {
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	2b07      	cmp	r3, #7
 8003454:	dc16      	bgt.n	8003484 <_HandleIncomingPacket+0x50>
 8003456:	2b00      	cmp	r3, #0
 8003458:	dd3c      	ble.n	80034d4 <_HandleIncomingPacket+0xa0>
 800345a:	3b01      	subs	r3, #1
 800345c:	2b06      	cmp	r3, #6
 800345e:	d839      	bhi.n	80034d4 <_HandleIncomingPacket+0xa0>
 8003460:	a201      	add	r2, pc, #4	; (adr r2, 8003468 <_HandleIncomingPacket+0x34>)
 8003462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003466:	bf00      	nop
 8003468:	0800348b 	.word	0x0800348b
 800346c:	08003491 	.word	0x08003491
 8003470:	08003497 	.word	0x08003497
 8003474:	0800349d 	.word	0x0800349d
 8003478:	080034a3 	.word	0x080034a3
 800347c:	080034a9 	.word	0x080034a9
 8003480:	080034af 	.word	0x080034af
 8003484:	2b80      	cmp	r3, #128	; 0x80
 8003486:	d015      	beq.n	80034b4 <_HandleIncomingPacket+0x80>
 8003488:	e024      	b.n	80034d4 <_HandleIncomingPacket+0xa0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800348a:	f000 fa7b 	bl	8003984 <SEGGER_SYSVIEW_Start>
      break;
 800348e:	e031      	b.n	80034f4 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003490:	f000 fb34 	bl	8003afc <SEGGER_SYSVIEW_Stop>
      break;
 8003494:	e02e      	b.n	80034f4 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003496:	f000 fd0f 	bl	8003eb8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800349a:	e02b      	b.n	80034f4 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800349c:	f000 fcd4 	bl	8003e48 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80034a0:	e028      	b.n	80034f4 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80034a2:	f000 fb51 	bl	8003b48 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80034a6:	e025      	b.n	80034f4 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80034a8:	f000 ff38 	bl	800431c <SEGGER_SYSVIEW_SendNumModules>
      break;
 80034ac:	e022      	b.n	80034f4 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80034ae:	f000 ff17 	bl	80042e0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80034b2:	e01f      	b.n	80034f4 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80034b4:	1cfb      	adds	r3, r7, #3
 80034b6:	2201      	movs	r2, #1
 80034b8:	4619      	mov	r1, r3
 80034ba:	2001      	movs	r0, #1
 80034bc:	f7ff fd7c 	bl	8002fb8 <SEGGER_RTT_ReadNoLock>
 80034c0:	4603      	mov	r3, r0
 80034c2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	dd11      	ble.n	80034ee <_HandleIncomingPacket+0xba>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 fe87 	bl	80041e0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80034d2:	e00c      	b.n	80034ee <_HandleIncomingPacket+0xba>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80034d4:	78fb      	ldrb	r3, [r7, #3]
 80034d6:	b25b      	sxtb	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	da0a      	bge.n	80034f2 <_HandleIncomingPacket+0xbe>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80034dc:	1cfb      	adds	r3, r7, #3
 80034de:	2201      	movs	r2, #1
 80034e0:	4619      	mov	r1, r3
 80034e2:	2001      	movs	r0, #1
 80034e4:	f7ff fd68 	bl	8002fb8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80034e8:	e003      	b.n	80034f2 <_HandleIncomingPacket+0xbe>
    }
  }
 80034ea:	bf00      	nop
 80034ec:	e002      	b.n	80034f4 <_HandleIncomingPacket+0xc0>
      break;
 80034ee:	bf00      	nop
 80034f0:	e000      	b.n	80034f4 <_HandleIncomingPacket+0xc0>
      break;
 80034f2:	bf00      	nop
}
 80034f4:	bf00      	nop
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08c      	sub	sp, #48	; 0x30
 8003500:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003502:	2301      	movs	r3, #1
 8003504:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003506:	1d3b      	adds	r3, r7, #4
 8003508:	3301      	adds	r3, #1
 800350a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003510:	4b30      	ldr	r3, [pc, #192]	; (80035d4 <_TrySendOverflowPacket+0xd8>)
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	62bb      	str	r3, [r7, #40]	; 0x28
 8003516:	e00b      	b.n	8003530 <_TrySendOverflowPacket+0x34>
 8003518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351a:	b2da      	uxtb	r2, r3
 800351c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351e:	1c59      	adds	r1, r3, #1
 8003520:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003522:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	701a      	strb	r2, [r3, #0]
 800352a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352c:	09db      	lsrs	r3, r3, #7
 800352e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003532:	2b7f      	cmp	r3, #127	; 0x7f
 8003534:	d8f0      	bhi.n	8003518 <_TrySendOverflowPacket+0x1c>
 8003536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800353c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	701a      	strb	r2, [r3, #0]
 8003542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003544:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003546:	4b24      	ldr	r3, [pc, #144]	; (80035d8 <_TrySendOverflowPacket+0xdc>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800354c:	4b21      	ldr	r3, [pc, #132]	; (80035d4 <_TrySendOverflowPacket+0xd8>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	623b      	str	r3, [r7, #32]
 800355e:	e00b      	b.n	8003578 <_TrySendOverflowPacket+0x7c>
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	b2da      	uxtb	r2, r3
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	1c59      	adds	r1, r3, #1
 8003568:	6279      	str	r1, [r7, #36]	; 0x24
 800356a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	701a      	strb	r2, [r3, #0]
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	09db      	lsrs	r3, r3, #7
 8003576:	623b      	str	r3, [r7, #32]
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	2b7f      	cmp	r3, #127	; 0x7f
 800357c:	d8f0      	bhi.n	8003560 <_TrySendOverflowPacket+0x64>
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	627a      	str	r2, [r7, #36]	; 0x24
 8003584:	6a3a      	ldr	r2, [r7, #32]
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	701a      	strb	r2, [r3, #0]
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800358e:	1d3b      	adds	r3, r7, #4
 8003590:	69fa      	ldr	r2, [r7, #28]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	461a      	mov	r2, r3
 8003596:	1d3b      	adds	r3, r7, #4
 8003598:	4619      	mov	r1, r3
 800359a:	2001      	movs	r0, #1
 800359c:	f7ff fd8e 	bl	80030bc <SEGGER_RTT_WriteSkipNoLock>
 80035a0:	4603      	mov	r3, r0
 80035a2:	613b      	str	r3, [r7, #16]
  if (Status) {
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d009      	beq.n	80035be <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80035aa:	4a0a      	ldr	r2, [pc, #40]	; (80035d4 <_TrySendOverflowPacket+0xd8>)
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80035b0:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <_TrySendOverflowPacket+0xd8>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <_TrySendOverflowPacket+0xd8>)
 80035ba:	701a      	strb	r2, [r3, #0]
 80035bc:	e004      	b.n	80035c8 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80035be:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <_TrySendOverflowPacket+0xd8>)
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	3301      	adds	r3, #1
 80035c4:	4a03      	ldr	r2, [pc, #12]	; (80035d4 <_TrySendOverflowPacket+0xd8>)
 80035c6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80035c8:	693b      	ldr	r3, [r7, #16]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3730      	adds	r7, #48	; 0x30
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	2000346c 	.word	0x2000346c
 80035d8:	e0001004 	.word	0xe0001004

080035dc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08a      	sub	sp, #40	; 0x28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80035e8:	4b63      	ldr	r3, [pc, #396]	; (8003778 <_SendPacket+0x19c>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d010      	beq.n	8003612 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80035f0:	4b61      	ldr	r3, [pc, #388]	; (8003778 <_SendPacket+0x19c>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 80a1 	beq.w	800373c <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80035fa:	4b5f      	ldr	r3, [pc, #380]	; (8003778 <_SendPacket+0x19c>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d109      	bne.n	8003616 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003602:	f7ff ff7b 	bl	80034fc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003606:	4b5c      	ldr	r3, [pc, #368]	; (8003778 <_SendPacket+0x19c>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b01      	cmp	r3, #1
 800360c:	f040 8098 	bne.w	8003740 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8003610:	e001      	b.n	8003616 <_SendPacket+0x3a>
    goto Send;
 8003612:	bf00      	nop
 8003614:	e000      	b.n	8003618 <_SendPacket+0x3c>
Send:
 8003616:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b1f      	cmp	r3, #31
 800361c:	d809      	bhi.n	8003632 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800361e:	4b56      	ldr	r3, [pc, #344]	; (8003778 <_SendPacket+0x19c>)
 8003620:	69da      	ldr	r2, [r3, #28]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	fa22 f303 	lsr.w	r3, r2, r3
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	f040 8089 	bne.w	8003744 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b17      	cmp	r3, #23
 8003636:	d807      	bhi.n	8003648 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	3b01      	subs	r3, #1
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	701a      	strb	r2, [r3, #0]
 8003646:	e03d      	b.n	80036c4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	2b7f      	cmp	r3, #127	; 0x7f
 8003654:	d912      	bls.n	800367c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	09da      	lsrs	r2, r3, #7
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	3b01      	subs	r3, #1
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	3a01      	subs	r2, #1
 800366e:	60fa      	str	r2, [r7, #12]
 8003670:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003674:	b2da      	uxtb	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	701a      	strb	r2, [r3, #0]
 800367a:	e006      	b.n	800368a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	3b01      	subs	r3, #1
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	b2da      	uxtb	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b7f      	cmp	r3, #127	; 0x7f
 800368e:	d912      	bls.n	80036b6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	09da      	lsrs	r2, r3, #7
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	3b01      	subs	r3, #1
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	3a01      	subs	r2, #1
 80036a8:	60fa      	str	r2, [r7, #12]
 80036aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	e006      	b.n	80036c4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80036c4:	4b2d      	ldr	r3, [pc, #180]	; (800377c <_SendPacket+0x1a0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80036ca:	4b2b      	ldr	r3, [pc, #172]	; (8003778 <_SendPacket+0x19c>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	623b      	str	r3, [r7, #32]
 80036dc:	e00b      	b.n	80036f6 <_SendPacket+0x11a>
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	1c59      	adds	r1, r3, #1
 80036e6:	6279      	str	r1, [r7, #36]	; 0x24
 80036e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	701a      	strb	r2, [r3, #0]
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	09db      	lsrs	r3, r3, #7
 80036f4:	623b      	str	r3, [r7, #32]
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	2b7f      	cmp	r3, #127	; 0x7f
 80036fa:	d8f0      	bhi.n	80036de <_SendPacket+0x102>
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	627a      	str	r2, [r7, #36]	; 0x24
 8003702:	6a3a      	ldr	r2, [r7, #32]
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	701a      	strb	r2, [r3, #0]
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	461a      	mov	r2, r3
 8003714:	68f9      	ldr	r1, [r7, #12]
 8003716:	2001      	movs	r0, #1
 8003718:	f7ff fcd0 	bl	80030bc <SEGGER_RTT_WriteSkipNoLock>
 800371c:	4603      	mov	r3, r0
 800371e:	613b      	str	r3, [r7, #16]
  if (Status) {
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003726:	4a14      	ldr	r2, [pc, #80]	; (8003778 <_SendPacket+0x19c>)
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	60d3      	str	r3, [r2, #12]
 800372c:	e00b      	b.n	8003746 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800372e:	4b12      	ldr	r3, [pc, #72]	; (8003778 <_SendPacket+0x19c>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	3301      	adds	r3, #1
 8003734:	b2da      	uxtb	r2, r3
 8003736:	4b10      	ldr	r3, [pc, #64]	; (8003778 <_SendPacket+0x19c>)
 8003738:	701a      	strb	r2, [r3, #0]
 800373a:	e004      	b.n	8003746 <_SendPacket+0x16a>
    goto SendDone;
 800373c:	bf00      	nop
 800373e:	e002      	b.n	8003746 <_SendPacket+0x16a>
      goto SendDone;
 8003740:	bf00      	nop
 8003742:	e000      	b.n	8003746 <_SendPacket+0x16a>
      goto SendDone;
 8003744:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003746:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <_SendPacket+0x1a4>)
 8003748:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800374c:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <_SendPacket+0x1a4>)
 800374e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003752:	429a      	cmp	r2, r3
 8003754:	d00b      	beq.n	800376e <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003756:	4b08      	ldr	r3, [pc, #32]	; (8003778 <_SendPacket+0x19c>)
 8003758:	789b      	ldrb	r3, [r3, #2]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d107      	bne.n	800376e <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <_SendPacket+0x19c>)
 8003760:	2201      	movs	r2, #1
 8003762:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003764:	f7ff fe66 	bl	8003434 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003768:	4b03      	ldr	r3, [pc, #12]	; (8003778 <_SendPacket+0x19c>)
 800376a:	2200      	movs	r2, #0
 800376c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800376e:	bf00      	nop
 8003770:	3728      	adds	r7, #40	; 0x28
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	2000346c 	.word	0x2000346c
 800377c:	e0001004 	.word	0xe0001004
 8003780:	2000360c 	.word	0x2000360c

08003784 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af02      	add	r7, sp, #8
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003792:	2300      	movs	r3, #0
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800379a:	4a14      	ldr	r2, [pc, #80]	; (80037ec <SEGGER_SYSVIEW_Init+0x68>)
 800379c:	4914      	ldr	r1, [pc, #80]	; (80037f0 <SEGGER_SYSVIEW_Init+0x6c>)
 800379e:	2001      	movs	r0, #1
 80037a0:	f7ff fd1c 	bl	80031dc <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80037a4:	2300      	movs	r3, #0
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	2308      	movs	r3, #8
 80037aa:	4a12      	ldr	r2, [pc, #72]	; (80037f4 <SEGGER_SYSVIEW_Init+0x70>)
 80037ac:	4910      	ldr	r1, [pc, #64]	; (80037f0 <SEGGER_SYSVIEW_Init+0x6c>)
 80037ae:	2001      	movs	r0, #1
 80037b0:	f7ff fd7e 	bl	80032b0 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80037b4:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <SEGGER_SYSVIEW_Init+0x74>)
 80037b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ba:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80037bc:	4b0f      	ldr	r3, [pc, #60]	; (80037fc <SEGGER_SYSVIEW_Init+0x78>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a0d      	ldr	r2, [pc, #52]	; (80037f8 <SEGGER_SYSVIEW_Init+0x74>)
 80037c2:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80037c4:	4a0c      	ldr	r2, [pc, #48]	; (80037f8 <SEGGER_SYSVIEW_Init+0x74>)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80037ca:	4a0b      	ldr	r2, [pc, #44]	; (80037f8 <SEGGER_SYSVIEW_Init+0x74>)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80037d0:	4a09      	ldr	r2, [pc, #36]	; (80037f8 <SEGGER_SYSVIEW_Init+0x74>)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80037d6:	4a08      	ldr	r2, [pc, #32]	; (80037f8 <SEGGER_SYSVIEW_Init+0x74>)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80037dc:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <SEGGER_SYSVIEW_Init+0x74>)
 80037de:	2200      	movs	r2, #0
 80037e0:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80037e2:	bf00      	nop
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20001464 	.word	0x20001464
 80037f0:	080045dc 	.word	0x080045dc
 80037f4:	20003464 	.word	0x20003464
 80037f8:	2000346c 	.word	0x2000346c
 80037fc:	e0001004 	.word	0xe0001004

08003800 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003808:	4a03      	ldr	r2, [pc, #12]	; (8003818 <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6113      	str	r3, [r2, #16]
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr
 8003818:	2000346c 	.word	0x2000346c

0800381c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003824:	f3ef 8311 	mrs	r3, BASEPRI
 8003828:	f04f 0120 	mov.w	r1, #32
 800382c:	f381 8811 	msr	BASEPRI, r1
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	4808      	ldr	r0, [pc, #32]	; (8003854 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003834:	f7ff fdf2 	bl	800341c <_PreparePacket>
 8003838:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	68b8      	ldr	r0, [r7, #8]
 8003840:	f7ff fecc 	bl	80035dc <_SendPacket>
  RECORD_END();
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f383 8811 	msr	BASEPRI, r3
}
 800384a:	bf00      	nop
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	2000349c 	.word	0x2000349c

08003858 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003862:	f3ef 8311 	mrs	r3, BASEPRI
 8003866:	f04f 0120 	mov.w	r1, #32
 800386a:	f381 8811 	msr	BASEPRI, r1
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	4816      	ldr	r0, [pc, #88]	; (80038cc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003872:	f7ff fdd3 	bl	800341c <_PreparePacket>
 8003876:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	61fb      	str	r3, [r7, #28]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	61bb      	str	r3, [r7, #24]
 8003884:	e00b      	b.n	800389e <SEGGER_SYSVIEW_RecordU32+0x46>
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	b2da      	uxtb	r2, r3
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	1c59      	adds	r1, r3, #1
 800388e:	61f9      	str	r1, [r7, #28]
 8003890:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	701a      	strb	r2, [r3, #0]
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	09db      	lsrs	r3, r3, #7
 800389c:	61bb      	str	r3, [r7, #24]
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	2b7f      	cmp	r3, #127	; 0x7f
 80038a2:	d8f0      	bhi.n	8003886 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	61fa      	str	r2, [r7, #28]
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	701a      	strb	r2, [r3, #0]
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	68f9      	ldr	r1, [r7, #12]
 80038b8:	6938      	ldr	r0, [r7, #16]
 80038ba:	f7ff fe8f 	bl	80035dc <_SendPacket>
  RECORD_END();
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f383 8811 	msr	BASEPRI, r3
}
 80038c4:	bf00      	nop
 80038c6:	3720      	adds	r7, #32
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	2000349c 	.word	0x2000349c

080038d0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08c      	sub	sp, #48	; 0x30
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80038dc:	f3ef 8311 	mrs	r3, BASEPRI
 80038e0:	f04f 0120 	mov.w	r1, #32
 80038e4:	f381 8811 	msr	BASEPRI, r1
 80038e8:	61fb      	str	r3, [r7, #28]
 80038ea:	4825      	ldr	r0, [pc, #148]	; (8003980 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80038ec:	f7ff fd96 	bl	800341c <_PreparePacket>
 80038f0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80038fe:	e00b      	b.n	8003918 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	b2da      	uxtb	r2, r3
 8003904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003906:	1c59      	adds	r1, r3, #1
 8003908:	62f9      	str	r1, [r7, #44]	; 0x2c
 800390a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	09db      	lsrs	r3, r3, #7
 8003916:	62bb      	str	r3, [r7, #40]	; 0x28
 8003918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391a:	2b7f      	cmp	r3, #127	; 0x7f
 800391c:	d8f0      	bhi.n	8003900 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800391e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003924:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	623b      	str	r3, [r7, #32]
 8003936:	e00b      	b.n	8003950 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	b2da      	uxtb	r2, r3
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	1c59      	adds	r1, r3, #1
 8003940:	6279      	str	r1, [r7, #36]	; 0x24
 8003942:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	701a      	strb	r2, [r3, #0]
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	09db      	lsrs	r3, r3, #7
 800394e:	623b      	str	r3, [r7, #32]
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	2b7f      	cmp	r3, #127	; 0x7f
 8003954:	d8f0      	bhi.n	8003938 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	1c5a      	adds	r2, r3, #1
 800395a:	627a      	str	r2, [r7, #36]	; 0x24
 800395c:	6a3a      	ldr	r2, [r7, #32]
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	6979      	ldr	r1, [r7, #20]
 800396a:	69b8      	ldr	r0, [r7, #24]
 800396c:	f7ff fe36 	bl	80035dc <_SendPacket>
  RECORD_END();
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f383 8811 	msr	BASEPRI, r3
}
 8003976:	bf00      	nop
 8003978:	3730      	adds	r7, #48	; 0x30
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	2000349c 	.word	0x2000349c

08003984 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003984:	b580      	push	{r7, lr}
 8003986:	b08c      	sub	sp, #48	; 0x30
 8003988:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 800398a:	4b59      	ldr	r3, [pc, #356]	; (8003af0 <SEGGER_SYSVIEW_Start+0x16c>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	f040 80aa 	bne.w	8003ae8 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8003994:	4b56      	ldr	r3, [pc, #344]	; (8003af0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003996:	2201      	movs	r2, #1
 8003998:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800399a:	f3ef 8311 	mrs	r3, BASEPRI
 800399e:	f04f 0120 	mov.w	r1, #32
 80039a2:	f381 8811 	msr	BASEPRI, r1
 80039a6:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80039a8:	220a      	movs	r2, #10
 80039aa:	4952      	ldr	r1, [pc, #328]	; (8003af4 <SEGGER_SYSVIEW_Start+0x170>)
 80039ac:	2001      	movs	r0, #1
 80039ae:	f7ff fb85 	bl	80030bc <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80039b8:	200a      	movs	r0, #10
 80039ba:	f7ff ff2f 	bl	800381c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80039be:	f3ef 8311 	mrs	r3, BASEPRI
 80039c2:	f04f 0120 	mov.w	r1, #32
 80039c6:	f381 8811 	msr	BASEPRI, r1
 80039ca:	60bb      	str	r3, [r7, #8]
 80039cc:	484a      	ldr	r0, [pc, #296]	; (8003af8 <SEGGER_SYSVIEW_Start+0x174>)
 80039ce:	f7ff fd25 	bl	800341c <_PreparePacket>
 80039d2:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039dc:	4b44      	ldr	r3, [pc, #272]	; (8003af0 <SEGGER_SYSVIEW_Start+0x16c>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039e2:	e00b      	b.n	80039fc <SEGGER_SYSVIEW_Start+0x78>
 80039e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ea:	1c59      	adds	r1, r3, #1
 80039ec:	62f9      	str	r1, [r7, #44]	; 0x2c
 80039ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]
 80039f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f8:	09db      	lsrs	r3, r3, #7
 80039fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80039fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fe:	2b7f      	cmp	r3, #127	; 0x7f
 8003a00:	d8f0      	bhi.n	80039e4 <SEGGER_SYSVIEW_Start+0x60>
 8003a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	701a      	strb	r2, [r3, #0]
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
 8003a16:	4b36      	ldr	r3, [pc, #216]	; (8003af0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	623b      	str	r3, [r7, #32]
 8003a1c:	e00b      	b.n	8003a36 <SEGGER_SYSVIEW_Start+0xb2>
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	1c59      	adds	r1, r3, #1
 8003a26:	6279      	str	r1, [r7, #36]	; 0x24
 8003a28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	701a      	strb	r2, [r3, #0]
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	09db      	lsrs	r3, r3, #7
 8003a34:	623b      	str	r3, [r7, #32]
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	2b7f      	cmp	r3, #127	; 0x7f
 8003a3a:	d8f0      	bhi.n	8003a1e <SEGGER_SYSVIEW_Start+0x9a>
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	627a      	str	r2, [r7, #36]	; 0x24
 8003a42:	6a3a      	ldr	r2, [r7, #32]
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	61fb      	str	r3, [r7, #28]
 8003a50:	4b27      	ldr	r3, [pc, #156]	; (8003af0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	e00b      	b.n	8003a70 <SEGGER_SYSVIEW_Start+0xec>
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	1c59      	adds	r1, r3, #1
 8003a60:	61f9      	str	r1, [r7, #28]
 8003a62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	701a      	strb	r2, [r3, #0]
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	09db      	lsrs	r3, r3, #7
 8003a6e:	61bb      	str	r3, [r7, #24]
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	2b7f      	cmp	r3, #127	; 0x7f
 8003a74:	d8f0      	bhi.n	8003a58 <SEGGER_SYSVIEW_Start+0xd4>
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	61fa      	str	r2, [r7, #28]
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	701a      	strb	r2, [r3, #0]
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	e00b      	b.n	8003aa8 <SEGGER_SYSVIEW_Start+0x124>
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	1c59      	adds	r1, r3, #1
 8003a98:	6179      	str	r1, [r7, #20]
 8003a9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	701a      	strb	r2, [r3, #0]
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	09db      	lsrs	r3, r3, #7
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	2b7f      	cmp	r3, #127	; 0x7f
 8003aac:	d8f0      	bhi.n	8003a90 <SEGGER_SYSVIEW_Start+0x10c>
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	1c5a      	adds	r2, r3, #1
 8003ab2:	617a      	str	r2, [r7, #20]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	701a      	strb	r2, [r3, #0]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003abe:	2218      	movs	r2, #24
 8003ac0:	6839      	ldr	r1, [r7, #0]
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff fd8a 	bl	80035dc <_SendPacket>
      RECORD_END();
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003ace:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003ad6:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <SEGGER_SYSVIEW_Start+0x16c>)
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003adc:	f000 f9ec 	bl	8003eb8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003ae0:	f000 f9b2 	bl	8003e48 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003ae4:	f000 fc1a 	bl	800431c <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8003ae8:	bf00      	nop
 8003aea:	3730      	adds	r7, #48	; 0x30
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	2000346c 	.word	0x2000346c
 8003af4:	08004604 	.word	0x08004604
 8003af8:	2000349c 	.word	0x2000349c

08003afc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003b02:	f3ef 8311 	mrs	r3, BASEPRI
 8003b06:	f04f 0120 	mov.w	r1, #32
 8003b0a:	f381 8811 	msr	BASEPRI, r1
 8003b0e:	607b      	str	r3, [r7, #4]
 8003b10:	480b      	ldr	r0, [pc, #44]	; (8003b40 <SEGGER_SYSVIEW_Stop+0x44>)
 8003b12:	f7ff fc83 	bl	800341c <_PreparePacket>
 8003b16:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003b18:	4b0a      	ldr	r3, [pc, #40]	; (8003b44 <SEGGER_SYSVIEW_Stop+0x48>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d007      	beq.n	8003b30 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003b20:	220b      	movs	r2, #11
 8003b22:	6839      	ldr	r1, [r7, #0]
 8003b24:	6838      	ldr	r0, [r7, #0]
 8003b26:	f7ff fd59 	bl	80035dc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003b2a:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <SEGGER_SYSVIEW_Stop+0x48>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f383 8811 	msr	BASEPRI, r3
}
 8003b36:	bf00      	nop
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	2000349c 	.word	0x2000349c
 8003b44:	2000346c 	.word	0x2000346c

08003b48 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08c      	sub	sp, #48	; 0x30
 8003b4c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003b4e:	f3ef 8311 	mrs	r3, BASEPRI
 8003b52:	f04f 0120 	mov.w	r1, #32
 8003b56:	f381 8811 	msr	BASEPRI, r1
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	4845      	ldr	r0, [pc, #276]	; (8003c74 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003b5e:	f7ff fc5d 	bl	800341c <_PreparePacket>
 8003b62:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b6c:	4b42      	ldr	r3, [pc, #264]	; (8003c78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b72:	e00b      	b.n	8003b8c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7a:	1c59      	adds	r1, r3, #1
 8003b7c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003b7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	701a      	strb	r2, [r3, #0]
 8003b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b88:	09db      	lsrs	r3, r3, #7
 8003b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8e:	2b7f      	cmp	r3, #127	; 0x7f
 8003b90:	d8f0      	bhi.n	8003b74 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]
 8003b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba6:	4b34      	ldr	r3, [pc, #208]	; (8003c78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	623b      	str	r3, [r7, #32]
 8003bac:	e00b      	b.n	8003bc6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	1c59      	adds	r1, r3, #1
 8003bb6:	6279      	str	r1, [r7, #36]	; 0x24
 8003bb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	701a      	strb	r2, [r3, #0]
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	09db      	lsrs	r3, r3, #7
 8003bc4:	623b      	str	r3, [r7, #32]
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	2b7f      	cmp	r3, #127	; 0x7f
 8003bca:	d8f0      	bhi.n	8003bae <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	627a      	str	r2, [r7, #36]	; 0x24
 8003bd2:	6a3a      	ldr	r2, [r7, #32]
 8003bd4:	b2d2      	uxtb	r2, r2
 8003bd6:	701a      	strb	r2, [r3, #0]
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	61fb      	str	r3, [r7, #28]
 8003be0:	4b25      	ldr	r3, [pc, #148]	; (8003c78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	61bb      	str	r3, [r7, #24]
 8003be6:	e00b      	b.n	8003c00 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	1c59      	adds	r1, r3, #1
 8003bf0:	61f9      	str	r1, [r7, #28]
 8003bf2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	701a      	strb	r2, [r3, #0]
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	09db      	lsrs	r3, r3, #7
 8003bfe:	61bb      	str	r3, [r7, #24]
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2b7f      	cmp	r3, #127	; 0x7f
 8003c04:	d8f0      	bhi.n	8003be8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	61fa      	str	r2, [r7, #28]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	701a      	strb	r2, [r3, #0]
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	e00b      	b.n	8003c38 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	1c59      	adds	r1, r3, #1
 8003c28:	6179      	str	r1, [r7, #20]
 8003c2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	09db      	lsrs	r3, r3, #7
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	2b7f      	cmp	r3, #127	; 0x7f
 8003c3c:	d8f0      	bhi.n	8003c20 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	617a      	str	r2, [r7, #20]
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	701a      	strb	r2, [r3, #0]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003c4e:	2218      	movs	r2, #24
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	68b8      	ldr	r0, [r7, #8]
 8003c54:	f7ff fcc2 	bl	80035dc <_SendPacket>
  RECORD_END();
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003c5e:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003c66:	4b04      	ldr	r3, [pc, #16]	; (8003c78 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	4798      	blx	r3
  }
}
 8003c6c:	bf00      	nop
 8003c6e:	3730      	adds	r7, #48	; 0x30
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	2000349c 	.word	0x2000349c
 8003c78:	2000346c 	.word	0x2000346c

08003c7c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b092      	sub	sp, #72	; 0x48
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003c84:	f3ef 8311 	mrs	r3, BASEPRI
 8003c88:	f04f 0120 	mov.w	r1, #32
 8003c8c:	f381 8811 	msr	BASEPRI, r1
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	486b      	ldr	r0, [pc, #428]	; (8003e40 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003c94:	f7ff fbc2 	bl	800341c <_PreparePacket>
 8003c98:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	4b67      	ldr	r3, [pc, #412]	; (8003e44 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	089b      	lsrs	r3, r3, #2
 8003cae:	643b      	str	r3, [r7, #64]	; 0x40
 8003cb0:	e00b      	b.n	8003cca <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8003cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cb8:	1c59      	adds	r1, r3, #1
 8003cba:	6479      	str	r1, [r7, #68]	; 0x44
 8003cbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cc0:	b2d2      	uxtb	r2, r2
 8003cc2:	701a      	strb	r2, [r3, #0]
 8003cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc6:	09db      	lsrs	r3, r3, #7
 8003cc8:	643b      	str	r3, [r7, #64]	; 0x40
 8003cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ccc:	2b7f      	cmp	r3, #127	; 0x7f
 8003cce:	d8f0      	bhi.n	8003cb2 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8003cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	647a      	str	r2, [r7, #68]	; 0x44
 8003cd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	701a      	strb	r2, [r3, #0]
 8003cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cde:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cea:	e00b      	b.n	8003d04 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8003cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf2:	1c59      	adds	r1, r3, #1
 8003cf4:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003cf6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d00:	09db      	lsrs	r3, r3, #7
 8003d02:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d06:	2b7f      	cmp	r3, #127	; 0x7f
 8003d08:	d8f0      	bhi.n	8003cec <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8003d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	701a      	strb	r2, [r3, #0]
 8003d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d18:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	4619      	mov	r1, r3
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f7ff fb2e 	bl	8003384 <_EncodeStr>
 8003d28:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003d2a:	2209      	movs	r2, #9
 8003d2c:	68f9      	ldr	r1, [r7, #12]
 8003d2e:	6938      	ldr	r0, [r7, #16]
 8003d30:	f7ff fc54 	bl	80035dc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	4b40      	ldr	r3, [pc, #256]	; (8003e44 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	089b      	lsrs	r3, r3, #2
 8003d48:	633b      	str	r3, [r7, #48]	; 0x30
 8003d4a:	e00b      	b.n	8003d64 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d52:	1c59      	adds	r1, r3, #1
 8003d54:	6379      	str	r1, [r7, #52]	; 0x34
 8003d56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	701a      	strb	r2, [r3, #0]
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d60:	09db      	lsrs	r3, r3, #7
 8003d62:	633b      	str	r3, [r7, #48]	; 0x30
 8003d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d66:	2b7f      	cmp	r3, #127	; 0x7f
 8003d68:	d8f0      	bhi.n	8003d4c <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8003d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	637a      	str	r2, [r7, #52]	; 0x34
 8003d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d84:	e00b      	b.n	8003d9e <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8003d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8c:	1c59      	adds	r1, r3, #1
 8003d8e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003d90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d94:	b2d2      	uxtb	r2, r2
 8003d96:	701a      	strb	r2, [r3, #0]
 8003d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9a:	09db      	lsrs	r3, r3, #7
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da0:	2b7f      	cmp	r3, #127	; 0x7f
 8003da2:	d8f0      	bhi.n	8003d86 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8003da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	701a      	strb	r2, [r3, #0]
 8003db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	623b      	str	r3, [r7, #32]
 8003dbe:	e00b      	b.n	8003dd8 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	1c59      	adds	r1, r3, #1
 8003dc8:	6279      	str	r1, [r7, #36]	; 0x24
 8003dca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	09db      	lsrs	r3, r3, #7
 8003dd6:	623b      	str	r3, [r7, #32]
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	2b7f      	cmp	r3, #127	; 0x7f
 8003ddc:	d8f0      	bhi.n	8003dc0 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	1c5a      	adds	r2, r3, #1
 8003de2:	627a      	str	r2, [r7, #36]	; 0x24
 8003de4:	6a3a      	ldr	r2, [r7, #32]
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	2300      	movs	r3, #0
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	e00b      	b.n	8003e10 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	1c59      	adds	r1, r3, #1
 8003e00:	61f9      	str	r1, [r7, #28]
 8003e02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	701a      	strb	r2, [r3, #0]
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	09db      	lsrs	r3, r3, #7
 8003e0e:	61bb      	str	r3, [r7, #24]
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2b7f      	cmp	r3, #127	; 0x7f
 8003e14:	d8f0      	bhi.n	8003df8 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	61fa      	str	r2, [r7, #28]
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	701a      	strb	r2, [r3, #0]
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003e26:	2215      	movs	r2, #21
 8003e28:	68f9      	ldr	r1, [r7, #12]
 8003e2a:	6938      	ldr	r0, [r7, #16]
 8003e2c:	f7ff fbd6 	bl	80035dc <_SendPacket>
  RECORD_END();
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f383 8811 	msr	BASEPRI, r3
}
 8003e36:	bf00      	nop
 8003e38:	3748      	adds	r7, #72	; 0x48
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	2000349c 	.word	0x2000349c
 8003e44:	2000346c 	.word	0x2000346c

08003e48 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003e4c:	4b07      	ldr	r3, [pc, #28]	; (8003e6c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d008      	beq.n	8003e66 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003e54:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003e5e:	4b03      	ldr	r3, [pc, #12]	; (8003e6c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	4798      	blx	r3
  }
}
 8003e66:	bf00      	nop
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	2000346c 	.word	0x2000346c

08003e70 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003e78:	f3ef 8311 	mrs	r3, BASEPRI
 8003e7c:	f04f 0120 	mov.w	r1, #32
 8003e80:	f381 8811 	msr	BASEPRI, r1
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	480b      	ldr	r0, [pc, #44]	; (8003eb4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003e88:	f7ff fac8 	bl	800341c <_PreparePacket>
 8003e8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003e8e:	2280      	movs	r2, #128	; 0x80
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	6938      	ldr	r0, [r7, #16]
 8003e94:	f7ff fa76 	bl	8003384 <_EncodeStr>
 8003e98:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8003e9a:	220e      	movs	r2, #14
 8003e9c:	68f9      	ldr	r1, [r7, #12]
 8003e9e:	6938      	ldr	r0, [r7, #16]
 8003ea0:	f7ff fb9c 	bl	80035dc <_SendPacket>
  RECORD_END();
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f383 8811 	msr	BASEPRI, r3
}
 8003eaa:	bf00      	nop
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	2000349c 	.word	0x2000349c

08003eb8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003eb8:	b590      	push	{r4, r7, lr}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003ebe:	4b15      	ldr	r3, [pc, #84]	; (8003f14 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d01a      	beq.n	8003efc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8003ec6:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d015      	beq.n	8003efc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003ed0:	4b10      	ldr	r3, [pc, #64]	; (8003f14 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4798      	blx	r3
 8003ed8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003edc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003ede:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	000a      	movs	r2, r1
 8003eec:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003eee:	4613      	mov	r3, r2
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4621      	mov	r1, r4
 8003ef4:	200d      	movs	r0, #13
 8003ef6:	f7ff fceb 	bl	80038d0 <SEGGER_SYSVIEW_RecordU32x2>
 8003efa:	e006      	b.n	8003f0a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003efc:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4619      	mov	r1, r3
 8003f02:	200c      	movs	r0, #12
 8003f04:	f7ff fca8 	bl	8003858 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003f08:	bf00      	nop
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd90      	pop	{r4, r7, pc}
 8003f12:	bf00      	nop
 8003f14:	2000346c 	.word	0x2000346c
 8003f18:	e0001004 	.word	0xe0001004

08003f1c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003f22:	f3ef 8311 	mrs	r3, BASEPRI
 8003f26:	f04f 0120 	mov.w	r1, #32
 8003f2a:	f381 8811 	msr	BASEPRI, r1
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	4819      	ldr	r0, [pc, #100]	; (8003f98 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8003f32:	f7ff fa73 	bl	800341c <_PreparePacket>
 8003f36:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8003f3c:	4b17      	ldr	r3, [pc, #92]	; (8003f9c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f44:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	e00b      	b.n	8003f68 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	1c59      	adds	r1, r3, #1
 8003f58:	6179      	str	r1, [r7, #20]
 8003f5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	701a      	strb	r2, [r3, #0]
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	09db      	lsrs	r3, r3, #7
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8003f6c:	d8f0      	bhi.n	8003f50 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	617a      	str	r2, [r7, #20]
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8003f7e:	2202      	movs	r2, #2
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	68b8      	ldr	r0, [r7, #8]
 8003f84:	f7ff fb2a 	bl	80035dc <_SendPacket>
  RECORD_END();
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f383 8811 	msr	BASEPRI, r3
}
 8003f8e:	bf00      	nop
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	2000349c 	.word	0x2000349c
 8003f9c:	e000ed04 	.word	0xe000ed04

08003fa0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003fa6:	f3ef 8311 	mrs	r3, BASEPRI
 8003faa:	f04f 0120 	mov.w	r1, #32
 8003fae:	f381 8811 	msr	BASEPRI, r1
 8003fb2:	607b      	str	r3, [r7, #4]
 8003fb4:	4807      	ldr	r0, [pc, #28]	; (8003fd4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8003fb6:	f7ff fa31 	bl	800341c <_PreparePacket>
 8003fba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003fbc:	2203      	movs	r2, #3
 8003fbe:	6839      	ldr	r1, [r7, #0]
 8003fc0:	6838      	ldr	r0, [r7, #0]
 8003fc2:	f7ff fb0b 	bl	80035dc <_SendPacket>
  RECORD_END();
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f383 8811 	msr	BASEPRI, r3
}
 8003fcc:	bf00      	nop
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	2000349c 	.word	0x2000349c

08003fd8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003fde:	f3ef 8311 	mrs	r3, BASEPRI
 8003fe2:	f04f 0120 	mov.w	r1, #32
 8003fe6:	f381 8811 	msr	BASEPRI, r1
 8003fea:	607b      	str	r3, [r7, #4]
 8003fec:	4807      	ldr	r0, [pc, #28]	; (800400c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8003fee:	f7ff fa15 	bl	800341c <_PreparePacket>
 8003ff2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003ff4:	2212      	movs	r2, #18
 8003ff6:	6839      	ldr	r1, [r7, #0]
 8003ff8:	6838      	ldr	r0, [r7, #0]
 8003ffa:	f7ff faef 	bl	80035dc <_SendPacket>
  RECORD_END();
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f383 8811 	msr	BASEPRI, r3
}
 8004004:	bf00      	nop
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	2000349c 	.word	0x2000349c

08004010 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004016:	f3ef 8311 	mrs	r3, BASEPRI
 800401a:	f04f 0120 	mov.w	r1, #32
 800401e:	f381 8811 	msr	BASEPRI, r1
 8004022:	607b      	str	r3, [r7, #4]
 8004024:	4807      	ldr	r0, [pc, #28]	; (8004044 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004026:	f7ff f9f9 	bl	800341c <_PreparePacket>
 800402a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800402c:	2211      	movs	r2, #17
 800402e:	6839      	ldr	r1, [r7, #0]
 8004030:	6838      	ldr	r0, [r7, #0]
 8004032:	f7ff fad3 	bl	80035dc <_SendPacket>
  RECORD_END();
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f383 8811 	msr	BASEPRI, r3
}
 800403c:	bf00      	nop
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	2000349c 	.word	0x2000349c

08004048 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004050:	f3ef 8311 	mrs	r3, BASEPRI
 8004054:	f04f 0120 	mov.w	r1, #32
 8004058:	f381 8811 	msr	BASEPRI, r1
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	481a      	ldr	r0, [pc, #104]	; (80040c8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004060:	f7ff f9dc 	bl	800341c <_PreparePacket>
 8004064:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800406a:	4b18      	ldr	r3, [pc, #96]	; (80040cc <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	089b      	lsrs	r3, r3, #2
 8004074:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	61fb      	str	r3, [r7, #28]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	61bb      	str	r3, [r7, #24]
 800407e:	e00b      	b.n	8004098 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	b2da      	uxtb	r2, r3
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	1c59      	adds	r1, r3, #1
 8004088:	61f9      	str	r1, [r7, #28]
 800408a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	09db      	lsrs	r3, r3, #7
 8004096:	61bb      	str	r3, [r7, #24]
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	2b7f      	cmp	r3, #127	; 0x7f
 800409c:	d8f0      	bhi.n	8004080 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	61fa      	str	r2, [r7, #28]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80040ae:	2208      	movs	r2, #8
 80040b0:	68f9      	ldr	r1, [r7, #12]
 80040b2:	6938      	ldr	r0, [r7, #16]
 80040b4:	f7ff fa92 	bl	80035dc <_SendPacket>
  RECORD_END();
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f383 8811 	msr	BASEPRI, r3
}
 80040be:	bf00      	nop
 80040c0:	3720      	adds	r7, #32
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	2000349c 	.word	0x2000349c
 80040cc:	2000346c 	.word	0x2000346c

080040d0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80040d8:	f3ef 8311 	mrs	r3, BASEPRI
 80040dc:	f04f 0120 	mov.w	r1, #32
 80040e0:	f381 8811 	msr	BASEPRI, r1
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	481a      	ldr	r0, [pc, #104]	; (8004150 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80040e8:	f7ff f998 	bl	800341c <_PreparePacket>
 80040ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80040f2:	4b18      	ldr	r3, [pc, #96]	; (8004154 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	089b      	lsrs	r3, r3, #2
 80040fc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	61fb      	str	r3, [r7, #28]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	61bb      	str	r3, [r7, #24]
 8004106:	e00b      	b.n	8004120 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	b2da      	uxtb	r2, r3
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	1c59      	adds	r1, r3, #1
 8004110:	61f9      	str	r1, [r7, #28]
 8004112:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	701a      	strb	r2, [r3, #0]
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	09db      	lsrs	r3, r3, #7
 800411e:	61bb      	str	r3, [r7, #24]
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	2b7f      	cmp	r3, #127	; 0x7f
 8004124:	d8f0      	bhi.n	8004108 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	61fa      	str	r2, [r7, #28]
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004136:	2204      	movs	r2, #4
 8004138:	68f9      	ldr	r1, [r7, #12]
 800413a:	6938      	ldr	r0, [r7, #16]
 800413c:	f7ff fa4e 	bl	80035dc <_SendPacket>
  RECORD_END();
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f383 8811 	msr	BASEPRI, r3
}
 8004146:	bf00      	nop
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	2000349c 	.word	0x2000349c
 8004154:	2000346c 	.word	0x2000346c

08004158 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004158:	b580      	push	{r7, lr}
 800415a:	b088      	sub	sp, #32
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004160:	f3ef 8311 	mrs	r3, BASEPRI
 8004164:	f04f 0120 	mov.w	r1, #32
 8004168:	f381 8811 	msr	BASEPRI, r1
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	481a      	ldr	r0, [pc, #104]	; (80041d8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004170:	f7ff f954 	bl	800341c <_PreparePacket>
 8004174:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800417a:	4b18      	ldr	r3, [pc, #96]	; (80041dc <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	089b      	lsrs	r3, r3, #2
 8004184:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	61bb      	str	r3, [r7, #24]
 800418e:	e00b      	b.n	80041a8 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	b2da      	uxtb	r2, r3
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	1c59      	adds	r1, r3, #1
 8004198:	61f9      	str	r1, [r7, #28]
 800419a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	09db      	lsrs	r3, r3, #7
 80041a6:	61bb      	str	r3, [r7, #24]
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	2b7f      	cmp	r3, #127	; 0x7f
 80041ac:	d8f0      	bhi.n	8004190 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	1c5a      	adds	r2, r3, #1
 80041b2:	61fa      	str	r2, [r7, #28]
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80041be:	2206      	movs	r2, #6
 80041c0:	68f9      	ldr	r1, [r7, #12]
 80041c2:	6938      	ldr	r0, [r7, #16]
 80041c4:	f7ff fa0a 	bl	80035dc <_SendPacket>
  RECORD_END();
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f383 8811 	msr	BASEPRI, r3
}
 80041ce:	bf00      	nop
 80041d0:	3720      	adds	r7, #32
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	2000349c 	.word	0x2000349c
 80041dc:	2000346c 	.word	0x2000346c

080041e0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08c      	sub	sp, #48	; 0x30
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4603      	mov	r3, r0
 80041e8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80041ea:	4b3b      	ldr	r3, [pc, #236]	; (80042d8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d06d      	beq.n	80042ce <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80041f2:	4b39      	ldr	r3, [pc, #228]	; (80042d8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80041f8:	2300      	movs	r3, #0
 80041fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80041fc:	e008      	b.n	8004210 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80041fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004206:	2b00      	cmp	r3, #0
 8004208:	d007      	beq.n	800421a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800420a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420c:	3301      	adds	r3, #1
 800420e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004210:	79fb      	ldrb	r3, [r7, #7]
 8004212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004214:	429a      	cmp	r2, r3
 8004216:	d3f2      	bcc.n	80041fe <SEGGER_SYSVIEW_SendModule+0x1e>
 8004218:	e000      	b.n	800421c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800421a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800421c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421e:	2b00      	cmp	r3, #0
 8004220:	d055      	beq.n	80042ce <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004222:	f3ef 8311 	mrs	r3, BASEPRI
 8004226:	f04f 0120 	mov.w	r1, #32
 800422a:	f381 8811 	msr	BASEPRI, r1
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	482a      	ldr	r0, [pc, #168]	; (80042dc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004232:	f7ff f8f3 	bl	800341c <_PreparePacket>
 8004236:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
 8004240:	79fb      	ldrb	r3, [r7, #7]
 8004242:	623b      	str	r3, [r7, #32]
 8004244:	e00b      	b.n	800425e <SEGGER_SYSVIEW_SendModule+0x7e>
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	b2da      	uxtb	r2, r3
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	1c59      	adds	r1, r3, #1
 800424e:	6279      	str	r1, [r7, #36]	; 0x24
 8004250:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	701a      	strb	r2, [r3, #0]
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	09db      	lsrs	r3, r3, #7
 800425c:	623b      	str	r3, [r7, #32]
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	2b7f      	cmp	r3, #127	; 0x7f
 8004262:	d8f0      	bhi.n	8004246 <SEGGER_SYSVIEW_SendModule+0x66>
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	627a      	str	r2, [r7, #36]	; 0x24
 800426a:	6a3a      	ldr	r2, [r7, #32]
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	701a      	strb	r2, [r3, #0]
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	61fb      	str	r3, [r7, #28]
 8004278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	61bb      	str	r3, [r7, #24]
 800427e:	e00b      	b.n	8004298 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	b2da      	uxtb	r2, r3
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	1c59      	adds	r1, r3, #1
 8004288:	61f9      	str	r1, [r7, #28]
 800428a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	701a      	strb	r2, [r3, #0]
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	09db      	lsrs	r3, r3, #7
 8004296:	61bb      	str	r3, [r7, #24]
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	2b7f      	cmp	r3, #127	; 0x7f
 800429c:	d8f0      	bhi.n	8004280 <SEGGER_SYSVIEW_SendModule+0xa0>
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	61fa      	str	r2, [r7, #28]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	701a      	strb	r2, [r3, #0]
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80042ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2280      	movs	r2, #128	; 0x80
 80042b4:	4619      	mov	r1, r3
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f7ff f864 	bl	8003384 <_EncodeStr>
 80042bc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80042be:	2216      	movs	r2, #22
 80042c0:	68f9      	ldr	r1, [r7, #12]
 80042c2:	6938      	ldr	r0, [r7, #16]
 80042c4:	f7ff f98a 	bl	80035dc <_SendPacket>
      RECORD_END();
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80042ce:	bf00      	nop
 80042d0:	3730      	adds	r7, #48	; 0x30
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20003494 	.word	0x20003494
 80042dc:	2000349c 	.word	0x2000349c

080042e0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80042e6:	4b0c      	ldr	r3, [pc, #48]	; (8004318 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00f      	beq.n	800430e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80042ee:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f2      	bne.n	80042f4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800430e:	bf00      	nop
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20003494 	.word	0x20003494

0800431c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004322:	f3ef 8311 	mrs	r3, BASEPRI
 8004326:	f04f 0120 	mov.w	r1, #32
 800432a:	f381 8811 	msr	BASEPRI, r1
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	4817      	ldr	r0, [pc, #92]	; (8004390 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004332:	f7ff f873 	bl	800341c <_PreparePacket>
 8004336:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	4b14      	ldr	r3, [pc, #80]	; (8004394 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	e00b      	b.n	8004360 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	b2da      	uxtb	r2, r3
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	1c59      	adds	r1, r3, #1
 8004350:	6179      	str	r1, [r7, #20]
 8004352:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	701a      	strb	r2, [r3, #0]
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	09db      	lsrs	r3, r3, #7
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	2b7f      	cmp	r3, #127	; 0x7f
 8004364:	d8f0      	bhi.n	8004348 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	617a      	str	r2, [r7, #20]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	701a      	strb	r2, [r3, #0]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004376:	221b      	movs	r2, #27
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	68b8      	ldr	r0, [r7, #8]
 800437c:	f7ff f92e 	bl	80035dc <_SendPacket>
  RECORD_END();
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f383 8811 	msr	BASEPRI, r3
}
 8004386:	bf00      	nop
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	2000349c 	.word	0x2000349c
 8004394:	20003498 	.word	0x20003498

08004398 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004398:	b580      	push	{r7, lr}
 800439a:	b08a      	sub	sp, #40	; 0x28
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80043a0:	f3ef 8311 	mrs	r3, BASEPRI
 80043a4:	f04f 0120 	mov.w	r1, #32
 80043a8:	f381 8811 	msr	BASEPRI, r1
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	4827      	ldr	r0, [pc, #156]	; (800444c <SEGGER_SYSVIEW_Warn+0xb4>)
 80043b0:	f7ff f834 	bl	800341c <_PreparePacket>
 80043b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80043b6:	2280      	movs	r2, #128	; 0x80
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	6938      	ldr	r0, [r7, #16]
 80043bc:	f7fe ffe2 	bl	8003384 <_EncodeStr>
 80043c0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
 80043c6:	2301      	movs	r3, #1
 80043c8:	623b      	str	r3, [r7, #32]
 80043ca:	e00b      	b.n	80043e4 <SEGGER_SYSVIEW_Warn+0x4c>
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	1c59      	adds	r1, r3, #1
 80043d4:	6279      	str	r1, [r7, #36]	; 0x24
 80043d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	701a      	strb	r2, [r3, #0]
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	09db      	lsrs	r3, r3, #7
 80043e2:	623b      	str	r3, [r7, #32]
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	2b7f      	cmp	r3, #127	; 0x7f
 80043e8:	d8f0      	bhi.n	80043cc <SEGGER_SYSVIEW_Warn+0x34>
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	627a      	str	r2, [r7, #36]	; 0x24
 80043f0:	6a3a      	ldr	r2, [r7, #32]
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	61fb      	str	r3, [r7, #28]
 80043fe:	2300      	movs	r3, #0
 8004400:	61bb      	str	r3, [r7, #24]
 8004402:	e00b      	b.n	800441c <SEGGER_SYSVIEW_Warn+0x84>
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	b2da      	uxtb	r2, r3
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	1c59      	adds	r1, r3, #1
 800440c:	61f9      	str	r1, [r7, #28]
 800440e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	701a      	strb	r2, [r3, #0]
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	09db      	lsrs	r3, r3, #7
 800441a:	61bb      	str	r3, [r7, #24]
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	2b7f      	cmp	r3, #127	; 0x7f
 8004420:	d8f0      	bhi.n	8004404 <SEGGER_SYSVIEW_Warn+0x6c>
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	61fa      	str	r2, [r7, #28]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004432:	221a      	movs	r2, #26
 8004434:	68f9      	ldr	r1, [r7, #12]
 8004436:	6938      	ldr	r0, [r7, #16]
 8004438:	f7ff f8d0 	bl	80035dc <_SendPacket>
  RECORD_END();
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f383 8811 	msr	BASEPRI, r3
}
 8004442:	bf00      	nop
 8004444:	3728      	adds	r7, #40	; 0x28
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	2000349c 	.word	0x2000349c

08004450 <__libc_init_array>:
 8004450:	b570      	push	{r4, r5, r6, lr}
 8004452:	2600      	movs	r6, #0
 8004454:	4d0c      	ldr	r5, [pc, #48]	; (8004488 <__libc_init_array+0x38>)
 8004456:	4c0d      	ldr	r4, [pc, #52]	; (800448c <__libc_init_array+0x3c>)
 8004458:	1b64      	subs	r4, r4, r5
 800445a:	10a4      	asrs	r4, r4, #2
 800445c:	42a6      	cmp	r6, r4
 800445e:	d109      	bne.n	8004474 <__libc_init_array+0x24>
 8004460:	f000 f83e 	bl	80044e0 <_init>
 8004464:	2600      	movs	r6, #0
 8004466:	4d0a      	ldr	r5, [pc, #40]	; (8004490 <__libc_init_array+0x40>)
 8004468:	4c0a      	ldr	r4, [pc, #40]	; (8004494 <__libc_init_array+0x44>)
 800446a:	1b64      	subs	r4, r4, r5
 800446c:	10a4      	asrs	r4, r4, #2
 800446e:	42a6      	cmp	r6, r4
 8004470:	d105      	bne.n	800447e <__libc_init_array+0x2e>
 8004472:	bd70      	pop	{r4, r5, r6, pc}
 8004474:	f855 3b04 	ldr.w	r3, [r5], #4
 8004478:	4798      	blx	r3
 800447a:	3601      	adds	r6, #1
 800447c:	e7ee      	b.n	800445c <__libc_init_array+0xc>
 800447e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004482:	4798      	blx	r3
 8004484:	3601      	adds	r6, #1
 8004486:	e7f2      	b.n	800446e <__libc_init_array+0x1e>
 8004488:	08004610 	.word	0x08004610
 800448c:	08004610 	.word	0x08004610
 8004490:	08004610 	.word	0x08004610
 8004494:	08004614 	.word	0x08004614

08004498 <memcmp>:
 8004498:	b530      	push	{r4, r5, lr}
 800449a:	2400      	movs	r4, #0
 800449c:	3901      	subs	r1, #1
 800449e:	42a2      	cmp	r2, r4
 80044a0:	d101      	bne.n	80044a6 <memcmp+0xe>
 80044a2:	2000      	movs	r0, #0
 80044a4:	e005      	b.n	80044b2 <memcmp+0x1a>
 80044a6:	5d03      	ldrb	r3, [r0, r4]
 80044a8:	3401      	adds	r4, #1
 80044aa:	5d0d      	ldrb	r5, [r1, r4]
 80044ac:	42ab      	cmp	r3, r5
 80044ae:	d0f6      	beq.n	800449e <memcmp+0x6>
 80044b0:	1b58      	subs	r0, r3, r5
 80044b2:	bd30      	pop	{r4, r5, pc}

080044b4 <memcpy>:
 80044b4:	440a      	add	r2, r1
 80044b6:	4291      	cmp	r1, r2
 80044b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80044bc:	d100      	bne.n	80044c0 <memcpy+0xc>
 80044be:	4770      	bx	lr
 80044c0:	b510      	push	{r4, lr}
 80044c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044c6:	4291      	cmp	r1, r2
 80044c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044cc:	d1f9      	bne.n	80044c2 <memcpy+0xe>
 80044ce:	bd10      	pop	{r4, pc}

080044d0 <memset>:
 80044d0:	4603      	mov	r3, r0
 80044d2:	4402      	add	r2, r0
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d100      	bne.n	80044da <memset+0xa>
 80044d8:	4770      	bx	lr
 80044da:	f803 1b01 	strb.w	r1, [r3], #1
 80044de:	e7f9      	b.n	80044d4 <memset+0x4>

080044e0 <_init>:
 80044e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e2:	bf00      	nop
 80044e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e6:	bc08      	pop	{r3}
 80044e8:	469e      	mov	lr, r3
 80044ea:	4770      	bx	lr

080044ec <_fini>:
 80044ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ee:	bf00      	nop
 80044f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044f2:	bc08      	pop	{r3}
 80044f4:	469e      	mov	lr, r3
 80044f6:	4770      	bx	lr
