
RTOS_TASK_NOTIFY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000516c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800527c  0800527c  0001527c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005364  08005364  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005364  08005364  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005364  08005364  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005364  08005364  00015364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005368  08005368  00015368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800536c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a18  20000074  080053e0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a8c  080053e0  00021a8c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018232  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000344e  00000000  00000000  000382cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  0003b720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  0003ca28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d69  00000000  00000000  0003dbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c86  00000000  00000000  00057921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093fb8  00000000  00000000  0006c5a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010055f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005278  00000000  00000000  001005b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005264 	.word	0x08005264

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005264 	.word	0x08005264

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000166:	4a10      	ldr	r2, [pc, #64]	; (80001a8 <MX_FREERTOS_Init+0x48>)
 8000168:	2100      	movs	r1, #0
 800016a:	4810      	ldr	r0, [pc, #64]	; (80001ac <MX_FREERTOS_Init+0x4c>)
 800016c:	f001 fea2 	bl	8001eb4 <osThreadNew>
 8000170:	4603      	mov	r3, r0
 8000172:	4a0f      	ldr	r2, [pc, #60]	; (80001b0 <MX_FREERTOS_Init+0x50>)
 8000174:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate( LedTaskHandler, "LED-Task", 300u, NULL, (osPriority_t) osPriorityNormal, &LedTask);
 8000176:	4b0f      	ldr	r3, [pc, #60]	; (80001b4 <MX_FREERTOS_Init+0x54>)
 8000178:	9301      	str	r3, [sp, #4]
 800017a:	2318      	movs	r3, #24
 800017c:	9300      	str	r3, [sp, #0]
 800017e:	2300      	movs	r3, #0
 8000180:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000184:	490c      	ldr	r1, [pc, #48]	; (80001b8 <MX_FREERTOS_Init+0x58>)
 8000186:	480d      	ldr	r0, [pc, #52]	; (80001bc <MX_FREERTOS_Init+0x5c>)
 8000188:	f002 fd8e 	bl	8002ca8 <xTaskCreate>
  xTaskCreate( BtnTaskHandler, "Btn-Task", 300u, NULL,  (osPriority_t) osPriorityNormal, &BtnTask);
 800018c:	4b0c      	ldr	r3, [pc, #48]	; (80001c0 <MX_FREERTOS_Init+0x60>)
 800018e:	9301      	str	r3, [sp, #4]
 8000190:	2318      	movs	r3, #24
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2300      	movs	r3, #0
 8000196:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800019a:	490a      	ldr	r1, [pc, #40]	; (80001c4 <MX_FREERTOS_Init+0x64>)
 800019c:	480a      	ldr	r0, [pc, #40]	; (80001c8 <MX_FREERTOS_Init+0x68>)
 800019e:	f002 fd83 	bl	8002ca8 <xTaskCreate>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001a2:	bf00      	nop
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	080052f4 	.word	0x080052f4
 80001ac:	080001cd 	.word	0x080001cd
 80001b0:	200019ac 	.word	0x200019ac
 80001b4:	20000090 	.word	0x20000090
 80001b8:	08005288 	.word	0x08005288
 80001bc:	080001e1 	.word	0x080001e1
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08005294 	.word	0x08005294
 80001c8:	08000235 	.word	0x08000235

080001cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000u);
 80001d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001d8:	f001 ff16 	bl	8002008 <osDelay>
 80001dc:	e7fa      	b.n	80001d4 <StartDefaultTask+0x8>
	...

080001e0 <LedTaskHandler>:
  /* USER CODE END StartDefaultTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void LedTaskHandler( void *argument){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b08c      	sub	sp, #48	; 0x30
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
	char message[30];
	uint32_t u32Count= 0;
 80001e8:	2300      	movs	r3, #0
 80001ea:	60fb      	str	r3, [r7, #12]
	while(1){
		/* confirm receive notify */
		if( pdTRUE == xTaskNotifyWait(0, 0, &u32Count, portMAX_DELAY) ){
 80001ec:	f107 020c 	add.w	r2, r7, #12
 80001f0:	f04f 33ff 	mov.w	r3, #4294967295
 80001f4:	2100      	movs	r1, #0
 80001f6:	2000      	movs	r0, #0
 80001f8:	f003 fb9e 	bl	8003938 <xTaskNotifyWait>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b01      	cmp	r3, #1
 8000200:	d1f4      	bne.n	80001ec <LedTaskHandler+0xc>
			sprintf(message, "The count is: %ld\n",u32Count);
 8000202:	68fa      	ldr	r2, [r7, #12]
 8000204:	f107 0310 	add.w	r3, r7, #16
 8000208:	4908      	ldr	r1, [pc, #32]	; (800022c <LedTaskHandler+0x4c>)
 800020a:	4618      	mov	r0, r3
 800020c:	f004 fbfe 	bl	8004a0c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), 10u);
 8000210:	f107 0310 	add.w	r3, r7, #16
 8000214:	4618      	mov	r0, r3
 8000216:	f7ff ff9b 	bl	8000150 <strlen>
 800021a:	4603      	mov	r3, r0
 800021c:	b29a      	uxth	r2, r3
 800021e:	f107 0110 	add.w	r1, r7, #16
 8000222:	230a      	movs	r3, #10
 8000224:	4802      	ldr	r0, [pc, #8]	; (8000230 <LedTaskHandler+0x50>)
 8000226:	f001 fc74 	bl	8001b12 <HAL_UART_Transmit>
		if( pdTRUE == xTaskNotifyWait(0, 0, &u32Count, portMAX_DELAY) ){
 800022a:	e7df      	b.n	80001ec <LedTaskHandler+0xc>
 800022c:	080052a0 	.word	0x080052a0
 8000230:	200019f8 	.word	0x200019f8

08000234 <BtnTaskHandler>:
		}
	}
}

void BtnTaskHandler( void *argument){
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	while(1){
		if( 0u == HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) ){
 800023c:	2101      	movs	r1, #1
 800023e:	4815      	ldr	r0, [pc, #84]	; (8000294 <BtnTaskHandler+0x60>)
 8000240:	f000 fd56 	bl	8000cf0 <HAL_GPIO_ReadPin>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d1f8      	bne.n	800023c <BtnTaskHandler+0x8>
			rtosDelay(200u);
 800024a:	20c8      	movs	r0, #200	; 0xc8
 800024c:	f000 f826 	bl	800029c <rtosDelay>
			if( 0u == HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) ){
 8000250:	2101      	movs	r1, #1
 8000252:	4810      	ldr	r0, [pc, #64]	; (8000294 <BtnTaskHandler+0x60>)
 8000254:	f000 fd4c 	bl	8000cf0 <HAL_GPIO_ReadPin>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d1ee      	bne.n	800023c <BtnTaskHandler+0x8>
				rtosDelay(200u);
 800025e:	20c8      	movs	r0, #200	; 0xc8
 8000260:	f000 f81c 	bl	800029c <rtosDelay>
				xTaskNotify(LedTask, 0u, eIncrement);
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <BtnTaskHandler+0x64>)
 8000266:	6818      	ldr	r0, [r3, #0]
 8000268:	2300      	movs	r3, #0
 800026a:	2202      	movs	r2, #2
 800026c:	2100      	movs	r1, #0
 800026e:	f003 fbbd 	bl	80039ec <xTaskGenericNotify>
				xTaskNotify(LedTask, 6u, eSetValueWithoutOverwrite);
 8000272:	4b09      	ldr	r3, [pc, #36]	; (8000298 <BtnTaskHandler+0x64>)
 8000274:	6818      	ldr	r0, [r3, #0]
 8000276:	2300      	movs	r3, #0
 8000278:	2204      	movs	r2, #4
 800027a:	2106      	movs	r1, #6
 800027c:	f003 fbb6 	bl	80039ec <xTaskGenericNotify>
				while( 0u == HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) );
 8000280:	bf00      	nop
 8000282:	2101      	movs	r1, #1
 8000284:	4803      	ldr	r0, [pc, #12]	; (8000294 <BtnTaskHandler+0x60>)
 8000286:	f000 fd33 	bl	8000cf0 <HAL_GPIO_ReadPin>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d0f8      	beq.n	8000282 <BtnTaskHandler+0x4e>
		if( 0u == HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) ){
 8000290:	e7d4      	b.n	800023c <BtnTaskHandler+0x8>
 8000292:	bf00      	nop
 8000294:	40010800 	.word	0x40010800
 8000298:	20000090 	.word	0x20000090

0800029c <rtosDelay>:
			}
		}
	}
}

void rtosDelay( uint32_t u32DelayMs ){
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	/* convert second to tick */
	uint32_t u32CurrentTick = xTaskGetTickCount();
 80002a4:	f002 ff82 	bl	80031ac <xTaskGetTickCount>
 80002a8:	60f8      	str	r0, [r7, #12]
	uint32_t u32TickSet= u32DelayMs /1000 * configTICK_RATE_HZ;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a0b      	ldr	r2, [pc, #44]	; (80002dc <rtosDelay+0x40>)
 80002ae:	fba2 2303 	umull	r2, r3, r2, r3
 80002b2:	099b      	lsrs	r3, r3, #6
 80002b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002b8:	fb02 f303 	mul.w	r3, r2, r3
 80002bc:	60bb      	str	r3, [r7, #8]

	/* start to delay block */
	while( xTaskGetTickCount() < (u32CurrentTick + u32TickSet) );
 80002be:	bf00      	nop
 80002c0:	f002 ff74 	bl	80031ac <xTaskGetTickCount>
 80002c4:	4601      	mov	r1, r0
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	4413      	add	r3, r2
 80002cc:	4299      	cmp	r1, r3
 80002ce:	d3f7      	bcc.n	80002c0 <rtosDelay+0x24>
}
 80002d0:	bf00      	nop
 80002d2:	bf00      	nop
 80002d4:	3710      	adds	r7, #16
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	10624dd3 	.word	0x10624dd3

080002e0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b088      	sub	sp, #32
 80002e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e6:	f107 0310 	add.w	r3, r7, #16
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f4:	4b35      	ldr	r3, [pc, #212]	; (80003cc <MX_GPIO_Init+0xec>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a34      	ldr	r2, [pc, #208]	; (80003cc <MX_GPIO_Init+0xec>)
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b32      	ldr	r3, [pc, #200]	; (80003cc <MX_GPIO_Init+0xec>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0310 	and.w	r3, r3, #16
 8000308:	60fb      	str	r3, [r7, #12]
 800030a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800030c:	4b2f      	ldr	r3, [pc, #188]	; (80003cc <MX_GPIO_Init+0xec>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a2e      	ldr	r2, [pc, #184]	; (80003cc <MX_GPIO_Init+0xec>)
 8000312:	f043 0320 	orr.w	r3, r3, #32
 8000316:	6193      	str	r3, [r2, #24]
 8000318:	4b2c      	ldr	r3, [pc, #176]	; (80003cc <MX_GPIO_Init+0xec>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	f003 0320 	and.w	r3, r3, #32
 8000320:	60bb      	str	r3, [r7, #8]
 8000322:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000324:	4b29      	ldr	r3, [pc, #164]	; (80003cc <MX_GPIO_Init+0xec>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a28      	ldr	r2, [pc, #160]	; (80003cc <MX_GPIO_Init+0xec>)
 800032a:	f043 0304 	orr.w	r3, r3, #4
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b26      	ldr	r3, [pc, #152]	; (80003cc <MX_GPIO_Init+0xec>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0304 	and.w	r3, r3, #4
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800033c:	4b23      	ldr	r3, [pc, #140]	; (80003cc <MX_GPIO_Init+0xec>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a22      	ldr	r2, [pc, #136]	; (80003cc <MX_GPIO_Init+0xec>)
 8000342:	f043 0308 	orr.w	r3, r3, #8
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b20      	ldr	r3, [pc, #128]	; (80003cc <MX_GPIO_Init+0xec>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0308 	and.w	r3, r3, #8
 8000350:	603b      	str	r3, [r7, #0]
 8000352:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800035a:	481d      	ldr	r0, [pc, #116]	; (80003d0 <MX_GPIO_Init+0xf0>)
 800035c:	f000 fcdf 	bl	8000d1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000364:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000366:	2301      	movs	r3, #1
 8000368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036a:	2300      	movs	r3, #0
 800036c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036e:	2302      	movs	r3, #2
 8000370:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000372:	f107 0310 	add.w	r3, r7, #16
 8000376:	4619      	mov	r1, r3
 8000378:	4815      	ldr	r0, [pc, #84]	; (80003d0 <MX_GPIO_Init+0xf0>)
 800037a:	f000 fb35 	bl	80009e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BtnLed_Pin;
 800037e:	2301      	movs	r3, #1
 8000380:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000386:	2301      	movs	r3, #1
 8000388:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BtnLed_GPIO_Port, &GPIO_InitStruct);
 800038a:	f107 0310 	add.w	r3, r7, #16
 800038e:	4619      	mov	r1, r3
 8000390:	4810      	ldr	r0, [pc, #64]	; (80003d4 <MX_GPIO_Init+0xf4>)
 8000392:	f000 fb29 	bl	80009e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA5 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000396:	f649 73f2 	movw	r3, #40946	; 0x9ff2
 800039a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800039c:	2303      	movs	r3, #3
 800039e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a0:	f107 0310 	add.w	r3, r7, #16
 80003a4:	4619      	mov	r1, r3
 80003a6:	480b      	ldr	r0, [pc, #44]	; (80003d4 <MX_GPIO_Init+0xf4>)
 80003a8:	f000 fb1e 	bl	80009e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80003ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003b0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003b2:	2303      	movs	r3, #3
 80003b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003b6:	f107 0310 	add.w	r3, r7, #16
 80003ba:	4619      	mov	r1, r3
 80003bc:	4806      	ldr	r0, [pc, #24]	; (80003d8 <MX_GPIO_Init+0xf8>)
 80003be:	f000 fb13 	bl	80009e8 <HAL_GPIO_Init>

}
 80003c2:	bf00      	nop
 80003c4:	3720      	adds	r7, #32
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40011000 	.word	0x40011000
 80003d4:	40010800 	.word	0x40010800
 80003d8:	40010c00 	.word	0x40010c00

080003dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e0:	f000 f9f0 	bl	80007c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e4:	f000 f816 	bl	8000414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e8:	f7ff ff7a 	bl	80002e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003ec:	f000 f950 	bl	8000690 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, "Start func RTOS notify\n", 24u, 100u);
 80003f0:	2364      	movs	r3, #100	; 0x64
 80003f2:	2218      	movs	r2, #24
 80003f4:	4905      	ldr	r1, [pc, #20]	; (800040c <main+0x30>)
 80003f6:	4806      	ldr	r0, [pc, #24]	; (8000410 <main+0x34>)
 80003f8:	f001 fb8b 	bl	8001b12 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80003fc:	f001 fcf4 	bl	8001de8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000400:	f7ff feae 	bl	8000160 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000404:	f001 fd22 	bl	8001e4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000408:	e7fe      	b.n	8000408 <main+0x2c>
 800040a:	bf00      	nop
 800040c:	080052b4 	.word	0x080052b4
 8000410:	200019f8 	.word	0x200019f8

08000414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b090      	sub	sp, #64	; 0x40
 8000418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041a:	f107 0318 	add.w	r3, r7, #24
 800041e:	2228      	movs	r2, #40	; 0x28
 8000420:	2100      	movs	r1, #0
 8000422:	4618      	mov	r0, r3
 8000424:	f004 faea 	bl	80049fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]
 8000434:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000436:	2302      	movs	r3, #2
 8000438:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800043a:	2301      	movs	r3, #1
 800043c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800043e:	2310      	movs	r3, #16
 8000440:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000442:	2300      	movs	r3, #0
 8000444:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000446:	f107 0318 	add.w	r3, r7, #24
 800044a:	4618      	mov	r0, r3
 800044c:	f000 fc80 	bl	8000d50 <HAL_RCC_OscConfig>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000456:	f000 f82b 	bl	80004b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800045a:	230f      	movs	r3, #15
 800045c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800045e:	2300      	movs	r3, #0
 8000460:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000462:	2300      	movs	r3, #0
 8000464:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000466:	2300      	movs	r3, #0
 8000468:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f000 feec 	bl	8001250 <HAL_RCC_ClockConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800047e:	f000 f817 	bl	80004b0 <Error_Handler>
  }
}
 8000482:	bf00      	nop
 8000484:	3740      	adds	r7, #64	; 0x40
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
	...

0800048c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a04      	ldr	r2, [pc, #16]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d101      	bne.n	80004a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800049e:	f000 f9a7 	bl	80007f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40000400 	.word	0x40000400

080004b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b4:	b672      	cpsid	i
}
 80004b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <Error_Handler+0x8>
	...

080004bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004c2:	4b18      	ldr	r3, [pc, #96]	; (8000524 <HAL_MspInit+0x68>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	4a17      	ldr	r2, [pc, #92]	; (8000524 <HAL_MspInit+0x68>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	6193      	str	r3, [r2, #24]
 80004ce:	4b15      	ldr	r3, [pc, #84]	; (8000524 <HAL_MspInit+0x68>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004da:	4b12      	ldr	r3, [pc, #72]	; (8000524 <HAL_MspInit+0x68>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	4a11      	ldr	r2, [pc, #68]	; (8000524 <HAL_MspInit+0x68>)
 80004e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004e4:	61d3      	str	r3, [r2, #28]
 80004e6:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <HAL_MspInit+0x68>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	210f      	movs	r1, #15
 80004f6:	f06f 0001 	mvn.w	r0, #1
 80004fa:	f000 fa4a 	bl	8000992 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004fe:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <HAL_MspInit+0x6c>)
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	4a04      	ldr	r2, [pc, #16]	; (8000528 <HAL_MspInit+0x6c>)
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051a:	bf00      	nop
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000
 8000528:	40010000 	.word	0x40010000

0800052c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08c      	sub	sp, #48	; 0x30
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 800053c:	2200      	movs	r2, #0
 800053e:	6879      	ldr	r1, [r7, #4]
 8000540:	201d      	movs	r0, #29
 8000542:	f000 fa26 	bl	8000992 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000546:	201d      	movs	r0, #29
 8000548:	f000 fa3f 	bl	80009ca <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800054c:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <HAL_InitTick+0x9c>)
 800054e:	69db      	ldr	r3, [r3, #28]
 8000550:	4a1d      	ldr	r2, [pc, #116]	; (80005c8 <HAL_InitTick+0x9c>)
 8000552:	f043 0302 	orr.w	r3, r3, #2
 8000556:	61d3      	str	r3, [r2, #28]
 8000558:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <HAL_InitTick+0x9c>)
 800055a:	69db      	ldr	r3, [r3, #28]
 800055c:	f003 0302 	and.w	r3, r3, #2
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000564:	f107 0210 	add.w	r2, r7, #16
 8000568:	f107 0314 	add.w	r3, r7, #20
 800056c:	4611      	mov	r1, r2
 800056e:	4618      	mov	r0, r3
 8000570:	f000 ffea 	bl	8001548 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000574:	f000 ffc0 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 8000578:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800057a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800057c:	4a13      	ldr	r2, [pc, #76]	; (80005cc <HAL_InitTick+0xa0>)
 800057e:	fba2 2303 	umull	r2, r3, r2, r3
 8000582:	0c9b      	lsrs	r3, r3, #18
 8000584:	3b01      	subs	r3, #1
 8000586:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <HAL_InitTick+0xa4>)
 800058a:	4a12      	ldr	r2, [pc, #72]	; (80005d4 <HAL_InitTick+0xa8>)
 800058c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <HAL_InitTick+0xa4>)
 8000590:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000594:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000596:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <HAL_InitTick+0xa4>)
 8000598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800059a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <HAL_InitTick+0xa4>)
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_InitTick+0xa4>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80005a8:	4809      	ldr	r0, [pc, #36]	; (80005d0 <HAL_InitTick+0xa4>)
 80005aa:	f001 f81b 	bl	80015e4 <HAL_TIM_Base_Init>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d104      	bne.n	80005be <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80005b4:	4806      	ldr	r0, [pc, #24]	; (80005d0 <HAL_InitTick+0xa4>)
 80005b6:	f001 f86d 	bl	8001694 <HAL_TIM_Base_Start_IT>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e000      	b.n	80005c0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80005be:	2301      	movs	r3, #1
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3730      	adds	r7, #48	; 0x30
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40021000 	.word	0x40021000
 80005cc:	431bde83 	.word	0x431bde83
 80005d0:	200019b0 	.word	0x200019b0
 80005d4:	40000400 	.word	0x40000400

080005d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <NMI_Handler+0x4>

080005de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <HardFault_Handler+0x4>

080005e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <MemManage_Handler+0x4>

080005ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <BusFault_Handler+0x4>

080005f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <UsageFault_Handler+0x4>

080005f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr
	...

08000604 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000608:	4802      	ldr	r0, [pc, #8]	; (8000614 <TIM3_IRQHandler+0x10>)
 800060a:	f001 f895 	bl	8001738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200019b0 	.word	0x200019b0

08000618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000620:	4a14      	ldr	r2, [pc, #80]	; (8000674 <_sbrk+0x5c>)
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <_sbrk+0x60>)
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800062c:	4b13      	ldr	r3, [pc, #76]	; (800067c <_sbrk+0x64>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d102      	bne.n	800063a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <_sbrk+0x64>)
 8000636:	4a12      	ldr	r2, [pc, #72]	; (8000680 <_sbrk+0x68>)
 8000638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <_sbrk+0x64>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4413      	add	r3, r2
 8000642:	693a      	ldr	r2, [r7, #16]
 8000644:	429a      	cmp	r2, r3
 8000646:	d207      	bcs.n	8000658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000648:	f004 f9a0 	bl	800498c <__errno>
 800064c:	4603      	mov	r3, r0
 800064e:	220c      	movs	r2, #12
 8000650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	e009      	b.n	800066c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <_sbrk+0x64>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800065e:	4b07      	ldr	r3, [pc, #28]	; (800067c <_sbrk+0x64>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	4a05      	ldr	r2, [pc, #20]	; (800067c <_sbrk+0x64>)
 8000668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800066a:	68fb      	ldr	r3, [r7, #12]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3718      	adds	r7, #24
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20005000 	.word	0x20005000
 8000678:	00000400 	.word	0x00000400
 800067c:	20000098 	.word	0x20000098
 8000680:	20001a90 	.word	0x20001a90

08000684 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 8000696:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_USART2_UART_Init+0x50>)
 8000698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 800069c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006c8:	f001 f9d6 	bl	8001a78 <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006d2:	f7ff feed 	bl	80004b0 <Error_Handler>
  }

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	200019f8 	.word	0x200019f8
 80006e0:	40004400 	.word	0x40004400

080006e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a1b      	ldr	r2, [pc, #108]	; (800076c <HAL_UART_MspInit+0x88>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d12f      	bne.n	8000764 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000704:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <HAL_UART_MspInit+0x8c>)
 8000706:	69db      	ldr	r3, [r3, #28]
 8000708:	4a19      	ldr	r2, [pc, #100]	; (8000770 <HAL_UART_MspInit+0x8c>)
 800070a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800070e:	61d3      	str	r3, [r2, #28]
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <HAL_UART_MspInit+0x8c>)
 8000712:	69db      	ldr	r3, [r3, #28]
 8000714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <HAL_UART_MspInit+0x8c>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a13      	ldr	r2, [pc, #76]	; (8000770 <HAL_UART_MspInit+0x8c>)
 8000722:	f043 0304 	orr.w	r3, r3, #4
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <HAL_UART_MspInit+0x8c>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f003 0304 	and.w	r3, r3, #4
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000734:	2304      	movs	r3, #4
 8000736:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000738:	2302      	movs	r3, #2
 800073a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	4619      	mov	r1, r3
 8000746:	480b      	ldr	r0, [pc, #44]	; (8000774 <HAL_UART_MspInit+0x90>)
 8000748:	f000 f94e 	bl	80009e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800074c:	2308      	movs	r3, #8
 800074e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	4619      	mov	r1, r3
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <HAL_UART_MspInit+0x90>)
 8000760:	f000 f942 	bl	80009e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000764:	bf00      	nop
 8000766:	3720      	adds	r7, #32
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40004400 	.word	0x40004400
 8000770:	40021000 	.word	0x40021000
 8000774:	40010800 	.word	0x40010800

08000778 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000778:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800077a:	e003      	b.n	8000784 <LoopCopyDataInit>

0800077c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800077e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000780:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000782:	3104      	adds	r1, #4

08000784 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000784:	480a      	ldr	r0, [pc, #40]	; (80007b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000788:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800078a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800078c:	d3f6      	bcc.n	800077c <CopyDataInit>
  ldr r2, =_sbss
 800078e:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000790:	e002      	b.n	8000798 <LoopFillZerobss>

08000792 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000794:	f842 3b04 	str.w	r3, [r2], #4

08000798 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800079a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800079c:	d3f9      	bcc.n	8000792 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800079e:	f7ff ff71 	bl	8000684 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007a2:	f004 f8f9 	bl	8004998 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007a6:	f7ff fe19 	bl	80003dc <main>
  bx lr
 80007aa:	4770      	bx	lr
  ldr r3, =_sidata
 80007ac:	0800536c 	.word	0x0800536c
  ldr r0, =_sdata
 80007b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007b4:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 80007b8:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 80007bc:	20001a8c 	.word	0x20001a8c

080007c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c0:	e7fe      	b.n	80007c0 <ADC1_2_IRQHandler>
	...

080007c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <HAL_Init+0x28>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a07      	ldr	r2, [pc, #28]	; (80007ec <HAL_Init+0x28>)
 80007ce:	f043 0310 	orr.w	r3, r3, #16
 80007d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d4:	2003      	movs	r0, #3
 80007d6:	f000 f8d1 	bl	800097c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff fea6 	bl	800052c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e0:	f7ff fe6c 	bl	80004bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e4:	2300      	movs	r3, #0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40022000 	.word	0x40022000

080007f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <HAL_IncTick+0x1c>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b05      	ldr	r3, [pc, #20]	; (8000810 <HAL_IncTick+0x20>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	4a03      	ldr	r2, [pc, #12]	; (8000810 <HAL_IncTick+0x20>)
 8000802:	6013      	str	r3, [r2, #0]
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	20000008 	.word	0x20000008
 8000810:	20001a38 	.word	0x20001a38

08000814 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  return uwTick;
 8000818:	4b02      	ldr	r3, [pc, #8]	; (8000824 <HAL_GetTick+0x10>)
 800081a:	681b      	ldr	r3, [r3, #0]
}
 800081c:	4618      	mov	r0, r3
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	20001a38 	.word	0x20001a38

08000828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000844:	4013      	ands	r3, r2
 8000846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085a:	4a04      	ldr	r2, [pc, #16]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	60d3      	str	r3, [r2, #12]
}
 8000860:	bf00      	nop
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <__NVIC_GetPriorityGrouping+0x18>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	f003 0307 	and.w	r3, r3, #7
}
 800087e:	4618      	mov	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	2b00      	cmp	r3, #0
 800089c:	db0b      	blt.n	80008b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	f003 021f 	and.w	r2, r3, #31
 80008a4:	4906      	ldr	r1, [pc, #24]	; (80008c0 <__NVIC_EnableIRQ+0x34>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	095b      	lsrs	r3, r3, #5
 80008ac:	2001      	movs	r0, #1
 80008ae:	fa00 f202 	lsl.w	r2, r0, r2
 80008b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	e000e100 	.word	0xe000e100

080008c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	6039      	str	r1, [r7, #0]
 80008ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db0a      	blt.n	80008ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	490c      	ldr	r1, [pc, #48]	; (8000910 <__NVIC_SetPriority+0x4c>)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	0112      	lsls	r2, r2, #4
 80008e4:	b2d2      	uxtb	r2, r2
 80008e6:	440b      	add	r3, r1
 80008e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008ec:	e00a      	b.n	8000904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4908      	ldr	r1, [pc, #32]	; (8000914 <__NVIC_SetPriority+0x50>)
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	f003 030f 	and.w	r3, r3, #15
 80008fa:	3b04      	subs	r3, #4
 80008fc:	0112      	lsls	r2, r2, #4
 80008fe:	b2d2      	uxtb	r2, r2
 8000900:	440b      	add	r3, r1
 8000902:	761a      	strb	r2, [r3, #24]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000e100 	.word	0xe000e100
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000918:	b480      	push	{r7}
 800091a:	b089      	sub	sp, #36	; 0x24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	f1c3 0307 	rsb	r3, r3, #7
 8000932:	2b04      	cmp	r3, #4
 8000934:	bf28      	it	cs
 8000936:	2304      	movcs	r3, #4
 8000938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3304      	adds	r3, #4
 800093e:	2b06      	cmp	r3, #6
 8000940:	d902      	bls.n	8000948 <NVIC_EncodePriority+0x30>
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	3b03      	subs	r3, #3
 8000946:	e000      	b.n	800094a <NVIC_EncodePriority+0x32>
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	f04f 32ff 	mov.w	r2, #4294967295
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	43da      	mvns	r2, r3
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	401a      	ands	r2, r3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000960:	f04f 31ff 	mov.w	r1, #4294967295
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	fa01 f303 	lsl.w	r3, r1, r3
 800096a:	43d9      	mvns	r1, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000970:	4313      	orrs	r3, r2
         );
}
 8000972:	4618      	mov	r0, r3
 8000974:	3724      	adds	r7, #36	; 0x24
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff ff4f 	bl	8000828 <__NVIC_SetPriorityGrouping>
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000992:	b580      	push	{r7, lr}
 8000994:	b086      	sub	sp, #24
 8000996:	af00      	add	r7, sp, #0
 8000998:	4603      	mov	r3, r0
 800099a:	60b9      	str	r1, [r7, #8]
 800099c:	607a      	str	r2, [r7, #4]
 800099e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009a4:	f7ff ff64 	bl	8000870 <__NVIC_GetPriorityGrouping>
 80009a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	68b9      	ldr	r1, [r7, #8]
 80009ae:	6978      	ldr	r0, [r7, #20]
 80009b0:	f7ff ffb2 	bl	8000918 <NVIC_EncodePriority>
 80009b4:	4602      	mov	r2, r0
 80009b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ba:	4611      	mov	r1, r2
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ff81 	bl	80008c4 <__NVIC_SetPriority>
}
 80009c2:	bf00      	nop
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	4603      	mov	r3, r0
 80009d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff57 	bl	800088c <__NVIC_EnableIRQ>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b08b      	sub	sp, #44	; 0x2c
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009fa:	e169      	b.n	8000cd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009fc:	2201      	movs	r2, #1
 80009fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	69fa      	ldr	r2, [r7, #28]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	f040 8158 	bne.w	8000cca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	4a9a      	ldr	r2, [pc, #616]	; (8000c88 <HAL_GPIO_Init+0x2a0>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d05e      	beq.n	8000ae2 <HAL_GPIO_Init+0xfa>
 8000a24:	4a98      	ldr	r2, [pc, #608]	; (8000c88 <HAL_GPIO_Init+0x2a0>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d875      	bhi.n	8000b16 <HAL_GPIO_Init+0x12e>
 8000a2a:	4a98      	ldr	r2, [pc, #608]	; (8000c8c <HAL_GPIO_Init+0x2a4>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d058      	beq.n	8000ae2 <HAL_GPIO_Init+0xfa>
 8000a30:	4a96      	ldr	r2, [pc, #600]	; (8000c8c <HAL_GPIO_Init+0x2a4>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d86f      	bhi.n	8000b16 <HAL_GPIO_Init+0x12e>
 8000a36:	4a96      	ldr	r2, [pc, #600]	; (8000c90 <HAL_GPIO_Init+0x2a8>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d052      	beq.n	8000ae2 <HAL_GPIO_Init+0xfa>
 8000a3c:	4a94      	ldr	r2, [pc, #592]	; (8000c90 <HAL_GPIO_Init+0x2a8>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d869      	bhi.n	8000b16 <HAL_GPIO_Init+0x12e>
 8000a42:	4a94      	ldr	r2, [pc, #592]	; (8000c94 <HAL_GPIO_Init+0x2ac>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d04c      	beq.n	8000ae2 <HAL_GPIO_Init+0xfa>
 8000a48:	4a92      	ldr	r2, [pc, #584]	; (8000c94 <HAL_GPIO_Init+0x2ac>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d863      	bhi.n	8000b16 <HAL_GPIO_Init+0x12e>
 8000a4e:	4a92      	ldr	r2, [pc, #584]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d046      	beq.n	8000ae2 <HAL_GPIO_Init+0xfa>
 8000a54:	4a90      	ldr	r2, [pc, #576]	; (8000c98 <HAL_GPIO_Init+0x2b0>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d85d      	bhi.n	8000b16 <HAL_GPIO_Init+0x12e>
 8000a5a:	2b12      	cmp	r3, #18
 8000a5c:	d82a      	bhi.n	8000ab4 <HAL_GPIO_Init+0xcc>
 8000a5e:	2b12      	cmp	r3, #18
 8000a60:	d859      	bhi.n	8000b16 <HAL_GPIO_Init+0x12e>
 8000a62:	a201      	add	r2, pc, #4	; (adr r2, 8000a68 <HAL_GPIO_Init+0x80>)
 8000a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a68:	08000ae3 	.word	0x08000ae3
 8000a6c:	08000abd 	.word	0x08000abd
 8000a70:	08000acf 	.word	0x08000acf
 8000a74:	08000b11 	.word	0x08000b11
 8000a78:	08000b17 	.word	0x08000b17
 8000a7c:	08000b17 	.word	0x08000b17
 8000a80:	08000b17 	.word	0x08000b17
 8000a84:	08000b17 	.word	0x08000b17
 8000a88:	08000b17 	.word	0x08000b17
 8000a8c:	08000b17 	.word	0x08000b17
 8000a90:	08000b17 	.word	0x08000b17
 8000a94:	08000b17 	.word	0x08000b17
 8000a98:	08000b17 	.word	0x08000b17
 8000a9c:	08000b17 	.word	0x08000b17
 8000aa0:	08000b17 	.word	0x08000b17
 8000aa4:	08000b17 	.word	0x08000b17
 8000aa8:	08000b17 	.word	0x08000b17
 8000aac:	08000ac5 	.word	0x08000ac5
 8000ab0:	08000ad9 	.word	0x08000ad9
 8000ab4:	4a79      	ldr	r2, [pc, #484]	; (8000c9c <HAL_GPIO_Init+0x2b4>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d013      	beq.n	8000ae2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aba:	e02c      	b.n	8000b16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	623b      	str	r3, [r7, #32]
          break;
 8000ac2:	e029      	b.n	8000b18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	623b      	str	r3, [r7, #32]
          break;
 8000acc:	e024      	b.n	8000b18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	3308      	adds	r3, #8
 8000ad4:	623b      	str	r3, [r7, #32]
          break;
 8000ad6:	e01f      	b.n	8000b18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	330c      	adds	r3, #12
 8000ade:	623b      	str	r3, [r7, #32]
          break;
 8000ae0:	e01a      	b.n	8000b18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d102      	bne.n	8000af0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000aea:	2304      	movs	r3, #4
 8000aec:	623b      	str	r3, [r7, #32]
          break;
 8000aee:	e013      	b.n	8000b18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d105      	bne.n	8000b04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000af8:	2308      	movs	r3, #8
 8000afa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	69fa      	ldr	r2, [r7, #28]
 8000b00:	611a      	str	r2, [r3, #16]
          break;
 8000b02:	e009      	b.n	8000b18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b04:	2308      	movs	r3, #8
 8000b06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	69fa      	ldr	r2, [r7, #28]
 8000b0c:	615a      	str	r2, [r3, #20]
          break;
 8000b0e:	e003      	b.n	8000b18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
          break;
 8000b14:	e000      	b.n	8000b18 <HAL_GPIO_Init+0x130>
          break;
 8000b16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	2bff      	cmp	r3, #255	; 0xff
 8000b1c:	d801      	bhi.n	8000b22 <HAL_GPIO_Init+0x13a>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	e001      	b.n	8000b26 <HAL_GPIO_Init+0x13e>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	3304      	adds	r3, #4
 8000b26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	2bff      	cmp	r3, #255	; 0xff
 8000b2c:	d802      	bhi.n	8000b34 <HAL_GPIO_Init+0x14c>
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	e002      	b.n	8000b3a <HAL_GPIO_Init+0x152>
 8000b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b36:	3b08      	subs	r3, #8
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	210f      	movs	r1, #15
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	fa01 f303 	lsl.w	r3, r1, r3
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	401a      	ands	r2, r3
 8000b4c:	6a39      	ldr	r1, [r7, #32]
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	fa01 f303 	lsl.w	r3, r1, r3
 8000b54:	431a      	orrs	r2, r3
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f000 80b1 	beq.w	8000cca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b68:	4b4d      	ldr	r3, [pc, #308]	; (8000ca0 <HAL_GPIO_Init+0x2b8>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a4c      	ldr	r2, [pc, #304]	; (8000ca0 <HAL_GPIO_Init+0x2b8>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b4a      	ldr	r3, [pc, #296]	; (8000ca0 <HAL_GPIO_Init+0x2b8>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b80:	4a48      	ldr	r2, [pc, #288]	; (8000ca4 <HAL_GPIO_Init+0x2bc>)
 8000b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b84:	089b      	lsrs	r3, r3, #2
 8000b86:	3302      	adds	r3, #2
 8000b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b90:	f003 0303 	and.w	r3, r3, #3
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	220f      	movs	r2, #15
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a40      	ldr	r2, [pc, #256]	; (8000ca8 <HAL_GPIO_Init+0x2c0>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d013      	beq.n	8000bd4 <HAL_GPIO_Init+0x1ec>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a3f      	ldr	r2, [pc, #252]	; (8000cac <HAL_GPIO_Init+0x2c4>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d00d      	beq.n	8000bd0 <HAL_GPIO_Init+0x1e8>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a3e      	ldr	r2, [pc, #248]	; (8000cb0 <HAL_GPIO_Init+0x2c8>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d007      	beq.n	8000bcc <HAL_GPIO_Init+0x1e4>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a3d      	ldr	r2, [pc, #244]	; (8000cb4 <HAL_GPIO_Init+0x2cc>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d101      	bne.n	8000bc8 <HAL_GPIO_Init+0x1e0>
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	e006      	b.n	8000bd6 <HAL_GPIO_Init+0x1ee>
 8000bc8:	2304      	movs	r3, #4
 8000bca:	e004      	b.n	8000bd6 <HAL_GPIO_Init+0x1ee>
 8000bcc:	2302      	movs	r3, #2
 8000bce:	e002      	b.n	8000bd6 <HAL_GPIO_Init+0x1ee>
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e000      	b.n	8000bd6 <HAL_GPIO_Init+0x1ee>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bd8:	f002 0203 	and.w	r2, r2, #3
 8000bdc:	0092      	lsls	r2, r2, #2
 8000bde:	4093      	lsls	r3, r2
 8000be0:	68fa      	ldr	r2, [r7, #12]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000be6:	492f      	ldr	r1, [pc, #188]	; (8000ca4 <HAL_GPIO_Init+0x2bc>)
 8000be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bea:	089b      	lsrs	r3, r3, #2
 8000bec:	3302      	adds	r3, #2
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d006      	beq.n	8000c0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c00:	4b2d      	ldr	r3, [pc, #180]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	492c      	ldr	r1, [pc, #176]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	600b      	str	r3, [r1, #0]
 8000c0c:	e006      	b.n	8000c1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c0e:	4b2a      	ldr	r3, [pc, #168]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	43db      	mvns	r3, r3
 8000c16:	4928      	ldr	r1, [pc, #160]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c18:	4013      	ands	r3, r2
 8000c1a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d006      	beq.n	8000c36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c28:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	4922      	ldr	r1, [pc, #136]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	604b      	str	r3, [r1, #4]
 8000c34:	e006      	b.n	8000c44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c36:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	491e      	ldr	r1, [pc, #120]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c40:	4013      	ands	r3, r2
 8000c42:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d006      	beq.n	8000c5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c50:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c52:	689a      	ldr	r2, [r3, #8]
 8000c54:	4918      	ldr	r1, [pc, #96]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	608b      	str	r3, [r1, #8]
 8000c5c:	e006      	b.n	8000c6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c5e:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	43db      	mvns	r3, r3
 8000c66:	4914      	ldr	r1, [pc, #80]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c68:	4013      	ands	r3, r2
 8000c6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d021      	beq.n	8000cbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c7a:	68da      	ldr	r2, [r3, #12]
 8000c7c:	490e      	ldr	r1, [pc, #56]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	60cb      	str	r3, [r1, #12]
 8000c84:	e021      	b.n	8000cca <HAL_GPIO_Init+0x2e2>
 8000c86:	bf00      	nop
 8000c88:	10320000 	.word	0x10320000
 8000c8c:	10310000 	.word	0x10310000
 8000c90:	10220000 	.word	0x10220000
 8000c94:	10210000 	.word	0x10210000
 8000c98:	10120000 	.word	0x10120000
 8000c9c:	10110000 	.word	0x10110000
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40010000 	.word	0x40010000
 8000ca8:	40010800 	.word	0x40010800
 8000cac:	40010c00 	.word	0x40010c00
 8000cb0:	40011000 	.word	0x40011000
 8000cb4:	40011400 	.word	0x40011400
 8000cb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_GPIO_Init+0x304>)
 8000cbe:	68da      	ldr	r2, [r3, #12]
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	4909      	ldr	r1, [pc, #36]	; (8000cec <HAL_GPIO_Init+0x304>)
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ccc:	3301      	adds	r3, #1
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f47f ae8e 	bne.w	80009fc <HAL_GPIO_Init+0x14>
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	bf00      	nop
 8000ce4:	372c      	adds	r7, #44	; 0x2c
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	40010400 	.word	0x40010400

08000cf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689a      	ldr	r2, [r3, #8]
 8000d00:	887b      	ldrh	r3, [r7, #2]
 8000d02:	4013      	ands	r3, r2
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d002      	beq.n	8000d0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	73fb      	strb	r3, [r7, #15]
 8000d0c:	e001      	b.n	8000d12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr

08000d1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
 8000d26:	460b      	mov	r3, r1
 8000d28:	807b      	strh	r3, [r7, #2]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d2e:	787b      	ldrb	r3, [r7, #1]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d003      	beq.n	8000d3c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d34:	887a      	ldrh	r2, [r7, #2]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d3a:	e003      	b.n	8000d44 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d3c:	887b      	ldrh	r3, [r7, #2]
 8000d3e:	041a      	lsls	r2, r3, #16
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	611a      	str	r2, [r3, #16]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
	...

08000d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e26c      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 8087 	beq.w	8000e7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d70:	4b92      	ldr	r3, [pc, #584]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 030c 	and.w	r3, r3, #12
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	d00c      	beq.n	8000d96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d7c:	4b8f      	ldr	r3, [pc, #572]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 030c 	and.w	r3, r3, #12
 8000d84:	2b08      	cmp	r3, #8
 8000d86:	d112      	bne.n	8000dae <HAL_RCC_OscConfig+0x5e>
 8000d88:	4b8c      	ldr	r3, [pc, #560]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d94:	d10b      	bne.n	8000dae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d96:	4b89      	ldr	r3, [pc, #548]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d06c      	beq.n	8000e7c <HAL_RCC_OscConfig+0x12c>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d168      	bne.n	8000e7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e246      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000db6:	d106      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x76>
 8000db8:	4b80      	ldr	r3, [pc, #512]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a7f      	ldr	r2, [pc, #508]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	e02e      	b.n	8000e24 <HAL_RCC_OscConfig+0xd4>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d10c      	bne.n	8000de8 <HAL_RCC_OscConfig+0x98>
 8000dce:	4b7b      	ldr	r3, [pc, #492]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a7a      	ldr	r2, [pc, #488]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	4b78      	ldr	r3, [pc, #480]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a77      	ldr	r2, [pc, #476]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	e01d      	b.n	8000e24 <HAL_RCC_OscConfig+0xd4>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000df0:	d10c      	bne.n	8000e0c <HAL_RCC_OscConfig+0xbc>
 8000df2:	4b72      	ldr	r3, [pc, #456]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a71      	ldr	r2, [pc, #452]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	4b6f      	ldr	r3, [pc, #444]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a6e      	ldr	r2, [pc, #440]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	e00b      	b.n	8000e24 <HAL_RCC_OscConfig+0xd4>
 8000e0c:	4b6b      	ldr	r3, [pc, #428]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a6a      	ldr	r2, [pc, #424]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	4b68      	ldr	r3, [pc, #416]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a67      	ldr	r2, [pc, #412]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d013      	beq.n	8000e54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2c:	f7ff fcf2 	bl	8000814 <HAL_GetTick>
 8000e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e32:	e008      	b.n	8000e46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e34:	f7ff fcee 	bl	8000814 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b64      	cmp	r3, #100	; 0x64
 8000e40:	d901      	bls.n	8000e46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e1fa      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e46:	4b5d      	ldr	r3, [pc, #372]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d0f0      	beq.n	8000e34 <HAL_RCC_OscConfig+0xe4>
 8000e52:	e014      	b.n	8000e7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e54:	f7ff fcde 	bl	8000814 <HAL_GetTick>
 8000e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e5a:	e008      	b.n	8000e6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e5c:	f7ff fcda 	bl	8000814 <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b64      	cmp	r3, #100	; 0x64
 8000e68:	d901      	bls.n	8000e6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e1e6      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e6e:	4b53      	ldr	r3, [pc, #332]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1f0      	bne.n	8000e5c <HAL_RCC_OscConfig+0x10c>
 8000e7a:	e000      	b.n	8000e7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d063      	beq.n	8000f52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e8a:	4b4c      	ldr	r3, [pc, #304]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 030c 	and.w	r3, r3, #12
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d00b      	beq.n	8000eae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e96:	4b49      	ldr	r3, [pc, #292]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 030c 	and.w	r3, r3, #12
 8000e9e:	2b08      	cmp	r3, #8
 8000ea0:	d11c      	bne.n	8000edc <HAL_RCC_OscConfig+0x18c>
 8000ea2:	4b46      	ldr	r3, [pc, #280]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d116      	bne.n	8000edc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eae:	4b43      	ldr	r3, [pc, #268]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d005      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x176>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d001      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e1ba      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec6:	4b3d      	ldr	r3, [pc, #244]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	4939      	ldr	r1, [pc, #228]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eda:	e03a      	b.n	8000f52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	691b      	ldr	r3, [r3, #16]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d020      	beq.n	8000f26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ee4:	4b36      	ldr	r3, [pc, #216]	; (8000fc0 <HAL_RCC_OscConfig+0x270>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eea:	f7ff fc93 	bl	8000814 <HAL_GetTick>
 8000eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef0:	e008      	b.n	8000f04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ef2:	f7ff fc8f 	bl	8000814 <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e19b      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f04:	4b2d      	ldr	r3, [pc, #180]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0f0      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f10:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	4927      	ldr	r1, [pc, #156]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f20:	4313      	orrs	r3, r2
 8000f22:	600b      	str	r3, [r1, #0]
 8000f24:	e015      	b.n	8000f52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f26:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <HAL_RCC_OscConfig+0x270>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2c:	f7ff fc72 	bl	8000814 <HAL_GetTick>
 8000f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f32:	e008      	b.n	8000f46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f34:	f7ff fc6e 	bl	8000814 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e17a      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1f0      	bne.n	8000f34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d03a      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d019      	beq.n	8000f9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <HAL_RCC_OscConfig+0x274>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f6c:	f7ff fc52 	bl	8000814 <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f72:	e008      	b.n	8000f86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f74:	f7ff fc4e 	bl	8000814 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e15a      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d0f0      	beq.n	8000f74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f000 fb08 	bl	80015a8 <RCC_Delay>
 8000f98:	e01c      	b.n	8000fd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_RCC_OscConfig+0x274>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa0:	f7ff fc38 	bl	8000814 <HAL_GetTick>
 8000fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa6:	e00f      	b.n	8000fc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fa8:	f7ff fc34 	bl	8000814 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d908      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e140      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	42420000 	.word	0x42420000
 8000fc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc8:	4b9e      	ldr	r3, [pc, #632]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8000fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1e9      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f000 80a6 	beq.w	800112e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fe6:	4b97      	ldr	r3, [pc, #604]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10d      	bne.n	800100e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ff2:	4b94      	ldr	r3, [pc, #592]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	4a93      	ldr	r2, [pc, #588]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	61d3      	str	r3, [r2, #28]
 8000ffe:	4b91      	ldr	r3, [pc, #580]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800100a:	2301      	movs	r3, #1
 800100c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800100e:	4b8e      	ldr	r3, [pc, #568]	; (8001248 <HAL_RCC_OscConfig+0x4f8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001016:	2b00      	cmp	r3, #0
 8001018:	d118      	bne.n	800104c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800101a:	4b8b      	ldr	r3, [pc, #556]	; (8001248 <HAL_RCC_OscConfig+0x4f8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a8a      	ldr	r2, [pc, #552]	; (8001248 <HAL_RCC_OscConfig+0x4f8>)
 8001020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001026:	f7ff fbf5 	bl	8000814 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800102e:	f7ff fbf1 	bl	8000814 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b64      	cmp	r3, #100	; 0x64
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e0fd      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001040:	4b81      	ldr	r3, [pc, #516]	; (8001248 <HAL_RCC_OscConfig+0x4f8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0f0      	beq.n	800102e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d106      	bne.n	8001062 <HAL_RCC_OscConfig+0x312>
 8001054:	4b7b      	ldr	r3, [pc, #492]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	4a7a      	ldr	r2, [pc, #488]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6213      	str	r3, [r2, #32]
 8001060:	e02d      	b.n	80010be <HAL_RCC_OscConfig+0x36e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10c      	bne.n	8001084 <HAL_RCC_OscConfig+0x334>
 800106a:	4b76      	ldr	r3, [pc, #472]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	4a75      	ldr	r2, [pc, #468]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001070:	f023 0301 	bic.w	r3, r3, #1
 8001074:	6213      	str	r3, [r2, #32]
 8001076:	4b73      	ldr	r3, [pc, #460]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	4a72      	ldr	r2, [pc, #456]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 800107c:	f023 0304 	bic.w	r3, r3, #4
 8001080:	6213      	str	r3, [r2, #32]
 8001082:	e01c      	b.n	80010be <HAL_RCC_OscConfig+0x36e>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	2b05      	cmp	r3, #5
 800108a:	d10c      	bne.n	80010a6 <HAL_RCC_OscConfig+0x356>
 800108c:	4b6d      	ldr	r3, [pc, #436]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	4a6c      	ldr	r2, [pc, #432]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001092:	f043 0304 	orr.w	r3, r3, #4
 8001096:	6213      	str	r3, [r2, #32]
 8001098:	4b6a      	ldr	r3, [pc, #424]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	4a69      	ldr	r2, [pc, #420]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6213      	str	r3, [r2, #32]
 80010a4:	e00b      	b.n	80010be <HAL_RCC_OscConfig+0x36e>
 80010a6:	4b67      	ldr	r3, [pc, #412]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	4a66      	ldr	r2, [pc, #408]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 80010ac:	f023 0301 	bic.w	r3, r3, #1
 80010b0:	6213      	str	r3, [r2, #32]
 80010b2:	4b64      	ldr	r3, [pc, #400]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	4a63      	ldr	r2, [pc, #396]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 80010b8:	f023 0304 	bic.w	r3, r3, #4
 80010bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d015      	beq.n	80010f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c6:	f7ff fba5 	bl	8000814 <HAL_GetTick>
 80010ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010cc:	e00a      	b.n	80010e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ce:	f7ff fba1 	bl	8000814 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010dc:	4293      	cmp	r3, r2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e0ab      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e4:	4b57      	ldr	r3, [pc, #348]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0ee      	beq.n	80010ce <HAL_RCC_OscConfig+0x37e>
 80010f0:	e014      	b.n	800111c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f2:	f7ff fb8f 	bl	8000814 <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f8:	e00a      	b.n	8001110 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010fa:	f7ff fb8b 	bl	8000814 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	f241 3288 	movw	r2, #5000	; 0x1388
 8001108:	4293      	cmp	r3, r2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e095      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001110:	4b4c      	ldr	r3, [pc, #304]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1ee      	bne.n	80010fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800111c:	7dfb      	ldrb	r3, [r7, #23]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d105      	bne.n	800112e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001122:	4b48      	ldr	r3, [pc, #288]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	4a47      	ldr	r2, [pc, #284]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800112c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 8081 	beq.w	800123a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001138:	4b42      	ldr	r3, [pc, #264]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 030c 	and.w	r3, r3, #12
 8001140:	2b08      	cmp	r3, #8
 8001142:	d061      	beq.n	8001208 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69db      	ldr	r3, [r3, #28]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d146      	bne.n	80011da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800114c:	4b3f      	ldr	r3, [pc, #252]	; (800124c <HAL_RCC_OscConfig+0x4fc>)
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001152:	f7ff fb5f 	bl	8000814 <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800115a:	f7ff fb5b 	bl	8000814 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e067      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116c:	4b35      	ldr	r3, [pc, #212]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1f0      	bne.n	800115a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001180:	d108      	bne.n	8001194 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001182:	4b30      	ldr	r3, [pc, #192]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	492d      	ldr	r1, [pc, #180]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001190:	4313      	orrs	r3, r2
 8001192:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a19      	ldr	r1, [r3, #32]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a4:	430b      	orrs	r3, r1
 80011a6:	4927      	ldr	r1, [pc, #156]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 80011a8:	4313      	orrs	r3, r2
 80011aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011ac:	4b27      	ldr	r3, [pc, #156]	; (800124c <HAL_RCC_OscConfig+0x4fc>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b2:	f7ff fb2f 	bl	8000814 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ba:	f7ff fb2b 	bl	8000814 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e037      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011cc:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f0      	beq.n	80011ba <HAL_RCC_OscConfig+0x46a>
 80011d8:	e02f      	b.n	800123a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <HAL_RCC_OscConfig+0x4fc>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e0:	f7ff fb18 	bl	8000814 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e8:	f7ff fb14 	bl	8000814 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e020      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0x498>
 8001206:	e018      	b.n	800123a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e013      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <HAL_RCC_OscConfig+0x4f4>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	429a      	cmp	r2, r3
 8001226:	d106      	bne.n	8001236 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001232:	429a      	cmp	r2, r3
 8001234:	d001      	beq.n	800123a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40021000 	.word	0x40021000
 8001248:	40007000 	.word	0x40007000
 800124c:	42420060 	.word	0x42420060

08001250 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e0d0      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001264:	4b6a      	ldr	r3, [pc, #424]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	429a      	cmp	r2, r3
 8001270:	d910      	bls.n	8001294 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001272:	4b67      	ldr	r3, [pc, #412]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f023 0207 	bic.w	r2, r3, #7
 800127a:	4965      	ldr	r1, [pc, #404]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	4313      	orrs	r3, r2
 8001280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001282:	4b63      	ldr	r3, [pc, #396]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d001      	beq.n	8001294 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e0b8      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d020      	beq.n	80012e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d005      	beq.n	80012b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012ac:	4b59      	ldr	r3, [pc, #356]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	4a58      	ldr	r2, [pc, #352]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0308 	and.w	r3, r3, #8
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012c4:	4b53      	ldr	r3, [pc, #332]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	4a52      	ldr	r2, [pc, #328]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d0:	4b50      	ldr	r3, [pc, #320]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	494d      	ldr	r1, [pc, #308]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d040      	beq.n	8001370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d107      	bne.n	8001306 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	4b47      	ldr	r3, [pc, #284]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d115      	bne.n	800132e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e07f      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b02      	cmp	r3, #2
 800130c:	d107      	bne.n	800131e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130e:	4b41      	ldr	r3, [pc, #260]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d109      	bne.n	800132e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e073      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131e:	4b3d      	ldr	r3, [pc, #244]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e06b      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800132e:	4b39      	ldr	r3, [pc, #228]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f023 0203 	bic.w	r2, r3, #3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	4936      	ldr	r1, [pc, #216]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001340:	f7ff fa68 	bl	8000814 <HAL_GetTick>
 8001344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001346:	e00a      	b.n	800135e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001348:	f7ff fa64 	bl	8000814 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	f241 3288 	movw	r2, #5000	; 0x1388
 8001356:	4293      	cmp	r3, r2
 8001358:	d901      	bls.n	800135e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e053      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135e:	4b2d      	ldr	r3, [pc, #180]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 020c 	and.w	r2, r3, #12
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	429a      	cmp	r2, r3
 800136e:	d1eb      	bne.n	8001348 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	429a      	cmp	r2, r3
 800137c:	d210      	bcs.n	80013a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137e:	4b24      	ldr	r3, [pc, #144]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 0207 	bic.w	r2, r3, #7
 8001386:	4922      	ldr	r1, [pc, #136]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800138e:	4b20      	ldr	r3, [pc, #128]	; (8001410 <HAL_RCC_ClockConfig+0x1c0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d001      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e032      	b.n	8001406 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d008      	beq.n	80013be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	4916      	ldr	r1, [pc, #88]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d009      	beq.n	80013de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	490e      	ldr	r1, [pc, #56]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013de:	f000 f821 	bl	8001424 <HAL_RCC_GetSysClockFreq>
 80013e2:	4602      	mov	r2, r0
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_RCC_ClockConfig+0x1c4>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	490a      	ldr	r1, [pc, #40]	; (8001418 <HAL_RCC_ClockConfig+0x1c8>)
 80013f0:	5ccb      	ldrb	r3, [r1, r3]
 80013f2:	fa22 f303 	lsr.w	r3, r2, r3
 80013f6:	4a09      	ldr	r2, [pc, #36]	; (800141c <HAL_RCC_ClockConfig+0x1cc>)
 80013f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_RCC_ClockConfig+0x1d0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f894 	bl	800052c <HAL_InitTick>

  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40022000 	.word	0x40022000
 8001414:	40021000 	.word	0x40021000
 8001418:	08005318 	.word	0x08005318
 800141c:	20000000 	.word	0x20000000
 8001420:	20000004 	.word	0x20000004

08001424 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001424:	b490      	push	{r4, r7}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800142a:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800142c:	1d3c      	adds	r4, r7, #4
 800142e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001430:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001434:	f240 2301 	movw	r3, #513	; 0x201
 8001438:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
 800143e:	2300      	movs	r3, #0
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	2300      	movs	r3, #0
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800144e:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b04      	cmp	r3, #4
 800145c:	d002      	beq.n	8001464 <HAL_RCC_GetSysClockFreq+0x40>
 800145e:	2b08      	cmp	r3, #8
 8001460:	d003      	beq.n	800146a <HAL_RCC_GetSysClockFreq+0x46>
 8001462:	e02d      	b.n	80014c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001466:	623b      	str	r3, [r7, #32]
      break;
 8001468:	e02d      	b.n	80014c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	0c9b      	lsrs	r3, r3, #18
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001476:	4413      	add	r3, r2
 8001478:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800147c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d013      	beq.n	80014b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	0c5b      	lsrs	r3, r3, #17
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001496:	4413      	add	r3, r2
 8001498:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800149c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80014a2:	fb02 f203 	mul.w	r2, r2, r3
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
 80014ae:	e004      	b.n	80014ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014b4:	fb02 f303 	mul.w	r3, r2, r3
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	623b      	str	r3, [r7, #32]
      break;
 80014be:	e002      	b.n	80014c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80014c2:	623b      	str	r3, [r7, #32]
      break;
 80014c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014c6:	6a3b      	ldr	r3, [r7, #32]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3728      	adds	r7, #40	; 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc90      	pop	{r4, r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	080052cc 	.word	0x080052cc
 80014d8:	40021000 	.word	0x40021000
 80014dc:	007a1200 	.word	0x007a1200
 80014e0:	003d0900 	.word	0x003d0900

080014e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014e8:	4b02      	ldr	r3, [pc, #8]	; (80014f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	20000000 	.word	0x20000000

080014f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014fc:	f7ff fff2 	bl	80014e4 <HAL_RCC_GetHCLKFreq>
 8001500:	4602      	mov	r2, r0
 8001502:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	4903      	ldr	r1, [pc, #12]	; (800151c <HAL_RCC_GetPCLK1Freq+0x24>)
 800150e:	5ccb      	ldrb	r3, [r1, r3]
 8001510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001514:	4618      	mov	r0, r3
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000
 800151c:	08005328 	.word	0x08005328

08001520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001524:	f7ff ffde 	bl	80014e4 <HAL_RCC_GetHCLKFreq>
 8001528:	4602      	mov	r2, r0
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	0adb      	lsrs	r3, r3, #11
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	4903      	ldr	r1, [pc, #12]	; (8001544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001536:	5ccb      	ldrb	r3, [r1, r3]
 8001538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800153c:	4618      	mov	r0, r3
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40021000 	.word	0x40021000
 8001544:	08005328 	.word	0x08005328

08001548 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	220f      	movs	r2, #15
 8001556:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_RCC_GetClockConfig+0x58>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0203 	and.w	r2, r3, #3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_RCC_GetClockConfig+0x58>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_RCC_GetClockConfig+0x58>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_RCC_GetClockConfig+0x58>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	08db      	lsrs	r3, r3, #3
 8001582:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_RCC_GetClockConfig+0x5c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0207 	and.w	r2, r3, #7
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40022000 	.word	0x40022000

080015a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <RCC_Delay+0x34>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <RCC_Delay+0x38>)
 80015b6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ba:	0a5b      	lsrs	r3, r3, #9
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015c4:	bf00      	nop
  }
  while (Delay --);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1e5a      	subs	r2, r3, #1
 80015ca:	60fa      	str	r2, [r7, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1f9      	bne.n	80015c4 <RCC_Delay+0x1c>
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	20000000 	.word	0x20000000
 80015e0:	10624dd3 	.word	0x10624dd3

080015e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e041      	b.n	800167a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d106      	bne.n	8001610 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f839 	bl	8001682 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2202      	movs	r2, #2
 8001614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3304      	adds	r3, #4
 8001620:	4619      	mov	r1, r3
 8001622:	4610      	mov	r0, r2
 8001624:	f000 f9b4 	bl	8001990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d001      	beq.n	80016ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e03a      	b.n	8001722 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2202      	movs	r2, #2
 80016b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0201 	orr.w	r2, r2, #1
 80016c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a18      	ldr	r2, [pc, #96]	; (800172c <HAL_TIM_Base_Start_IT+0x98>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d00e      	beq.n	80016ec <HAL_TIM_Base_Start_IT+0x58>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d6:	d009      	beq.n	80016ec <HAL_TIM_Base_Start_IT+0x58>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a14      	ldr	r2, [pc, #80]	; (8001730 <HAL_TIM_Base_Start_IT+0x9c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d004      	beq.n	80016ec <HAL_TIM_Base_Start_IT+0x58>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a13      	ldr	r2, [pc, #76]	; (8001734 <HAL_TIM_Base_Start_IT+0xa0>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d111      	bne.n	8001710 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d010      	beq.n	8001720 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f042 0201 	orr.w	r2, r2, #1
 800170c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800170e:	e007      	b.n	8001720 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0201 	orr.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	40012c00 	.word	0x40012c00
 8001730:	40000400 	.word	0x40000400
 8001734:	40000800 	.word	0x40000800

08001738 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b02      	cmp	r3, #2
 800174c:	d122      	bne.n	8001794 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b02      	cmp	r3, #2
 800175a:	d11b      	bne.n	8001794 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f06f 0202 	mvn.w	r2, #2
 8001764:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f8ed 	bl	800195a <HAL_TIM_IC_CaptureCallback>
 8001780:	e005      	b.n	800178e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f8e0 	bl	8001948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f8ef 	bl	800196c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d122      	bne.n	80017e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d11b      	bne.n	80017e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f06f 0204 	mvn.w	r2, #4
 80017b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2202      	movs	r2, #2
 80017be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f8c3 	bl	800195a <HAL_TIM_IC_CaptureCallback>
 80017d4:	e005      	b.n	80017e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 f8b6 	bl	8001948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f8c5 	bl	800196c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d122      	bne.n	800183c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b08      	cmp	r3, #8
 8001802:	d11b      	bne.n	800183c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f06f 0208 	mvn.w	r2, #8
 800180c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2204      	movs	r2, #4
 8001812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f899 	bl	800195a <HAL_TIM_IC_CaptureCallback>
 8001828:	e005      	b.n	8001836 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f88c 	bl	8001948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f89b 	bl	800196c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	2b10      	cmp	r3, #16
 8001848:	d122      	bne.n	8001890 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f003 0310 	and.w	r3, r3, #16
 8001854:	2b10      	cmp	r3, #16
 8001856:	d11b      	bne.n	8001890 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f06f 0210 	mvn.w	r2, #16
 8001860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2208      	movs	r2, #8
 8001866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f86f 	bl	800195a <HAL_TIM_IC_CaptureCallback>
 800187c:	e005      	b.n	800188a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f862 	bl	8001948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 f871 	bl	800196c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b01      	cmp	r3, #1
 800189c:	d10e      	bne.n	80018bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d107      	bne.n	80018bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f06f 0201 	mvn.w	r2, #1
 80018b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7fe fde8 	bl	800048c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c6:	2b80      	cmp	r3, #128	; 0x80
 80018c8:	d10e      	bne.n	80018e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d4:	2b80      	cmp	r3, #128	; 0x80
 80018d6:	d107      	bne.n	80018e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f8bf 	bl	8001a66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f2:	2b40      	cmp	r3, #64	; 0x40
 80018f4:	d10e      	bne.n	8001914 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001900:	2b40      	cmp	r3, #64	; 0x40
 8001902:	d107      	bne.n	8001914 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800190c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f835 	bl	800197e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	f003 0320 	and.w	r3, r3, #32
 800191e:	2b20      	cmp	r3, #32
 8001920:	d10e      	bne.n	8001940 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f003 0320 	and.w	r3, r3, #32
 800192c:	2b20      	cmp	r3, #32
 800192e:	d107      	bne.n	8001940 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f06f 0220 	mvn.w	r2, #32
 8001938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f88a 	bl	8001a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr

0800197e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a29      	ldr	r2, [pc, #164]	; (8001a48 <TIM_Base_SetConfig+0xb8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d00b      	beq.n	80019c0 <TIM_Base_SetConfig+0x30>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ae:	d007      	beq.n	80019c0 <TIM_Base_SetConfig+0x30>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a26      	ldr	r2, [pc, #152]	; (8001a4c <TIM_Base_SetConfig+0xbc>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d003      	beq.n	80019c0 <TIM_Base_SetConfig+0x30>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a25      	ldr	r2, [pc, #148]	; (8001a50 <TIM_Base_SetConfig+0xc0>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d108      	bne.n	80019d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a1c      	ldr	r2, [pc, #112]	; (8001a48 <TIM_Base_SetConfig+0xb8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d00b      	beq.n	80019f2 <TIM_Base_SetConfig+0x62>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e0:	d007      	beq.n	80019f2 <TIM_Base_SetConfig+0x62>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a19      	ldr	r2, [pc, #100]	; (8001a4c <TIM_Base_SetConfig+0xbc>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d003      	beq.n	80019f2 <TIM_Base_SetConfig+0x62>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a18      	ldr	r2, [pc, #96]	; (8001a50 <TIM_Base_SetConfig+0xc0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d108      	bne.n	8001a04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <TIM_Base_SetConfig+0xb8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d103      	bne.n	8001a38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	615a      	str	r2, [r3, #20]
}
 8001a3e:	bf00      	nop
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	40012c00 	.word	0x40012c00
 8001a4c:	40000400 	.word	0x40000400
 8001a50:	40000800 	.word	0x40000800

08001a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr

08001a66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e03f      	b.n	8001b0a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d106      	bne.n	8001aa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7fe fe20 	bl	80006e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2224      	movs	r2, #36	; 0x24
 8001aa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001aba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f905 	bl	8001ccc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	691a      	ldr	r2, [r3, #16]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ad0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	695a      	ldr	r2, [r3, #20]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ae0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001af0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2220      	movs	r2, #32
 8001afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2220      	movs	r2, #32
 8001b04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b08a      	sub	sp, #40	; 0x28
 8001b16:	af02      	add	r7, sp, #8
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b20      	cmp	r3, #32
 8001b30:	d17c      	bne.n	8001c2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <HAL_UART_Transmit+0x2c>
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e075      	b.n	8001c2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_UART_Transmit+0x3e>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e06e      	b.n	8001c2e <HAL_UART_Transmit+0x11c>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2221      	movs	r2, #33	; 0x21
 8001b62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001b66:	f7fe fe55 	bl	8000814 <HAL_GetTick>
 8001b6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	88fa      	ldrh	r2, [r7, #6]
 8001b70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	88fa      	ldrh	r2, [r7, #6]
 8001b76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b80:	d108      	bne.n	8001b94 <HAL_UART_Transmit+0x82>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d104      	bne.n	8001b94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	61bb      	str	r3, [r7, #24]
 8001b92:	e003      	b.n	8001b9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001ba4:	e02a      	b.n	8001bfc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2200      	movs	r2, #0
 8001bae:	2180      	movs	r1, #128	; 0x80
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f000 f840 	bl	8001c36 <UART_WaitOnFlagUntilTimeout>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e036      	b.n	8001c2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10b      	bne.n	8001bde <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	3302      	adds	r3, #2
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	e007      	b.n	8001bee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	781a      	ldrb	r2, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	3301      	adds	r3, #1
 8001bec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1cf      	bne.n	8001ba6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2140      	movs	r1, #64	; 0x40
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 f810 	bl	8001c36 <UART_WaitOnFlagUntilTimeout>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e006      	b.n	8001c2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2220      	movs	r2, #32
 8001c24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	e000      	b.n	8001c2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c2c:	2302      	movs	r3, #2
  }
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3720      	adds	r7, #32
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b084      	sub	sp, #16
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	603b      	str	r3, [r7, #0]
 8001c42:	4613      	mov	r3, r2
 8001c44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c46:	e02c      	b.n	8001ca2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4e:	d028      	beq.n	8001ca2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d007      	beq.n	8001c66 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c56:	f7fe fddd 	bl	8000814 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d21d      	bcs.n	8001ca2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c74:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695a      	ldr	r2, [r3, #20]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0201 	bic.w	r2, r2, #1
 8001c84:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2220      	movs	r2, #32
 8001c8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2220      	movs	r2, #32
 8001c92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e00f      	b.n	8001cc2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	4013      	ands	r3, r2
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	bf0c      	ite	eq
 8001cb2:	2301      	moveq	r3, #1
 8001cb4:	2300      	movne	r3, #0
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	461a      	mov	r2, r3
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d0c3      	beq.n	8001c48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d06:	f023 030c 	bic.w	r3, r3, #12
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6812      	ldr	r2, [r2, #0]
 8001d0e:	68b9      	ldr	r1, [r7, #8]
 8001d10:	430b      	orrs	r3, r1
 8001d12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699a      	ldr	r2, [r3, #24]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a2c      	ldr	r2, [pc, #176]	; (8001de0 <UART_SetConfig+0x114>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d103      	bne.n	8001d3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d34:	f7ff fbf4 	bl	8001520 <HAL_RCC_GetPCLK2Freq>
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	e002      	b.n	8001d42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d3c:	f7ff fbdc 	bl	80014f8 <HAL_RCC_GetPCLK1Freq>
 8001d40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	009a      	lsls	r2, r3, #2
 8001d4c:	441a      	add	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d58:	4a22      	ldr	r2, [pc, #136]	; (8001de4 <UART_SetConfig+0x118>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	0119      	lsls	r1, r3, #4
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	009a      	lsls	r2, r3, #2
 8001d6c:	441a      	add	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d78:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <UART_SetConfig+0x118>)
 8001d7a:	fba3 0302 	umull	r0, r3, r3, r2
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	2064      	movs	r0, #100	; 0x64
 8001d82:	fb00 f303 	mul.w	r3, r0, r3
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	3332      	adds	r3, #50	; 0x32
 8001d8c:	4a15      	ldr	r2, [pc, #84]	; (8001de4 <UART_SetConfig+0x118>)
 8001d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d98:	4419      	add	r1, r3
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	009a      	lsls	r2, r3, #2
 8001da4:	441a      	add	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	fbb2 f2f3 	udiv	r2, r2, r3
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <UART_SetConfig+0x118>)
 8001db2:	fba3 0302 	umull	r0, r3, r3, r2
 8001db6:	095b      	lsrs	r3, r3, #5
 8001db8:	2064      	movs	r0, #100	; 0x64
 8001dba:	fb00 f303 	mul.w	r3, r0, r3
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	3332      	adds	r3, #50	; 0x32
 8001dc4:	4a07      	ldr	r2, [pc, #28]	; (8001de4 <UART_SetConfig+0x118>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	f003 020f 	and.w	r2, r3, #15
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	440a      	add	r2, r1
 8001dd6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001dd8:	bf00      	nop
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40013800 	.word	0x40013800
 8001de4:	51eb851f 	.word	0x51eb851f

08001de8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001dee:	f3ef 8305 	mrs	r3, IPSR
 8001df2:	60bb      	str	r3, [r7, #8]
  return(result);
 8001df4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10f      	bne.n	8001e1a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8001dfe:	607b      	str	r3, [r7, #4]
  return(result);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d109      	bne.n	8001e1a <osKernelInitialize+0x32>
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <osKernelInitialize+0x60>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d109      	bne.n	8001e22 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e0e:	f3ef 8311 	mrs	r3, BASEPRI
 8001e12:	603b      	str	r3, [r7, #0]
  return(result);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001e1a:	f06f 0305 	mvn.w	r3, #5
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	e00c      	b.n	8001e3c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <osKernelInitialize+0x60>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d105      	bne.n	8001e36 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001e2a:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <osKernelInitialize+0x60>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	e002      	b.n	8001e3c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	2000009c 	.word	0x2000009c

08001e4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e52:	f3ef 8305 	mrs	r3, IPSR
 8001e56:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10f      	bne.n	8001e7e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e5e:	f3ef 8310 	mrs	r3, PRIMASK
 8001e62:	607b      	str	r3, [r7, #4]
  return(result);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d109      	bne.n	8001e7e <osKernelStart+0x32>
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <osKernelStart+0x64>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d109      	bne.n	8001e86 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e72:	f3ef 8311 	mrs	r3, BASEPRI
 8001e76:	603b      	str	r3, [r7, #0]
  return(result);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001e7e:	f06f 0305 	mvn.w	r3, #5
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	e00e      	b.n	8001ea4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001e86:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <osKernelStart+0x64>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d107      	bne.n	8001e9e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001e8e:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <osKernelStart+0x64>)
 8001e90:	2202      	movs	r2, #2
 8001e92:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001e94:	f001 f878 	bl	8002f88 <vTaskStartScheduler>
      stat = osOK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	e002      	b.n	8001ea4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	2000009c 	.word	0x2000009c

08001eb4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b092      	sub	sp, #72	; 0x48
 8001eb8:	af04      	add	r7, sp, #16
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ec4:	f3ef 8305 	mrs	r3, IPSR
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f040 8094 	bne.w	8001ffa <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8001ed6:	623b      	str	r3, [r7, #32]
  return(result);
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f040 808d 	bne.w	8001ffa <osThreadNew+0x146>
 8001ee0:	4b48      	ldr	r3, [pc, #288]	; (8002004 <osThreadNew+0x150>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d106      	bne.n	8001ef6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ee8:	f3ef 8311 	mrs	r3, BASEPRI
 8001eec:	61fb      	str	r3, [r7, #28]
  return(result);
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f040 8082 	bne.w	8001ffa <osThreadNew+0x146>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d07e      	beq.n	8001ffa <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001f00:	2318      	movs	r3, #24
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001f04:	2300      	movs	r3, #0
 8001f06:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001f08:	f107 031b 	add.w	r3, r7, #27
 8001f0c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d045      	beq.n	8001fa6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <osThreadNew+0x74>
        name = attr->name;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d008      	beq.n	8001f4e <osThreadNew+0x9a>
 8001f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3e:	2b38      	cmp	r3, #56	; 0x38
 8001f40:	d805      	bhi.n	8001f4e <osThreadNew+0x9a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <osThreadNew+0x9e>
        return (NULL);
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e054      	b.n	8001ffc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	089b      	lsrs	r3, r3, #2
 8001f60:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00e      	beq.n	8001f88 <osThreadNew+0xd4>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	2b5b      	cmp	r3, #91	; 0x5b
 8001f70:	d90a      	bls.n	8001f88 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d006      	beq.n	8001f88 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d002      	beq.n	8001f88 <osThreadNew+0xd4>
        mem = 1;
 8001f82:	2301      	movs	r3, #1
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f86:	e010      	b.n	8001faa <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10c      	bne.n	8001faa <osThreadNew+0xf6>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d108      	bne.n	8001faa <osThreadNew+0xf6>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d104      	bne.n	8001faa <osThreadNew+0xf6>
          mem = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fa4:	e001      	b.n	8001faa <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d110      	bne.n	8001fd2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001fb8:	9202      	str	r2, [sp, #8]
 8001fba:	9301      	str	r3, [sp, #4]
 8001fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fc4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 fe12 	bl	8002bf0 <xTaskCreateStatic>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	e013      	b.n	8001ffa <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d110      	bne.n	8001ffa <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	9301      	str	r3, [sp, #4]
 8001fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 fe5c 	bl	8002ca8 <xTaskCreate>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d001      	beq.n	8001ffa <osThreadNew+0x146>
          hTask = NULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001ffa:	697b      	ldr	r3, [r7, #20]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3738      	adds	r7, #56	; 0x38
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	2000009c 	.word	0x2000009c

08002008 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002010:	f3ef 8305 	mrs	r3, IPSR
 8002014:	613b      	str	r3, [r7, #16]
  return(result);
 8002016:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10f      	bne.n	800203c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800201c:	f3ef 8310 	mrs	r3, PRIMASK
 8002020:	60fb      	str	r3, [r7, #12]
  return(result);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d109      	bne.n	800203c <osDelay+0x34>
 8002028:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <osDelay+0x58>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d109      	bne.n	8002044 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002030:	f3ef 8311 	mrs	r3, BASEPRI
 8002034:	60bb      	str	r3, [r7, #8]
  return(result);
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <osDelay+0x3c>
    stat = osErrorISR;
 800203c:	f06f 0305 	mvn.w	r3, #5
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	e007      	b.n	8002054 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d002      	beq.n	8002054 <osDelay+0x4c>
      vTaskDelay(ticks);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 ff66 	bl	8002f20 <vTaskDelay>
    }
  }

  return (stat);
 8002054:	697b      	ldr	r3, [r7, #20]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	2000009c 	.word	0x2000009c

08002064 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4a06      	ldr	r2, [pc, #24]	; (800208c <vApplicationGetIdleTaskMemory+0x28>)
 8002074:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	4a05      	ldr	r2, [pc, #20]	; (8002090 <vApplicationGetIdleTaskMemory+0x2c>)
 800207a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2280      	movs	r2, #128	; 0x80
 8002080:	601a      	str	r2, [r3, #0]
}
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	200000a0 	.word	0x200000a0
 8002090:	200000fc 	.word	0x200000fc

08002094 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4a07      	ldr	r2, [pc, #28]	; (80020c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80020a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	4a06      	ldr	r2, [pc, #24]	; (80020c4 <vApplicationGetTimerTaskMemory+0x30>)
 80020aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020b2:	601a      	str	r2, [r3, #0]
}
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	200002fc 	.word	0x200002fc
 80020c4:	20000358 	.word	0x20000358

080020c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f103 0208 	add.w	r2, r3, #8
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f04f 32ff 	mov.w	r2, #4294967295
 80020e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f103 0208 	add.w	r2, r3, #8
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f103 0208 	add.w	r2, r3, #8
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr

0800211e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800211e:	b480      	push	{r7}
 8002120:	b085      	sub	sp, #20
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	601a      	str	r2, [r3, #0]
}
 800215a:	bf00      	nop
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217a:	d103      	bne.n	8002184 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	e00c      	b.n	800219e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3308      	adds	r3, #8
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	e002      	b.n	8002192 <vListInsert+0x2e>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	429a      	cmp	r2, r3
 800219c:	d2f6      	bcs.n	800218c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	601a      	str	r2, [r3, #0]
}
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6892      	ldr	r2, [r2, #8]
 80021ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6852      	ldr	r2, [r2, #4]
 80021f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d103      	bne.n	8002208 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	1e5a      	subs	r2, r3, #1
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr
	...

08002228 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10a      	bne.n	8002252 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800223c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002240:	f383 8811 	msr	BASEPRI, r3
 8002244:	f3bf 8f6f 	isb	sy
 8002248:	f3bf 8f4f 	dsb	sy
 800224c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800224e:	bf00      	nop
 8002250:	e7fe      	b.n	8002250 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002252:	f002 f8c3 	bl	80043dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225e:	68f9      	ldr	r1, [r7, #12]
 8002260:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002262:	fb01 f303 	mul.w	r3, r1, r3
 8002266:	441a      	add	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002282:	3b01      	subs	r3, #1
 8002284:	68f9      	ldr	r1, [r7, #12]
 8002286:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002288:	fb01 f303 	mul.w	r3, r1, r3
 800228c:	441a      	add	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	22ff      	movs	r2, #255	; 0xff
 8002296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	22ff      	movs	r2, #255	; 0xff
 800229e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d114      	bne.n	80022d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d01a      	beq.n	80022e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	3310      	adds	r3, #16
 80022b4:	4618      	mov	r0, r3
 80022b6:	f001 f8f1 	bl	800349c <xTaskRemoveFromEventList>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d012      	beq.n	80022e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <xQueueGenericReset+0xcc>)
 80022c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	f3bf 8f4f 	dsb	sy
 80022cc:	f3bf 8f6f 	isb	sy
 80022d0:	e009      	b.n	80022e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	3310      	adds	r3, #16
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fef6 	bl	80020c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	3324      	adds	r3, #36	; 0x24
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fef1 	bl	80020c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80022e6:	f002 f8a9 	bl	800443c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80022ea:	2301      	movs	r3, #1
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	e000ed04 	.word	0xe000ed04

080022f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08e      	sub	sp, #56	; 0x38
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
 8002304:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10a      	bne.n	8002322 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800230c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002310:	f383 8811 	msr	BASEPRI, r3
 8002314:	f3bf 8f6f 	isb	sy
 8002318:	f3bf 8f4f 	dsb	sy
 800231c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800231e:	bf00      	nop
 8002320:	e7fe      	b.n	8002320 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10a      	bne.n	800233e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232c:	f383 8811 	msr	BASEPRI, r3
 8002330:	f3bf 8f6f 	isb	sy
 8002334:	f3bf 8f4f 	dsb	sy
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
}
 800233a:	bf00      	nop
 800233c:	e7fe      	b.n	800233c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <xQueueGenericCreateStatic+0x52>
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <xQueueGenericCreateStatic+0x56>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <xQueueGenericCreateStatic+0x58>
 800234e:	2300      	movs	r3, #0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10a      	bne.n	800236a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002358:	f383 8811 	msr	BASEPRI, r3
 800235c:	f3bf 8f6f 	isb	sy
 8002360:	f3bf 8f4f 	dsb	sy
 8002364:	623b      	str	r3, [r7, #32]
}
 8002366:	bf00      	nop
 8002368:	e7fe      	b.n	8002368 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d102      	bne.n	8002376 <xQueueGenericCreateStatic+0x7e>
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <xQueueGenericCreateStatic+0x82>
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <xQueueGenericCreateStatic+0x84>
 800237a:	2300      	movs	r3, #0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10a      	bne.n	8002396 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002384:	f383 8811 	msr	BASEPRI, r3
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	f3bf 8f4f 	dsb	sy
 8002390:	61fb      	str	r3, [r7, #28]
}
 8002392:	bf00      	nop
 8002394:	e7fe      	b.n	8002394 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002396:	2350      	movs	r3, #80	; 0x50
 8002398:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2b50      	cmp	r3, #80	; 0x50
 800239e:	d00a      	beq.n	80023b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80023a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a4:	f383 8811 	msr	BASEPRI, r3
 80023a8:	f3bf 8f6f 	isb	sy
 80023ac:	f3bf 8f4f 	dsb	sy
 80023b0:	61bb      	str	r3, [r7, #24]
}
 80023b2:	bf00      	nop
 80023b4:	e7fe      	b.n	80023b4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80023ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00d      	beq.n	80023dc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80023c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023c8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80023cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	4613      	mov	r3, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 f805 	bl	80023e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80023dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80023de:	4618      	mov	r0, r3
 80023e0:	3730      	adds	r7, #48	; 0x30
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b084      	sub	sp, #16
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d103      	bne.n	8002402 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	e002      	b.n	8002408 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002414:	2101      	movs	r1, #1
 8002416:	69b8      	ldr	r0, [r7, #24]
 8002418:	f7ff ff06 	bl	8002228 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	78fa      	ldrb	r2, [r7, #3]
 8002420:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002424:	bf00      	nop
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08e      	sub	sp, #56	; 0x38
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
 8002438:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800243a:	2300      	movs	r3, #0
 800243c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10a      	bne.n	800245e <xQueueGenericSend+0x32>
	__asm volatile
 8002448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244c:	f383 8811 	msr	BASEPRI, r3
 8002450:	f3bf 8f6f 	isb	sy
 8002454:	f3bf 8f4f 	dsb	sy
 8002458:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800245a:	bf00      	nop
 800245c:	e7fe      	b.n	800245c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d103      	bne.n	800246c <xQueueGenericSend+0x40>
 8002464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <xQueueGenericSend+0x44>
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <xQueueGenericSend+0x46>
 8002470:	2300      	movs	r3, #0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10a      	bne.n	800248c <xQueueGenericSend+0x60>
	__asm volatile
 8002476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247a:	f383 8811 	msr	BASEPRI, r3
 800247e:	f3bf 8f6f 	isb	sy
 8002482:	f3bf 8f4f 	dsb	sy
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002488:	bf00      	nop
 800248a:	e7fe      	b.n	800248a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d103      	bne.n	800249a <xQueueGenericSend+0x6e>
 8002492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <xQueueGenericSend+0x72>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <xQueueGenericSend+0x74>
 800249e:	2300      	movs	r3, #0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10a      	bne.n	80024ba <xQueueGenericSend+0x8e>
	__asm volatile
 80024a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a8:	f383 8811 	msr	BASEPRI, r3
 80024ac:	f3bf 8f6f 	isb	sy
 80024b0:	f3bf 8f4f 	dsb	sy
 80024b4:	623b      	str	r3, [r7, #32]
}
 80024b6:	bf00      	nop
 80024b8:	e7fe      	b.n	80024b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024ba:	f001 f9b1 	bl	8003820 <xTaskGetSchedulerState>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d102      	bne.n	80024ca <xQueueGenericSend+0x9e>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <xQueueGenericSend+0xa2>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <xQueueGenericSend+0xa4>
 80024ce:	2300      	movs	r3, #0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10a      	bne.n	80024ea <xQueueGenericSend+0xbe>
	__asm volatile
 80024d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d8:	f383 8811 	msr	BASEPRI, r3
 80024dc:	f3bf 8f6f 	isb	sy
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	61fb      	str	r3, [r7, #28]
}
 80024e6:	bf00      	nop
 80024e8:	e7fe      	b.n	80024e8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80024ea:	f001 ff77 	bl	80043dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d302      	bcc.n	8002500 <xQueueGenericSend+0xd4>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d129      	bne.n	8002554 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	68b9      	ldr	r1, [r7, #8]
 8002504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002506:	f000 fa07 	bl	8002918 <prvCopyDataToQueue>
 800250a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800250c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	2b00      	cmp	r3, #0
 8002512:	d010      	beq.n	8002536 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002516:	3324      	adds	r3, #36	; 0x24
 8002518:	4618      	mov	r0, r3
 800251a:	f000 ffbf 	bl	800349c <xTaskRemoveFromEventList>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d013      	beq.n	800254c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002524:	4b3f      	ldr	r3, [pc, #252]	; (8002624 <xQueueGenericSend+0x1f8>)
 8002526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	f3bf 8f4f 	dsb	sy
 8002530:	f3bf 8f6f 	isb	sy
 8002534:	e00a      	b.n	800254c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800253c:	4b39      	ldr	r3, [pc, #228]	; (8002624 <xQueueGenericSend+0x1f8>)
 800253e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	f3bf 8f4f 	dsb	sy
 8002548:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800254c:	f001 ff76 	bl	800443c <vPortExitCritical>
				return pdPASS;
 8002550:	2301      	movs	r3, #1
 8002552:	e063      	b.n	800261c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d103      	bne.n	8002562 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800255a:	f001 ff6f 	bl	800443c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800255e:	2300      	movs	r3, #0
 8002560:	e05c      	b.n	800261c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002564:	2b00      	cmp	r3, #0
 8002566:	d106      	bne.n	8002576 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	4618      	mov	r0, r3
 800256e:	f000 fff9 	bl	8003564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002572:	2301      	movs	r3, #1
 8002574:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002576:	f001 ff61 	bl	800443c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800257a:	f000 fd6b 	bl	8003054 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800257e:	f001 ff2d 	bl	80043dc <vPortEnterCritical>
 8002582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002584:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002588:	b25b      	sxtb	r3, r3
 800258a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258e:	d103      	bne.n	8002598 <xQueueGenericSend+0x16c>
 8002590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800259e:	b25b      	sxtb	r3, r3
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d103      	bne.n	80025ae <xQueueGenericSend+0x182>
 80025a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025ae:	f001 ff45 	bl	800443c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025b2:	1d3a      	adds	r2, r7, #4
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	4611      	mov	r1, r2
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 ffe8 	bl	8003590 <xTaskCheckForTimeOut>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d124      	bne.n	8002610 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80025c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025c8:	f000 fa9e 	bl	8002b08 <prvIsQueueFull>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d018      	beq.n	8002604 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80025d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d4:	3310      	adds	r3, #16
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	4611      	mov	r1, r2
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 ff0e 	bl	80033fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80025e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025e2:	f000 fa29 	bl	8002a38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80025e6:	f000 fd43 	bl	8003070 <xTaskResumeAll>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f47f af7c 	bne.w	80024ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80025f2:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <xQueueGenericSend+0x1f8>)
 80025f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	f3bf 8f4f 	dsb	sy
 80025fe:	f3bf 8f6f 	isb	sy
 8002602:	e772      	b.n	80024ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002606:	f000 fa17 	bl	8002a38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800260a:	f000 fd31 	bl	8003070 <xTaskResumeAll>
 800260e:	e76c      	b.n	80024ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002612:	f000 fa11 	bl	8002a38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002616:	f000 fd2b 	bl	8003070 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800261a:	2300      	movs	r3, #0
		}
	}
}
 800261c:	4618      	mov	r0, r3
 800261e:	3738      	adds	r7, #56	; 0x38
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	e000ed04 	.word	0xe000ed04

08002628 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08e      	sub	sp, #56	; 0x38
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
 8002634:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800263a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10a      	bne.n	8002656 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002652:	bf00      	nop
 8002654:	e7fe      	b.n	8002654 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d103      	bne.n	8002664 <xQueueGenericSendFromISR+0x3c>
 800265c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <xQueueGenericSendFromISR+0x40>
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <xQueueGenericSendFromISR+0x42>
 8002668:	2300      	movs	r3, #0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10a      	bne.n	8002684 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800266e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002672:	f383 8811 	msr	BASEPRI, r3
 8002676:	f3bf 8f6f 	isb	sy
 800267a:	f3bf 8f4f 	dsb	sy
 800267e:	623b      	str	r3, [r7, #32]
}
 8002680:	bf00      	nop
 8002682:	e7fe      	b.n	8002682 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d103      	bne.n	8002692 <xQueueGenericSendFromISR+0x6a>
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <xQueueGenericSendFromISR+0x6e>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <xQueueGenericSendFromISR+0x70>
 8002696:	2300      	movs	r3, #0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10a      	bne.n	80026b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800269c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a0:	f383 8811 	msr	BASEPRI, r3
 80026a4:	f3bf 8f6f 	isb	sy
 80026a8:	f3bf 8f4f 	dsb	sy
 80026ac:	61fb      	str	r3, [r7, #28]
}
 80026ae:	bf00      	nop
 80026b0:	e7fe      	b.n	80026b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026b2:	f001 ff55 	bl	8004560 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80026b6:	f3ef 8211 	mrs	r2, BASEPRI
 80026ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026be:	f383 8811 	msr	BASEPRI, r3
 80026c2:	f3bf 8f6f 	isb	sy
 80026c6:	f3bf 8f4f 	dsb	sy
 80026ca:	61ba      	str	r2, [r7, #24]
 80026cc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80026ce:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026da:	429a      	cmp	r2, r3
 80026dc:	d302      	bcc.n	80026e4 <xQueueGenericSendFromISR+0xbc>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d12c      	bne.n	800273e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80026e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026f4:	f000 f910 	bl	8002918 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80026f8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80026fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002700:	d112      	bne.n	8002728 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	2b00      	cmp	r3, #0
 8002708:	d016      	beq.n	8002738 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800270a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270c:	3324      	adds	r3, #36	; 0x24
 800270e:	4618      	mov	r0, r3
 8002710:	f000 fec4 	bl	800349c <xTaskRemoveFromEventList>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00e      	beq.n	8002738 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00b      	beq.n	8002738 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	e007      	b.n	8002738 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002728:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800272c:	3301      	adds	r3, #1
 800272e:	b2db      	uxtb	r3, r3
 8002730:	b25a      	sxtb	r2, r3
 8002732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002738:	2301      	movs	r3, #1
 800273a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800273c:	e001      	b.n	8002742 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800273e:	2300      	movs	r3, #0
 8002740:	637b      	str	r3, [r7, #52]	; 0x34
 8002742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002744:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800274c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800274e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002750:	4618      	mov	r0, r3
 8002752:	3738      	adds	r7, #56	; 0x38
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08c      	sub	sp, #48	; 0x30
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002764:	2300      	movs	r3, #0
 8002766:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800276c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10a      	bne.n	8002788 <xQueueReceive+0x30>
	__asm volatile
 8002772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002776:	f383 8811 	msr	BASEPRI, r3
 800277a:	f3bf 8f6f 	isb	sy
 800277e:	f3bf 8f4f 	dsb	sy
 8002782:	623b      	str	r3, [r7, #32]
}
 8002784:	bf00      	nop
 8002786:	e7fe      	b.n	8002786 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d103      	bne.n	8002796 <xQueueReceive+0x3e>
 800278e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <xQueueReceive+0x42>
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <xQueueReceive+0x44>
 800279a:	2300      	movs	r3, #0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10a      	bne.n	80027b6 <xQueueReceive+0x5e>
	__asm volatile
 80027a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a4:	f383 8811 	msr	BASEPRI, r3
 80027a8:	f3bf 8f6f 	isb	sy
 80027ac:	f3bf 8f4f 	dsb	sy
 80027b0:	61fb      	str	r3, [r7, #28]
}
 80027b2:	bf00      	nop
 80027b4:	e7fe      	b.n	80027b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027b6:	f001 f833 	bl	8003820 <xTaskGetSchedulerState>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d102      	bne.n	80027c6 <xQueueReceive+0x6e>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <xQueueReceive+0x72>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <xQueueReceive+0x74>
 80027ca:	2300      	movs	r3, #0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10a      	bne.n	80027e6 <xQueueReceive+0x8e>
	__asm volatile
 80027d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d4:	f383 8811 	msr	BASEPRI, r3
 80027d8:	f3bf 8f6f 	isb	sy
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	61bb      	str	r3, [r7, #24]
}
 80027e2:	bf00      	nop
 80027e4:	e7fe      	b.n	80027e4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80027e6:	f001 fdf9 	bl	80043dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d01f      	beq.n	8002836 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027fa:	f000 f8f7 	bl	80029ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	1e5a      	subs	r2, r3, #1
 8002802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002804:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00f      	beq.n	800282e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	3310      	adds	r3, #16
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fe42 	bl	800349c <xTaskRemoveFromEventList>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800281e:	4b3d      	ldr	r3, [pc, #244]	; (8002914 <xQueueReceive+0x1bc>)
 8002820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	f3bf 8f4f 	dsb	sy
 800282a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800282e:	f001 fe05 	bl	800443c <vPortExitCritical>
				return pdPASS;
 8002832:	2301      	movs	r3, #1
 8002834:	e069      	b.n	800290a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d103      	bne.n	8002844 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800283c:	f001 fdfe 	bl	800443c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002840:	2300      	movs	r3, #0
 8002842:	e062      	b.n	800290a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800284a:	f107 0310 	add.w	r3, r7, #16
 800284e:	4618      	mov	r0, r3
 8002850:	f000 fe88 	bl	8003564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002854:	2301      	movs	r3, #1
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002858:	f001 fdf0 	bl	800443c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800285c:	f000 fbfa 	bl	8003054 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002860:	f001 fdbc 	bl	80043dc <vPortEnterCritical>
 8002864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002866:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800286a:	b25b      	sxtb	r3, r3
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d103      	bne.n	800287a <xQueueReceive+0x122>
 8002872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002880:	b25b      	sxtb	r3, r3
 8002882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002886:	d103      	bne.n	8002890 <xQueueReceive+0x138>
 8002888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002890:	f001 fdd4 	bl	800443c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002894:	1d3a      	adds	r2, r7, #4
 8002896:	f107 0310 	add.w	r3, r7, #16
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f000 fe77 	bl	8003590 <xTaskCheckForTimeOut>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d123      	bne.n	80028f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028aa:	f000 f917 	bl	8002adc <prvIsQueueEmpty>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d017      	beq.n	80028e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b6:	3324      	adds	r3, #36	; 0x24
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	4611      	mov	r1, r2
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fd9d 	bl	80033fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80028c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028c4:	f000 f8b8 	bl	8002a38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80028c8:	f000 fbd2 	bl	8003070 <xTaskResumeAll>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d189      	bne.n	80027e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <xQueueReceive+0x1bc>)
 80028d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	f3bf 8f4f 	dsb	sy
 80028de:	f3bf 8f6f 	isb	sy
 80028e2:	e780      	b.n	80027e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80028e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028e6:	f000 f8a7 	bl	8002a38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80028ea:	f000 fbc1 	bl	8003070 <xTaskResumeAll>
 80028ee:	e77a      	b.n	80027e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80028f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028f2:	f000 f8a1 	bl	8002a38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028f6:	f000 fbbb 	bl	8003070 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028fc:	f000 f8ee 	bl	8002adc <prvIsQueueEmpty>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	f43f af6f 	beq.w	80027e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002908:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800290a:	4618      	mov	r0, r3
 800290c:	3730      	adds	r7, #48	; 0x30
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	e000ed04 	.word	0xe000ed04

08002918 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10d      	bne.n	8002952 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d14d      	bne.n	80029da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4618      	mov	r0, r3
 8002944:	f000 ff8a 	bl	800385c <xTaskPriorityDisinherit>
 8002948:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	605a      	str	r2, [r3, #4]
 8002950:	e043      	b.n	80029da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d119      	bne.n	800298c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6898      	ldr	r0, [r3, #8]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	461a      	mov	r2, r3
 8002962:	68b9      	ldr	r1, [r7, #8]
 8002964:	f002 f83c 	bl	80049e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	441a      	add	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	429a      	cmp	r2, r3
 8002980:	d32b      	bcc.n	80029da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	609a      	str	r2, [r3, #8]
 800298a:	e026      	b.n	80029da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	68d8      	ldr	r0, [r3, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	461a      	mov	r2, r3
 8002996:	68b9      	ldr	r1, [r7, #8]
 8002998:	f002 f822 	bl	80049e0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	425b      	negs	r3, r3
 80029a6:	441a      	add	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d207      	bcs.n	80029c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	425b      	negs	r3, r3
 80029c2:	441a      	add	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d105      	bne.n	80029da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80029e2:	697b      	ldr	r3, [r7, #20]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d018      	beq.n	8002a30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	441a      	add	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d303      	bcc.n	8002a20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68d9      	ldr	r1, [r3, #12]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	461a      	mov	r2, r3
 8002a2a:	6838      	ldr	r0, [r7, #0]
 8002a2c:	f001 ffd8 	bl	80049e0 <memcpy>
	}
}
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002a40:	f001 fccc 	bl	80043dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a4c:	e011      	b.n	8002a72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d012      	beq.n	8002a7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3324      	adds	r3, #36	; 0x24
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fd1e 	bl	800349c <xTaskRemoveFromEventList>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002a66:	f000 fdf5 	bl	8003654 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	dce9      	bgt.n	8002a4e <prvUnlockQueue+0x16>
 8002a7a:	e000      	b.n	8002a7e <prvUnlockQueue+0x46>
					break;
 8002a7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	22ff      	movs	r2, #255	; 0xff
 8002a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002a86:	f001 fcd9 	bl	800443c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a8a:	f001 fca7 	bl	80043dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a96:	e011      	b.n	8002abc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d012      	beq.n	8002ac6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3310      	adds	r3, #16
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 fcf9 	bl	800349c <xTaskRemoveFromEventList>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ab0:	f000 fdd0 	bl	8003654 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ab4:	7bbb      	ldrb	r3, [r7, #14]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002abc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	dce9      	bgt.n	8002a98 <prvUnlockQueue+0x60>
 8002ac4:	e000      	b.n	8002ac8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002ac6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	22ff      	movs	r2, #255	; 0xff
 8002acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002ad0:	f001 fcb4 	bl	800443c <vPortExitCritical>
}
 8002ad4:	bf00      	nop
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ae4:	f001 fc7a 	bl	80043dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d102      	bne.n	8002af6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002af0:	2301      	movs	r3, #1
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	e001      	b.n	8002afa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002afa:	f001 fc9f 	bl	800443c <vPortExitCritical>

	return xReturn;
 8002afe:	68fb      	ldr	r3, [r7, #12]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b10:	f001 fc64 	bl	80043dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d102      	bne.n	8002b26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b20:	2301      	movs	r3, #1
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	e001      	b.n	8002b2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b2a:	f001 fc87 	bl	800443c <vPortExitCritical>

	return xReturn;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	e014      	b.n	8002b72 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b48:	4a0e      	ldr	r2, [pc, #56]	; (8002b84 <vQueueAddToRegistry+0x4c>)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10b      	bne.n	8002b6c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b54:	490b      	ldr	r1, [pc, #44]	; (8002b84 <vQueueAddToRegistry+0x4c>)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002b5e:	4a09      	ldr	r2, [pc, #36]	; (8002b84 <vQueueAddToRegistry+0x4c>)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4413      	add	r3, r2
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002b6a:	e006      	b.n	8002b7a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b07      	cmp	r3, #7
 8002b76:	d9e7      	bls.n	8002b48 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr
 8002b84:	20001a3c 	.word	0x20001a3c

08002b88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002b98:	f001 fc20 	bl	80043dc <vPortEnterCritical>
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ba2:	b25b      	sxtb	r3, r3
 8002ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba8:	d103      	bne.n	8002bb2 <vQueueWaitForMessageRestricted+0x2a>
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bb8:	b25b      	sxtb	r3, r3
 8002bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbe:	d103      	bne.n	8002bc8 <vQueueWaitForMessageRestricted+0x40>
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bc8:	f001 fc38 	bl	800443c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d106      	bne.n	8002be2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	3324      	adds	r3, #36	; 0x24
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	68b9      	ldr	r1, [r7, #8]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fc31 	bl	8003444 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002be2:	6978      	ldr	r0, [r7, #20]
 8002be4:	f7ff ff28 	bl	8002a38 <prvUnlockQueue>
	}
 8002be8:	bf00      	nop
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08e      	sub	sp, #56	; 0x38
 8002bf4:	af04      	add	r7, sp, #16
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10a      	bne.n	8002c1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c08:	f383 8811 	msr	BASEPRI, r3
 8002c0c:	f3bf 8f6f 	isb	sy
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	623b      	str	r3, [r7, #32]
}
 8002c16:	bf00      	nop
 8002c18:	e7fe      	b.n	8002c18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10a      	bne.n	8002c36 <xTaskCreateStatic+0x46>
	__asm volatile
 8002c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c24:	f383 8811 	msr	BASEPRI, r3
 8002c28:	f3bf 8f6f 	isb	sy
 8002c2c:	f3bf 8f4f 	dsb	sy
 8002c30:	61fb      	str	r3, [r7, #28]
}
 8002c32:	bf00      	nop
 8002c34:	e7fe      	b.n	8002c34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c36:	235c      	movs	r3, #92	; 0x5c
 8002c38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	2b5c      	cmp	r3, #92	; 0x5c
 8002c3e:	d00a      	beq.n	8002c56 <xTaskCreateStatic+0x66>
	__asm volatile
 8002c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c44:	f383 8811 	msr	BASEPRI, r3
 8002c48:	f3bf 8f6f 	isb	sy
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	61bb      	str	r3, [r7, #24]
}
 8002c52:	bf00      	nop
 8002c54:	e7fe      	b.n	8002c54 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01e      	beq.n	8002c9a <xTaskCreateStatic+0xaa>
 8002c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d01b      	beq.n	8002c9a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c6a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c74:	2300      	movs	r3, #0
 8002c76:	9303      	str	r3, [sp, #12]
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	9302      	str	r3, [sp, #8]
 8002c7c:	f107 0314 	add.w	r3, r7, #20
 8002c80:	9301      	str	r3, [sp, #4]
 8002c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f850 	bl	8002d32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c94:	f000 f8d4 	bl	8002e40 <prvAddNewTaskToReadyList>
 8002c98:	e001      	b.n	8002c9e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c9e:	697b      	ldr	r3, [r7, #20]
	}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3728      	adds	r7, #40	; 0x28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08c      	sub	sp, #48	; 0x30
 8002cac:	af04      	add	r7, sp, #16
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	603b      	str	r3, [r7, #0]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cb8:	88fb      	ldrh	r3, [r7, #6]
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f001 fc8d 	bl	80045dc <pvPortMalloc>
 8002cc2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00e      	beq.n	8002ce8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002cca:	205c      	movs	r0, #92	; 0x5c
 8002ccc:	f001 fc86 	bl	80045dc <pvPortMalloc>
 8002cd0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	631a      	str	r2, [r3, #48]	; 0x30
 8002cde:	e005      	b.n	8002cec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002ce0:	6978      	ldr	r0, [r7, #20]
 8002ce2:	f001 fd3f 	bl	8004764 <vPortFree>
 8002ce6:	e001      	b.n	8002cec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d017      	beq.n	8002d22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cfa:	88fa      	ldrh	r2, [r7, #6]
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	9303      	str	r3, [sp, #12]
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	9302      	str	r3, [sp, #8]
 8002d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d06:	9301      	str	r3, [sp, #4]
 8002d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	68b9      	ldr	r1, [r7, #8]
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f80e 	bl	8002d32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d16:	69f8      	ldr	r0, [r7, #28]
 8002d18:	f000 f892 	bl	8002e40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	e002      	b.n	8002d28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d22:	f04f 33ff 	mov.w	r3, #4294967295
 8002d26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d28:	69bb      	ldr	r3, [r7, #24]
	}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3720      	adds	r7, #32
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b088      	sub	sp, #32
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
 8002d3e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d42:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	461a      	mov	r2, r3
 8002d4a:	21a5      	movs	r1, #165	; 0xa5
 8002d4c:	f001 fe56 	bl	80049fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	f023 0307 	bic.w	r3, r3, #7
 8002d68:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <prvInitialiseNewTask+0x58>
	__asm volatile
 8002d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d78:	f383 8811 	msr	BASEPRI, r3
 8002d7c:	f3bf 8f6f 	isb	sy
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	617b      	str	r3, [r7, #20]
}
 8002d86:	bf00      	nop
 8002d88:	e7fe      	b.n	8002d88 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
 8002d8e:	e012      	b.n	8002db6 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	4413      	add	r3, r2
 8002d96:	7819      	ldrb	r1, [r3, #0]
 8002d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3334      	adds	r3, #52	; 0x34
 8002da0:	460a      	mov	r2, r1
 8002da2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	4413      	add	r3, r2
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d006      	beq.n	8002dbe <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	3301      	adds	r3, #1
 8002db4:	61fb      	str	r3, [r7, #28]
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	2b0f      	cmp	r3, #15
 8002dba:	d9e9      	bls.n	8002d90 <prvInitialiseNewTask+0x5e>
 8002dbc:	e000      	b.n	8002dc0 <prvInitialiseNewTask+0x8e>
		{
			break;
 8002dbe:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dca:	2b37      	cmp	r3, #55	; 0x37
 8002dcc:	d901      	bls.n	8002dd2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002dce:	2337      	movs	r3, #55	; 0x37
 8002dd0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dd6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ddc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de0:	2200      	movs	r2, #0
 8002de2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de6:	3304      	adds	r3, #4
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff f98c 	bl	8002106 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df0:	3318      	adds	r3, #24
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff f987 	bl	8002106 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dfc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e06:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e10:	2200      	movs	r2, #0
 8002e12:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	68f9      	ldr	r1, [r7, #12]
 8002e20:	69b8      	ldr	r0, [r7, #24]
 8002e22:	f001 f9ed 	bl	8004200 <pxPortInitialiseStack>
 8002e26:	4602      	mov	r2, r0
 8002e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e36:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e38:	bf00      	nop
 8002e3a:	3720      	adds	r7, #32
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e48:	f001 fac8 	bl	80043dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e4c:	4b2d      	ldr	r3, [pc, #180]	; (8002f04 <prvAddNewTaskToReadyList+0xc4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3301      	adds	r3, #1
 8002e52:	4a2c      	ldr	r2, [pc, #176]	; (8002f04 <prvAddNewTaskToReadyList+0xc4>)
 8002e54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e56:	4b2c      	ldr	r3, [pc, #176]	; (8002f08 <prvAddNewTaskToReadyList+0xc8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d109      	bne.n	8002e72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e5e:	4a2a      	ldr	r2, [pc, #168]	; (8002f08 <prvAddNewTaskToReadyList+0xc8>)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e64:	4b27      	ldr	r3, [pc, #156]	; (8002f04 <prvAddNewTaskToReadyList+0xc4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d110      	bne.n	8002e8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e6c:	f000 fc16 	bl	800369c <prvInitialiseTaskLists>
 8002e70:	e00d      	b.n	8002e8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e72:	4b26      	ldr	r3, [pc, #152]	; (8002f0c <prvAddNewTaskToReadyList+0xcc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d109      	bne.n	8002e8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e7a:	4b23      	ldr	r3, [pc, #140]	; (8002f08 <prvAddNewTaskToReadyList+0xc8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d802      	bhi.n	8002e8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e88:	4a1f      	ldr	r2, [pc, #124]	; (8002f08 <prvAddNewTaskToReadyList+0xc8>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e8e:	4b20      	ldr	r3, [pc, #128]	; (8002f10 <prvAddNewTaskToReadyList+0xd0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3301      	adds	r3, #1
 8002e94:	4a1e      	ldr	r2, [pc, #120]	; (8002f10 <prvAddNewTaskToReadyList+0xd0>)
 8002e96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e98:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <prvAddNewTaskToReadyList+0xd0>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	; (8002f14 <prvAddNewTaskToReadyList+0xd4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d903      	bls.n	8002eb4 <prvAddNewTaskToReadyList+0x74>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb0:	4a18      	ldr	r2, [pc, #96]	; (8002f14 <prvAddNewTaskToReadyList+0xd4>)
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4a15      	ldr	r2, [pc, #84]	; (8002f18 <prvAddNewTaskToReadyList+0xd8>)
 8002ec2:	441a      	add	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f7ff f927 	bl	800211e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002ed0:	f001 fab4 	bl	800443c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002ed4:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <prvAddNewTaskToReadyList+0xcc>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00e      	beq.n	8002efa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002edc:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <prvAddNewTaskToReadyList+0xc8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d207      	bcs.n	8002efa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002eea:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <prvAddNewTaskToReadyList+0xdc>)
 8002eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20000c2c 	.word	0x20000c2c
 8002f08:	20000758 	.word	0x20000758
 8002f0c:	20000c38 	.word	0x20000c38
 8002f10:	20000c48 	.word	0x20000c48
 8002f14:	20000c34 	.word	0x20000c34
 8002f18:	2000075c 	.word	0x2000075c
 8002f1c:	e000ed04 	.word	0xe000ed04

08002f20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d017      	beq.n	8002f62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f32:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <vTaskDelay+0x60>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00a      	beq.n	8002f50 <vTaskDelay+0x30>
	__asm volatile
 8002f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3e:	f383 8811 	msr	BASEPRI, r3
 8002f42:	f3bf 8f6f 	isb	sy
 8002f46:	f3bf 8f4f 	dsb	sy
 8002f4a:	60bb      	str	r3, [r7, #8]
}
 8002f4c:	bf00      	nop
 8002f4e:	e7fe      	b.n	8002f4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002f50:	f000 f880 	bl	8003054 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f54:	2100      	movs	r1, #0
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fdec 	bl	8003b34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f5c:	f000 f888 	bl	8003070 <xTaskResumeAll>
 8002f60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d107      	bne.n	8002f78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <vTaskDelay+0x64>)
 8002f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f78:	bf00      	nop
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20000c54 	.word	0x20000c54
 8002f84:	e000ed04 	.word	0xe000ed04

08002f88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08a      	sub	sp, #40	; 0x28
 8002f8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f96:	463a      	mov	r2, r7
 8002f98:	1d39      	adds	r1, r7, #4
 8002f9a:	f107 0308 	add.w	r3, r7, #8
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff f860 	bl	8002064 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002fa4:	6839      	ldr	r1, [r7, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	9202      	str	r2, [sp, #8]
 8002fac:	9301      	str	r3, [sp, #4]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	460a      	mov	r2, r1
 8002fb6:	4921      	ldr	r1, [pc, #132]	; (800303c <vTaskStartScheduler+0xb4>)
 8002fb8:	4821      	ldr	r0, [pc, #132]	; (8003040 <vTaskStartScheduler+0xb8>)
 8002fba:	f7ff fe19 	bl	8002bf0 <xTaskCreateStatic>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	4a20      	ldr	r2, [pc, #128]	; (8003044 <vTaskStartScheduler+0xbc>)
 8002fc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002fc4:	4b1f      	ldr	r3, [pc, #124]	; (8003044 <vTaskStartScheduler+0xbc>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	e001      	b.n	8002fd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d102      	bne.n	8002fe2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002fdc:	f000 fdfe 	bl	8003bdc <xTimerCreateTimerTask>
 8002fe0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d116      	bne.n	8003016 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fec:	f383 8811 	msr	BASEPRI, r3
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	613b      	str	r3, [r7, #16]
}
 8002ffa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002ffc:	4b12      	ldr	r3, [pc, #72]	; (8003048 <vTaskStartScheduler+0xc0>)
 8002ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8003002:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003004:	4b11      	ldr	r3, [pc, #68]	; (800304c <vTaskStartScheduler+0xc4>)
 8003006:	2201      	movs	r2, #1
 8003008:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800300a:	4b11      	ldr	r3, [pc, #68]	; (8003050 <vTaskStartScheduler+0xc8>)
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003010:	f001 f972 	bl	80042f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003014:	e00e      	b.n	8003034 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301c:	d10a      	bne.n	8003034 <vTaskStartScheduler+0xac>
	__asm volatile
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	60fb      	str	r3, [r7, #12]
}
 8003030:	bf00      	nop
 8003032:	e7fe      	b.n	8003032 <vTaskStartScheduler+0xaa>
}
 8003034:	bf00      	nop
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	080052dc 	.word	0x080052dc
 8003040:	0800366d 	.word	0x0800366d
 8003044:	20000c50 	.word	0x20000c50
 8003048:	20000c4c 	.word	0x20000c4c
 800304c:	20000c38 	.word	0x20000c38
 8003050:	20000c30 	.word	0x20000c30

08003054 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003058:	4b04      	ldr	r3, [pc, #16]	; (800306c <vTaskSuspendAll+0x18>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3301      	adds	r3, #1
 800305e:	4a03      	ldr	r2, [pc, #12]	; (800306c <vTaskSuspendAll+0x18>)
 8003060:	6013      	str	r3, [r2, #0]
}
 8003062:	bf00      	nop
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	20000c54 	.word	0x20000c54

08003070 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800307e:	4b42      	ldr	r3, [pc, #264]	; (8003188 <xTaskResumeAll+0x118>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10a      	bne.n	800309c <xTaskResumeAll+0x2c>
	__asm volatile
 8003086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	603b      	str	r3, [r7, #0]
}
 8003098:	bf00      	nop
 800309a:	e7fe      	b.n	800309a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800309c:	f001 f99e 	bl	80043dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80030a0:	4b39      	ldr	r3, [pc, #228]	; (8003188 <xTaskResumeAll+0x118>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	4a38      	ldr	r2, [pc, #224]	; (8003188 <xTaskResumeAll+0x118>)
 80030a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030aa:	4b37      	ldr	r3, [pc, #220]	; (8003188 <xTaskResumeAll+0x118>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d162      	bne.n	8003178 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030b2:	4b36      	ldr	r3, [pc, #216]	; (800318c <xTaskResumeAll+0x11c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d05e      	beq.n	8003178 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030ba:	e02f      	b.n	800311c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80030bc:	4b34      	ldr	r3, [pc, #208]	; (8003190 <xTaskResumeAll+0x120>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3318      	adds	r3, #24
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff f883 	bl	80021d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	3304      	adds	r3, #4
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff f87e 	bl	80021d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030dc:	4b2d      	ldr	r3, [pc, #180]	; (8003194 <xTaskResumeAll+0x124>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d903      	bls.n	80030ec <xTaskResumeAll+0x7c>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	4a2a      	ldr	r2, [pc, #168]	; (8003194 <xTaskResumeAll+0x124>)
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4a27      	ldr	r2, [pc, #156]	; (8003198 <xTaskResumeAll+0x128>)
 80030fa:	441a      	add	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	3304      	adds	r3, #4
 8003100:	4619      	mov	r1, r3
 8003102:	4610      	mov	r0, r2
 8003104:	f7ff f80b 	bl	800211e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800310c:	4b23      	ldr	r3, [pc, #140]	; (800319c <xTaskResumeAll+0x12c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003112:	429a      	cmp	r2, r3
 8003114:	d302      	bcc.n	800311c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003116:	4b22      	ldr	r3, [pc, #136]	; (80031a0 <xTaskResumeAll+0x130>)
 8003118:	2201      	movs	r2, #1
 800311a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800311c:	4b1c      	ldr	r3, [pc, #112]	; (8003190 <xTaskResumeAll+0x120>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1cb      	bne.n	80030bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800312a:	f000 fb55 	bl	80037d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800312e:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <xTaskResumeAll+0x134>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d010      	beq.n	800315c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800313a:	f000 f845 	bl	80031c8 <xTaskIncrementTick>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003144:	4b16      	ldr	r3, [pc, #88]	; (80031a0 <xTaskResumeAll+0x130>)
 8003146:	2201      	movs	r2, #1
 8003148:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3b01      	subs	r3, #1
 800314e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f1      	bne.n	800313a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003156:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <xTaskResumeAll+0x134>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800315c:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <xTaskResumeAll+0x130>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d009      	beq.n	8003178 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003164:	2301      	movs	r3, #1
 8003166:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003168:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <xTaskResumeAll+0x138>)
 800316a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003178:	f001 f960 	bl	800443c <vPortExitCritical>

	return xAlreadyYielded;
 800317c:	68bb      	ldr	r3, [r7, #8]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20000c54 	.word	0x20000c54
 800318c:	20000c2c 	.word	0x20000c2c
 8003190:	20000bec 	.word	0x20000bec
 8003194:	20000c34 	.word	0x20000c34
 8003198:	2000075c 	.word	0x2000075c
 800319c:	20000758 	.word	0x20000758
 80031a0:	20000c40 	.word	0x20000c40
 80031a4:	20000c3c 	.word	0x20000c3c
 80031a8:	e000ed04 	.word	0xe000ed04

080031ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80031b2:	4b04      	ldr	r3, [pc, #16]	; (80031c4 <xTaskGetTickCount+0x18>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80031b8:	687b      	ldr	r3, [r7, #4]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr
 80031c4:	20000c30 	.word	0x20000c30

080031c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031d2:	4b51      	ldr	r3, [pc, #324]	; (8003318 <xTaskIncrementTick+0x150>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f040 808e 	bne.w	80032f8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031dc:	4b4f      	ldr	r3, [pc, #316]	; (800331c <xTaskIncrementTick+0x154>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3301      	adds	r3, #1
 80031e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80031e4:	4a4d      	ldr	r2, [pc, #308]	; (800331c <xTaskIncrementTick+0x154>)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d120      	bne.n	8003232 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80031f0:	4b4b      	ldr	r3, [pc, #300]	; (8003320 <xTaskIncrementTick+0x158>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <xTaskIncrementTick+0x48>
	__asm volatile
 80031fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fe:	f383 8811 	msr	BASEPRI, r3
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	603b      	str	r3, [r7, #0]
}
 800320c:	bf00      	nop
 800320e:	e7fe      	b.n	800320e <xTaskIncrementTick+0x46>
 8003210:	4b43      	ldr	r3, [pc, #268]	; (8003320 <xTaskIncrementTick+0x158>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	4b43      	ldr	r3, [pc, #268]	; (8003324 <xTaskIncrementTick+0x15c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a41      	ldr	r2, [pc, #260]	; (8003320 <xTaskIncrementTick+0x158>)
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	4a41      	ldr	r2, [pc, #260]	; (8003324 <xTaskIncrementTick+0x15c>)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	4b40      	ldr	r3, [pc, #256]	; (8003328 <xTaskIncrementTick+0x160>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	3301      	adds	r3, #1
 800322a:	4a3f      	ldr	r2, [pc, #252]	; (8003328 <xTaskIncrementTick+0x160>)
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	f000 fad3 	bl	80037d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003232:	4b3e      	ldr	r3, [pc, #248]	; (800332c <xTaskIncrementTick+0x164>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	429a      	cmp	r2, r3
 800323a:	d34e      	bcc.n	80032da <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800323c:	4b38      	ldr	r3, [pc, #224]	; (8003320 <xTaskIncrementTick+0x158>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <xTaskIncrementTick+0x82>
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <xTaskIncrementTick+0x84>
 800324a:	2300      	movs	r3, #0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d004      	beq.n	800325a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003250:	4b36      	ldr	r3, [pc, #216]	; (800332c <xTaskIncrementTick+0x164>)
 8003252:	f04f 32ff 	mov.w	r2, #4294967295
 8003256:	601a      	str	r2, [r3, #0]
					break;
 8003258:	e03f      	b.n	80032da <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800325a:	4b31      	ldr	r3, [pc, #196]	; (8003320 <xTaskIncrementTick+0x158>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	429a      	cmp	r2, r3
 8003270:	d203      	bcs.n	800327a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003272:	4a2e      	ldr	r2, [pc, #184]	; (800332c <xTaskIncrementTick+0x164>)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6013      	str	r3, [r2, #0]
						break;
 8003278:	e02f      	b.n	80032da <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	3304      	adds	r3, #4
 800327e:	4618      	mov	r0, r3
 8003280:	f7fe ffa8 	bl	80021d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	2b00      	cmp	r3, #0
 800328a:	d004      	beq.n	8003296 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	3318      	adds	r3, #24
 8003290:	4618      	mov	r0, r3
 8003292:	f7fe ff9f 	bl	80021d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329a:	4b25      	ldr	r3, [pc, #148]	; (8003330 <xTaskIncrementTick+0x168>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d903      	bls.n	80032aa <xTaskIncrementTick+0xe2>
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	4a22      	ldr	r2, [pc, #136]	; (8003330 <xTaskIncrementTick+0x168>)
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4a1f      	ldr	r2, [pc, #124]	; (8003334 <xTaskIncrementTick+0x16c>)
 80032b8:	441a      	add	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	3304      	adds	r3, #4
 80032be:	4619      	mov	r1, r3
 80032c0:	4610      	mov	r0, r2
 80032c2:	f7fe ff2c 	bl	800211e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ca:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <xTaskIncrementTick+0x170>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d3b3      	bcc.n	800323c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80032d4:	2301      	movs	r3, #1
 80032d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032d8:	e7b0      	b.n	800323c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80032da:	4b17      	ldr	r3, [pc, #92]	; (8003338 <xTaskIncrementTick+0x170>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e0:	4914      	ldr	r1, [pc, #80]	; (8003334 <xTaskIncrementTick+0x16c>)
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d907      	bls.n	8003302 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80032f2:	2301      	movs	r3, #1
 80032f4:	617b      	str	r3, [r7, #20]
 80032f6:	e004      	b.n	8003302 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80032f8:	4b10      	ldr	r3, [pc, #64]	; (800333c <xTaskIncrementTick+0x174>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3301      	adds	r3, #1
 80032fe:	4a0f      	ldr	r2, [pc, #60]	; (800333c <xTaskIncrementTick+0x174>)
 8003300:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003302:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <xTaskIncrementTick+0x178>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800330a:	2301      	movs	r3, #1
 800330c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800330e:	697b      	ldr	r3, [r7, #20]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20000c54 	.word	0x20000c54
 800331c:	20000c30 	.word	0x20000c30
 8003320:	20000be4 	.word	0x20000be4
 8003324:	20000be8 	.word	0x20000be8
 8003328:	20000c44 	.word	0x20000c44
 800332c:	20000c4c 	.word	0x20000c4c
 8003330:	20000c34 	.word	0x20000c34
 8003334:	2000075c 	.word	0x2000075c
 8003338:	20000758 	.word	0x20000758
 800333c:	20000c3c 	.word	0x20000c3c
 8003340:	20000c40 	.word	0x20000c40

08003344 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800334a:	4b27      	ldr	r3, [pc, #156]	; (80033e8 <vTaskSwitchContext+0xa4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003352:	4b26      	ldr	r3, [pc, #152]	; (80033ec <vTaskSwitchContext+0xa8>)
 8003354:	2201      	movs	r2, #1
 8003356:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003358:	e041      	b.n	80033de <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800335a:	4b24      	ldr	r3, [pc, #144]	; (80033ec <vTaskSwitchContext+0xa8>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003360:	4b23      	ldr	r3, [pc, #140]	; (80033f0 <vTaskSwitchContext+0xac>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	e010      	b.n	800338a <vTaskSwitchContext+0x46>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10a      	bne.n	8003384 <vTaskSwitchContext+0x40>
	__asm volatile
 800336e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	607b      	str	r3, [r7, #4]
}
 8003380:	bf00      	nop
 8003382:	e7fe      	b.n	8003382 <vTaskSwitchContext+0x3e>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	3b01      	subs	r3, #1
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	491a      	ldr	r1, [pc, #104]	; (80033f4 <vTaskSwitchContext+0xb0>)
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0e4      	beq.n	8003368 <vTaskSwitchContext+0x24>
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4a12      	ldr	r2, [pc, #72]	; (80033f4 <vTaskSwitchContext+0xb0>)
 80033aa:	4413      	add	r3, r2
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	605a      	str	r2, [r3, #4]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	3308      	adds	r3, #8
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d104      	bne.n	80033ce <vTaskSwitchContext+0x8a>
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	4a08      	ldr	r2, [pc, #32]	; (80033f8 <vTaskSwitchContext+0xb4>)
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	4a05      	ldr	r2, [pc, #20]	; (80033f0 <vTaskSwitchContext+0xac>)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6013      	str	r3, [r2, #0]
}
 80033de:	bf00      	nop
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr
 80033e8:	20000c54 	.word	0x20000c54
 80033ec:	20000c40 	.word	0x20000c40
 80033f0:	20000c34 	.word	0x20000c34
 80033f4:	2000075c 	.word	0x2000075c
 80033f8:	20000758 	.word	0x20000758

080033fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10a      	bne.n	8003422 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800340c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	60fb      	str	r3, [r7, #12]
}
 800341e:	bf00      	nop
 8003420:	e7fe      	b.n	8003420 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003422:	4b07      	ldr	r3, [pc, #28]	; (8003440 <vTaskPlaceOnEventList+0x44>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	3318      	adds	r3, #24
 8003428:	4619      	mov	r1, r3
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7fe fe9a 	bl	8002164 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003430:	2101      	movs	r1, #1
 8003432:	6838      	ldr	r0, [r7, #0]
 8003434:	f000 fb7e 	bl	8003b34 <prvAddCurrentTaskToDelayedList>
}
 8003438:	bf00      	nop
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	20000758 	.word	0x20000758

08003444 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10a      	bne.n	800346c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345a:	f383 8811 	msr	BASEPRI, r3
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	617b      	str	r3, [r7, #20]
}
 8003468:	bf00      	nop
 800346a:	e7fe      	b.n	800346a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800346c:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <vTaskPlaceOnEventListRestricted+0x54>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	3318      	adds	r3, #24
 8003472:	4619      	mov	r1, r3
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f7fe fe52 	bl	800211e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003480:	f04f 33ff 	mov.w	r3, #4294967295
 8003484:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	68b8      	ldr	r0, [r7, #8]
 800348a:	f000 fb53 	bl	8003b34 <prvAddCurrentTaskToDelayedList>
	}
 800348e:	bf00      	nop
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000758 	.word	0x20000758

0800349c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10a      	bne.n	80034c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80034b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b6:	f383 8811 	msr	BASEPRI, r3
 80034ba:	f3bf 8f6f 	isb	sy
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	60fb      	str	r3, [r7, #12]
}
 80034c4:	bf00      	nop
 80034c6:	e7fe      	b.n	80034c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	3318      	adds	r3, #24
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fe fe81 	bl	80021d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034d2:	4b1e      	ldr	r3, [pc, #120]	; (800354c <xTaskRemoveFromEventList+0xb0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d11d      	bne.n	8003516 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	3304      	adds	r3, #4
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fe fe78 	bl	80021d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e8:	4b19      	ldr	r3, [pc, #100]	; (8003550 <xTaskRemoveFromEventList+0xb4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d903      	bls.n	80034f8 <xTaskRemoveFromEventList+0x5c>
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	4a16      	ldr	r2, [pc, #88]	; (8003550 <xTaskRemoveFromEventList+0xb4>)
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4a13      	ldr	r2, [pc, #76]	; (8003554 <xTaskRemoveFromEventList+0xb8>)
 8003506:	441a      	add	r2, r3
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	3304      	adds	r3, #4
 800350c:	4619      	mov	r1, r3
 800350e:	4610      	mov	r0, r2
 8003510:	f7fe fe05 	bl	800211e <vListInsertEnd>
 8003514:	e005      	b.n	8003522 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	3318      	adds	r3, #24
 800351a:	4619      	mov	r1, r3
 800351c:	480e      	ldr	r0, [pc, #56]	; (8003558 <xTaskRemoveFromEventList+0xbc>)
 800351e:	f7fe fdfe 	bl	800211e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <xTaskRemoveFromEventList+0xc0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	429a      	cmp	r2, r3
 800352e:	d905      	bls.n	800353c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003530:	2301      	movs	r3, #1
 8003532:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003534:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <xTaskRemoveFromEventList+0xc4>)
 8003536:	2201      	movs	r2, #1
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	e001      	b.n	8003540 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003540:	697b      	ldr	r3, [r7, #20]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000c54 	.word	0x20000c54
 8003550:	20000c34 	.word	0x20000c34
 8003554:	2000075c 	.word	0x2000075c
 8003558:	20000bec 	.word	0x20000bec
 800355c:	20000758 	.word	0x20000758
 8003560:	20000c40 	.word	0x20000c40

08003564 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800356c:	4b06      	ldr	r3, [pc, #24]	; (8003588 <vTaskInternalSetTimeOutState+0x24>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003574:	4b05      	ldr	r3, [pc, #20]	; (800358c <vTaskInternalSetTimeOutState+0x28>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	605a      	str	r2, [r3, #4]
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	20000c44 	.word	0x20000c44
 800358c:	20000c30 	.word	0x20000c30

08003590 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10a      	bne.n	80035b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	613b      	str	r3, [r7, #16]
}
 80035b2:	bf00      	nop
 80035b4:	e7fe      	b.n	80035b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10a      	bne.n	80035d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80035bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c0:	f383 8811 	msr	BASEPRI, r3
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	60fb      	str	r3, [r7, #12]
}
 80035ce:	bf00      	nop
 80035d0:	e7fe      	b.n	80035d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80035d2:	f000 ff03 	bl	80043dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80035d6:	4b1d      	ldr	r3, [pc, #116]	; (800364c <xTaskCheckForTimeOut+0xbc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ee:	d102      	bne.n	80035f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	e023      	b.n	800363e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	4b15      	ldr	r3, [pc, #84]	; (8003650 <xTaskCheckForTimeOut+0xc0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d007      	beq.n	8003612 <xTaskCheckForTimeOut+0x82>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	429a      	cmp	r2, r3
 800360a:	d302      	bcc.n	8003612 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800360c:	2301      	movs	r3, #1
 800360e:	61fb      	str	r3, [r7, #28]
 8003610:	e015      	b.n	800363e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	429a      	cmp	r2, r3
 800361a:	d20b      	bcs.n	8003634 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	1ad2      	subs	r2, r2, r3
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7ff ff9b 	bl	8003564 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
 8003632:	e004      	b.n	800363e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800363a:	2301      	movs	r3, #1
 800363c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800363e:	f000 fefd 	bl	800443c <vPortExitCritical>

	return xReturn;
 8003642:	69fb      	ldr	r3, [r7, #28]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3720      	adds	r7, #32
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000c30 	.word	0x20000c30
 8003650:	20000c44 	.word	0x20000c44

08003654 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003658:	4b03      	ldr	r3, [pc, #12]	; (8003668 <vTaskMissedYield+0x14>)
 800365a:	2201      	movs	r2, #1
 800365c:	601a      	str	r2, [r3, #0]
}
 800365e:	bf00      	nop
 8003660:	46bd      	mov	sp, r7
 8003662:	bc80      	pop	{r7}
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	20000c40 	.word	0x20000c40

0800366c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003674:	f000 f852 	bl	800371c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003678:	4b06      	ldr	r3, [pc, #24]	; (8003694 <prvIdleTask+0x28>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d9f9      	bls.n	8003674 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <prvIdleTask+0x2c>)
 8003682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003690:	e7f0      	b.n	8003674 <prvIdleTask+0x8>
 8003692:	bf00      	nop
 8003694:	2000075c 	.word	0x2000075c
 8003698:	e000ed04 	.word	0xe000ed04

0800369c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036a2:	2300      	movs	r3, #0
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	e00c      	b.n	80036c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4a12      	ldr	r2, [pc, #72]	; (80036fc <prvInitialiseTaskLists+0x60>)
 80036b4:	4413      	add	r3, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fe fd06 	bl	80020c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3301      	adds	r3, #1
 80036c0:	607b      	str	r3, [r7, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b37      	cmp	r3, #55	; 0x37
 80036c6:	d9ef      	bls.n	80036a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80036c8:	480d      	ldr	r0, [pc, #52]	; (8003700 <prvInitialiseTaskLists+0x64>)
 80036ca:	f7fe fcfd 	bl	80020c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80036ce:	480d      	ldr	r0, [pc, #52]	; (8003704 <prvInitialiseTaskLists+0x68>)
 80036d0:	f7fe fcfa 	bl	80020c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80036d4:	480c      	ldr	r0, [pc, #48]	; (8003708 <prvInitialiseTaskLists+0x6c>)
 80036d6:	f7fe fcf7 	bl	80020c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80036da:	480c      	ldr	r0, [pc, #48]	; (800370c <prvInitialiseTaskLists+0x70>)
 80036dc:	f7fe fcf4 	bl	80020c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80036e0:	480b      	ldr	r0, [pc, #44]	; (8003710 <prvInitialiseTaskLists+0x74>)
 80036e2:	f7fe fcf1 	bl	80020c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80036e6:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <prvInitialiseTaskLists+0x78>)
 80036e8:	4a05      	ldr	r2, [pc, #20]	; (8003700 <prvInitialiseTaskLists+0x64>)
 80036ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036ec:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <prvInitialiseTaskLists+0x7c>)
 80036ee:	4a05      	ldr	r2, [pc, #20]	; (8003704 <prvInitialiseTaskLists+0x68>)
 80036f0:	601a      	str	r2, [r3, #0]
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	2000075c 	.word	0x2000075c
 8003700:	20000bbc 	.word	0x20000bbc
 8003704:	20000bd0 	.word	0x20000bd0
 8003708:	20000bec 	.word	0x20000bec
 800370c:	20000c00 	.word	0x20000c00
 8003710:	20000c18 	.word	0x20000c18
 8003714:	20000be4 	.word	0x20000be4
 8003718:	20000be8 	.word	0x20000be8

0800371c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003722:	e019      	b.n	8003758 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003724:	f000 fe5a 	bl	80043dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003728:	4b10      	ldr	r3, [pc, #64]	; (800376c <prvCheckTasksWaitingTermination+0x50>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3304      	adds	r3, #4
 8003734:	4618      	mov	r0, r3
 8003736:	f7fe fd4d 	bl	80021d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800373a:	4b0d      	ldr	r3, [pc, #52]	; (8003770 <prvCheckTasksWaitingTermination+0x54>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	3b01      	subs	r3, #1
 8003740:	4a0b      	ldr	r2, [pc, #44]	; (8003770 <prvCheckTasksWaitingTermination+0x54>)
 8003742:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <prvCheckTasksWaitingTermination+0x58>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3b01      	subs	r3, #1
 800374a:	4a0a      	ldr	r2, [pc, #40]	; (8003774 <prvCheckTasksWaitingTermination+0x58>)
 800374c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800374e:	f000 fe75 	bl	800443c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f810 	bl	8003778 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003758:	4b06      	ldr	r3, [pc, #24]	; (8003774 <prvCheckTasksWaitingTermination+0x58>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e1      	bne.n	8003724 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003760:	bf00      	nop
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20000c00 	.word	0x20000c00
 8003770:	20000c2c 	.word	0x20000c2c
 8003774:	20000c14 	.word	0x20000c14

08003778 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003786:	2b00      	cmp	r3, #0
 8003788:	d108      	bne.n	800379c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	4618      	mov	r0, r3
 8003790:	f000 ffe8 	bl	8004764 <vPortFree>
				vPortFree( pxTCB );
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 ffe5 	bl	8004764 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800379a:	e018      	b.n	80037ce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d103      	bne.n	80037ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 ffdc 	bl	8004764 <vPortFree>
	}
 80037ac:	e00f      	b.n	80037ce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d00a      	beq.n	80037ce <prvDeleteTCB+0x56>
	__asm volatile
 80037b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f3bf 8f6f 	isb	sy
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	60fb      	str	r3, [r7, #12]
}
 80037ca:	bf00      	nop
 80037cc:	e7fe      	b.n	80037cc <prvDeleteTCB+0x54>
	}
 80037ce:	bf00      	nop
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037de:	4b0e      	ldr	r3, [pc, #56]	; (8003818 <prvResetNextTaskUnblockTime+0x40>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <prvResetNextTaskUnblockTime+0x14>
 80037e8:	2301      	movs	r3, #1
 80037ea:	e000      	b.n	80037ee <prvResetNextTaskUnblockTime+0x16>
 80037ec:	2300      	movs	r3, #0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d004      	beq.n	80037fc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037f2:	4b0a      	ldr	r3, [pc, #40]	; (800381c <prvResetNextTaskUnblockTime+0x44>)
 80037f4:	f04f 32ff 	mov.w	r2, #4294967295
 80037f8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80037fa:	e008      	b.n	800380e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <prvResetNextTaskUnblockTime+0x40>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	4a04      	ldr	r2, [pc, #16]	; (800381c <prvResetNextTaskUnblockTime+0x44>)
 800380c:	6013      	str	r3, [r2, #0]
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr
 8003818:	20000be4 	.word	0x20000be4
 800381c:	20000c4c 	.word	0x20000c4c

08003820 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003826:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <xTaskGetSchedulerState+0x34>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d102      	bne.n	8003834 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800382e:	2301      	movs	r3, #1
 8003830:	607b      	str	r3, [r7, #4]
 8003832:	e008      	b.n	8003846 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003834:	4b08      	ldr	r3, [pc, #32]	; (8003858 <xTaskGetSchedulerState+0x38>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d102      	bne.n	8003842 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800383c:	2302      	movs	r3, #2
 800383e:	607b      	str	r3, [r7, #4]
 8003840:	e001      	b.n	8003846 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003842:	2300      	movs	r3, #0
 8003844:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003846:	687b      	ldr	r3, [r7, #4]
	}
 8003848:	4618      	mov	r0, r3
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	20000c38 	.word	0x20000c38
 8003858:	20000c54 	.word	0x20000c54

0800385c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d056      	beq.n	8003920 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003872:	4b2e      	ldr	r3, [pc, #184]	; (800392c <xTaskPriorityDisinherit+0xd0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	429a      	cmp	r2, r3
 800387a:	d00a      	beq.n	8003892 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800387c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003880:	f383 8811 	msr	BASEPRI, r3
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	f3bf 8f4f 	dsb	sy
 800388c:	60fb      	str	r3, [r7, #12]
}
 800388e:	bf00      	nop
 8003890:	e7fe      	b.n	8003890 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10a      	bne.n	80038b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800389a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389e:	f383 8811 	msr	BASEPRI, r3
 80038a2:	f3bf 8f6f 	isb	sy
 80038a6:	f3bf 8f4f 	dsb	sy
 80038aa:	60bb      	str	r3, [r7, #8]
}
 80038ac:	bf00      	nop
 80038ae:	e7fe      	b.n	80038ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b4:	1e5a      	subs	r2, r3, #1
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d02c      	beq.n	8003920 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d128      	bne.n	8003920 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	3304      	adds	r3, #4
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fe fc7e 	bl	80021d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f0:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <xTaskPriorityDisinherit+0xd4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d903      	bls.n	8003900 <xTaskPriorityDisinherit+0xa4>
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	4a0c      	ldr	r2, [pc, #48]	; (8003930 <xTaskPriorityDisinherit+0xd4>)
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4a09      	ldr	r2, [pc, #36]	; (8003934 <xTaskPriorityDisinherit+0xd8>)
 800390e:	441a      	add	r2, r3
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	3304      	adds	r3, #4
 8003914:	4619      	mov	r1, r3
 8003916:	4610      	mov	r0, r2
 8003918:	f7fe fc01 	bl	800211e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800391c:	2301      	movs	r3, #1
 800391e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003920:	697b      	ldr	r3, [r7, #20]
	}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000758 	.word	0x20000758
 8003930:	20000c34 	.word	0x20000c34
 8003934:	2000075c 	.word	0x2000075c

08003938 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
 8003944:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8003946:	f000 fd49 	bl	80043dc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800394a:	4b26      	ldr	r3, [pc, #152]	; (80039e4 <xTaskNotifyWait+0xac>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d01a      	beq.n	800398e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8003958:	4b22      	ldr	r3, [pc, #136]	; (80039e4 <xTaskNotifyWait+0xac>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	43d2      	mvns	r2, r2
 8003962:	400a      	ands	r2, r1
 8003964:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8003966:	4b1f      	ldr	r3, [pc, #124]	; (80039e4 <xTaskNotifyWait+0xac>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003976:	2101      	movs	r1, #1
 8003978:	6838      	ldr	r0, [r7, #0]
 800397a:	f000 f8db 	bl	8003b34 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800397e:	4b1a      	ldr	r3, [pc, #104]	; (80039e8 <xTaskNotifyWait+0xb0>)
 8003980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800398e:	f000 fd55 	bl	800443c <vPortExitCritical>

		taskENTER_CRITICAL();
 8003992:	f000 fd23 	bl	80043dc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d004      	beq.n	80039a6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800399c:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <xTaskNotifyWait+0xac>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80039a6:	4b0f      	ldr	r3, [pc, #60]	; (80039e4 <xTaskNotifyWait+0xac>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d002      	beq.n	80039ba <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	e008      	b.n	80039cc <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80039ba:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <xTaskNotifyWait+0xac>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	43d2      	mvns	r2, r2
 80039c4:	400a      	ands	r2, r1
 80039c6:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80039c8:	2301      	movs	r3, #1
 80039ca:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <xTaskNotifyWait+0xac>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80039d6:	f000 fd31 	bl	800443c <vPortExitCritical>

		return xReturn;
 80039da:	697b      	ldr	r3, [r7, #20]
	}
 80039dc:	4618      	mov	r0, r3
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	20000758 	.word	0x20000758
 80039e8:	e000ed04 	.word	0xe000ed04

080039ec <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08a      	sub	sp, #40	; 0x28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	4613      	mov	r3, r2
 80039fa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80039fc:	2301      	movs	r3, #1
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10a      	bne.n	8003a1c <xTaskGenericNotify+0x30>
	__asm volatile
 8003a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	61bb      	str	r3, [r7, #24]
}
 8003a18:	bf00      	nop
 8003a1a:	e7fe      	b.n	8003a1a <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8003a20:	f000 fcdc 	bl	80043dc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a38:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8003a42:	79fb      	ldrb	r3, [r7, #7]
 8003a44:	2b04      	cmp	r3, #4
 8003a46:	d828      	bhi.n	8003a9a <xTaskGenericNotify+0xae>
 8003a48:	a201      	add	r2, pc, #4	; (adr r2, 8003a50 <xTaskGenericNotify+0x64>)
 8003a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4e:	bf00      	nop
 8003a50:	08003a9b 	.word	0x08003a9b
 8003a54:	08003a65 	.word	0x08003a65
 8003a58:	08003a73 	.word	0x08003a73
 8003a5c:	08003a7f 	.word	0x08003a7f
 8003a60:	08003a87 	.word	0x08003a87
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8003a70:	e013      	b.n	8003a9a <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8003a7c:	e00d      	b.n	8003a9a <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8003a84:	e009      	b.n	8003a9a <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003a86:	7ffb      	ldrb	r3, [r7, #31]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d003      	beq.n	8003a94 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8003a92:	e001      	b.n	8003a98 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8003a98:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003a9a:	7ffb      	ldrb	r3, [r7, #31]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d13a      	bne.n	8003b16 <xTaskGenericNotify+0x12a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fe fb95 	bl	80021d4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aae:	4b1d      	ldr	r3, [pc, #116]	; (8003b24 <xTaskGenericNotify+0x138>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d903      	bls.n	8003abe <xTaskGenericNotify+0xd2>
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	4a1a      	ldr	r2, [pc, #104]	; (8003b24 <xTaskGenericNotify+0x138>)
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4a17      	ldr	r2, [pc, #92]	; (8003b28 <xTaskGenericNotify+0x13c>)
 8003acc:	441a      	add	r2, r3
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	f7fe fb22 	bl	800211e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <xTaskGenericNotify+0x10c>
	__asm volatile
 8003ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae6:	f383 8811 	msr	BASEPRI, r3
 8003aea:	f3bf 8f6f 	isb	sy
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	617b      	str	r3, [r7, #20]
}
 8003af4:	bf00      	nop
 8003af6:	e7fe      	b.n	8003af6 <xTaskGenericNotify+0x10a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <xTaskGenericNotify+0x140>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d907      	bls.n	8003b16 <xTaskGenericNotify+0x12a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8003b06:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <xTaskGenericNotify+0x144>)
 8003b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003b16:	f000 fc91 	bl	800443c <vPortExitCritical>

		return xReturn;
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3728      	adds	r7, #40	; 0x28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20000c34 	.word	0x20000c34
 8003b28:	2000075c 	.word	0x2000075c
 8003b2c:	20000758 	.word	0x20000758
 8003b30:	e000ed04 	.word	0xe000ed04

08003b34 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b3e:	4b21      	ldr	r3, [pc, #132]	; (8003bc4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b44:	4b20      	ldr	r3, [pc, #128]	; (8003bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fe fb42 	bl	80021d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b56:	d10a      	bne.n	8003b6e <prvAddCurrentTaskToDelayedList+0x3a>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d007      	beq.n	8003b6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b5e:	4b1a      	ldr	r3, [pc, #104]	; (8003bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3304      	adds	r3, #4
 8003b64:	4619      	mov	r1, r3
 8003b66:	4819      	ldr	r0, [pc, #100]	; (8003bcc <prvAddCurrentTaskToDelayedList+0x98>)
 8003b68:	f7fe fad9 	bl	800211e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b6c:	e026      	b.n	8003bbc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4413      	add	r3, r2
 8003b74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b76:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d209      	bcs.n	8003b9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b86:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3304      	adds	r3, #4
 8003b90:	4619      	mov	r1, r3
 8003b92:	4610      	mov	r0, r2
 8003b94:	f7fe fae6 	bl	8002164 <vListInsert>
}
 8003b98:	e010      	b.n	8003bbc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b9a:	4b0e      	ldr	r3, [pc, #56]	; (8003bd4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4610      	mov	r0, r2
 8003ba8:	f7fe fadc 	bl	8002164 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003bac:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d202      	bcs.n	8003bbc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003bb6:	4a08      	ldr	r2, [pc, #32]	; (8003bd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	6013      	str	r3, [r2, #0]
}
 8003bbc:	bf00      	nop
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	20000c30 	.word	0x20000c30
 8003bc8:	20000758 	.word	0x20000758
 8003bcc:	20000c18 	.word	0x20000c18
 8003bd0:	20000be8 	.word	0x20000be8
 8003bd4:	20000be4 	.word	0x20000be4
 8003bd8:	20000c4c 	.word	0x20000c4c

08003bdc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08a      	sub	sp, #40	; 0x28
 8003be0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003be6:	f000 facb 	bl	8004180 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003bea:	4b1c      	ldr	r3, [pc, #112]	; (8003c5c <xTimerCreateTimerTask+0x80>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d021      	beq.n	8003c36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003bfa:	1d3a      	adds	r2, r7, #4
 8003bfc:	f107 0108 	add.w	r1, r7, #8
 8003c00:	f107 030c 	add.w	r3, r7, #12
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7fe fa45 	bl	8002094 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	9202      	str	r2, [sp, #8]
 8003c12:	9301      	str	r3, [sp, #4]
 8003c14:	2302      	movs	r3, #2
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	460a      	mov	r2, r1
 8003c1c:	4910      	ldr	r1, [pc, #64]	; (8003c60 <xTimerCreateTimerTask+0x84>)
 8003c1e:	4811      	ldr	r0, [pc, #68]	; (8003c64 <xTimerCreateTimerTask+0x88>)
 8003c20:	f7fe ffe6 	bl	8002bf0 <xTaskCreateStatic>
 8003c24:	4603      	mov	r3, r0
 8003c26:	4a10      	ldr	r2, [pc, #64]	; (8003c68 <xTimerCreateTimerTask+0x8c>)
 8003c28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003c2a:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <xTimerCreateTimerTask+0x8c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003c32:	2301      	movs	r3, #1
 8003c34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10a      	bne.n	8003c52 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c40:	f383 8811 	msr	BASEPRI, r3
 8003c44:	f3bf 8f6f 	isb	sy
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	613b      	str	r3, [r7, #16]
}
 8003c4e:	bf00      	nop
 8003c50:	e7fe      	b.n	8003c50 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003c52:	697b      	ldr	r3, [r7, #20]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20000c88 	.word	0x20000c88
 8003c60:	080052e4 	.word	0x080052e4
 8003c64:	08003d89 	.word	0x08003d89
 8003c68:	20000c8c 	.word	0x20000c8c

08003c6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08a      	sub	sp, #40	; 0x28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <xTimerGenericCommand+0x2e>
	__asm volatile
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	623b      	str	r3, [r7, #32]
}
 8003c96:	bf00      	nop
 8003c98:	e7fe      	b.n	8003c98 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003c9a:	4b1a      	ldr	r3, [pc, #104]	; (8003d04 <xTimerGenericCommand+0x98>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d02a      	beq.n	8003cf8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b05      	cmp	r3, #5
 8003cb2:	dc18      	bgt.n	8003ce6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003cb4:	f7ff fdb4 	bl	8003820 <xTaskGetSchedulerState>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d109      	bne.n	8003cd2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003cbe:	4b11      	ldr	r3, [pc, #68]	; (8003d04 <xTimerGenericCommand+0x98>)
 8003cc0:	6818      	ldr	r0, [r3, #0]
 8003cc2:	f107 0110 	add.w	r1, r7, #16
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cca:	f7fe fbaf 	bl	800242c <xQueueGenericSend>
 8003cce:	6278      	str	r0, [r7, #36]	; 0x24
 8003cd0:	e012      	b.n	8003cf8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003cd2:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <xTimerGenericCommand+0x98>)
 8003cd4:	6818      	ldr	r0, [r3, #0]
 8003cd6:	f107 0110 	add.w	r1, r7, #16
 8003cda:	2300      	movs	r3, #0
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f7fe fba5 	bl	800242c <xQueueGenericSend>
 8003ce2:	6278      	str	r0, [r7, #36]	; 0x24
 8003ce4:	e008      	b.n	8003cf8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ce6:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <xTimerGenericCommand+0x98>)
 8003ce8:	6818      	ldr	r0, [r3, #0]
 8003cea:	f107 0110 	add.w	r1, r7, #16
 8003cee:	2300      	movs	r3, #0
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	f7fe fc99 	bl	8002628 <xQueueGenericSendFromISR>
 8003cf6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3728      	adds	r7, #40	; 0x28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20000c88 	.word	0x20000c88

08003d08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d12:	4b1c      	ldr	r3, [pc, #112]	; (8003d84 <prvProcessExpiredTimer+0x7c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	3304      	adds	r3, #4
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fe fa57 	bl	80021d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d122      	bne.n	8003d74 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	699a      	ldr	r2, [r3, #24]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	18d1      	adds	r1, r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	6978      	ldr	r0, [r7, #20]
 8003d3c:	f000 f8c8 	bl	8003ed0 <prvInsertTimerInActiveList>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d016      	beq.n	8003d74 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d46:	2300      	movs	r3, #0
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	2100      	movs	r1, #0
 8003d50:	6978      	ldr	r0, [r7, #20]
 8003d52:	f7ff ff8b 	bl	8003c6c <xTimerGenericCommand>
 8003d56:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10a      	bne.n	8003d74 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	60fb      	str	r3, [r7, #12]
}
 8003d70:	bf00      	nop
 8003d72:	e7fe      	b.n	8003d72 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	6978      	ldr	r0, [r7, #20]
 8003d7a:	4798      	blx	r3
}
 8003d7c:	bf00      	nop
 8003d7e:	3718      	adds	r7, #24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	20000c80 	.word	0x20000c80

08003d88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d90:	f107 0308 	add.w	r3, r7, #8
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 f857 	bl	8003e48 <prvGetNextExpireTime>
 8003d9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4619      	mov	r1, r3
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 f803 	bl	8003dac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003da6:	f000 f8d5 	bl	8003f54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003daa:	e7f1      	b.n	8003d90 <prvTimerTask+0x8>

08003dac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003db6:	f7ff f94d 	bl	8003054 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dba:	f107 0308 	add.w	r3, r7, #8
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 f866 	bl	8003e90 <prvSampleTimeNow>
 8003dc4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d130      	bne.n	8003e2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10a      	bne.n	8003de8 <prvProcessTimerOrBlockTask+0x3c>
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d806      	bhi.n	8003de8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003dda:	f7ff f949 	bl	8003070 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003dde:	68f9      	ldr	r1, [r7, #12]
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff ff91 	bl	8003d08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003de6:	e024      	b.n	8003e32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d008      	beq.n	8003e00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003dee:	4b13      	ldr	r3, [pc, #76]	; (8003e3c <prvProcessTimerOrBlockTask+0x90>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	bf0c      	ite	eq
 8003df8:	2301      	moveq	r3, #1
 8003dfa:	2300      	movne	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e00:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <prvProcessTimerOrBlockTask+0x94>)
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	f7fe febb 	bl	8002b88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003e12:	f7ff f92d 	bl	8003070 <xTaskResumeAll>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10a      	bne.n	8003e32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003e1c:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <prvProcessTimerOrBlockTask+0x98>)
 8003e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	f3bf 8f6f 	isb	sy
}
 8003e2c:	e001      	b.n	8003e32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003e2e:	f7ff f91f 	bl	8003070 <xTaskResumeAll>
}
 8003e32:	bf00      	nop
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20000c84 	.word	0x20000c84
 8003e40:	20000c88 	.word	0x20000c88
 8003e44:	e000ed04 	.word	0xe000ed04

08003e48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e50:	4b0e      	ldr	r3, [pc, #56]	; (8003e8c <prvGetNextExpireTime+0x44>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	bf0c      	ite	eq
 8003e5a:	2301      	moveq	r3, #1
 8003e5c:	2300      	movne	r3, #0
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	461a      	mov	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d105      	bne.n	8003e7a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e6e:	4b07      	ldr	r3, [pc, #28]	; (8003e8c <prvGetNextExpireTime+0x44>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	e001      	b.n	8003e7e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bc80      	pop	{r7}
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	20000c80 	.word	0x20000c80

08003e90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003e98:	f7ff f988 	bl	80031ac <xTaskGetTickCount>
 8003e9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <prvSampleTimeNow+0x3c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d205      	bcs.n	8003eb4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003ea8:	f000 f908 	bl	80040bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	e002      	b.n	8003eba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003eba:	4a04      	ldr	r2, [pc, #16]	; (8003ecc <prvSampleTimeNow+0x3c>)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20000c90 	.word	0x20000c90

08003ed0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d812      	bhi.n	8003f1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	1ad2      	subs	r2, r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d302      	bcc.n	8003f0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003f04:	2301      	movs	r3, #1
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	e01b      	b.n	8003f42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f0a:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <prvInsertTimerInActiveList+0x7c>)
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	3304      	adds	r3, #4
 8003f12:	4619      	mov	r1, r3
 8003f14:	4610      	mov	r0, r2
 8003f16:	f7fe f925 	bl	8002164 <vListInsert>
 8003f1a:	e012      	b.n	8003f42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d206      	bcs.n	8003f32 <prvInsertTimerInActiveList+0x62>
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d302      	bcc.n	8003f32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	e007      	b.n	8003f42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f32:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <prvInsertTimerInActiveList+0x80>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	f7fe f911 	bl	8002164 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003f42:	697b      	ldr	r3, [r7, #20]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	20000c84 	.word	0x20000c84
 8003f50:	20000c80 	.word	0x20000c80

08003f54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08e      	sub	sp, #56	; 0x38
 8003f58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f5a:	e09d      	b.n	8004098 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	da18      	bge.n	8003f94 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003f62:	1d3b      	adds	r3, r7, #4
 8003f64:	3304      	adds	r3, #4
 8003f66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10a      	bne.n	8003f84 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	61fb      	str	r3, [r7, #28]
}
 8003f80:	bf00      	nop
 8003f82:	e7fe      	b.n	8003f82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f8a:	6850      	ldr	r0, [r2, #4]
 8003f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f8e:	6892      	ldr	r2, [r2, #8]
 8003f90:	4611      	mov	r1, r2
 8003f92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	db7d      	blt.n	8004096 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d004      	beq.n	8003fb0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa8:	3304      	adds	r3, #4
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fe f912 	bl	80021d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fb0:	463b      	mov	r3, r7
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff ff6c 	bl	8003e90 <prvSampleTimeNow>
 8003fb8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b09      	cmp	r3, #9
 8003fbe:	d86b      	bhi.n	8004098 <prvProcessReceivedCommands+0x144>
 8003fc0:	a201      	add	r2, pc, #4	; (adr r2, 8003fc8 <prvProcessReceivedCommands+0x74>)
 8003fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc6:	bf00      	nop
 8003fc8:	08003ff1 	.word	0x08003ff1
 8003fcc:	08003ff1 	.word	0x08003ff1
 8003fd0:	08003ff1 	.word	0x08003ff1
 8003fd4:	08004099 	.word	0x08004099
 8003fd8:	0800404d 	.word	0x0800404d
 8003fdc:	08004085 	.word	0x08004085
 8003fe0:	08003ff1 	.word	0x08003ff1
 8003fe4:	08003ff1 	.word	0x08003ff1
 8003fe8:	08004099 	.word	0x08004099
 8003fec:	0800404d 	.word	0x0800404d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	18d1      	adds	r1, r2, r3
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ffe:	f7ff ff67 	bl	8003ed0 <prvInsertTimerInActiveList>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d047      	beq.n	8004098 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800400e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d13f      	bne.n	8004098 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	441a      	add	r2, r3
 8004020:	2300      	movs	r3, #0
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	2300      	movs	r3, #0
 8004026:	2100      	movs	r1, #0
 8004028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800402a:	f7ff fe1f 	bl	8003c6c <xTimerGenericCommand>
 800402e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d130      	bne.n	8004098 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	61bb      	str	r3, [r7, #24]
}
 8004048:	bf00      	nop
 800404a:	e7fe      	b.n	800404a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004050:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10a      	bne.n	8004070 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	617b      	str	r3, [r7, #20]
}
 800406c:	bf00      	nop
 800406e:	e7fe      	b.n	800406e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	699a      	ldr	r2, [r3, #24]
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	18d1      	adds	r1, r2, r3
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800407e:	f7ff ff27 	bl	8003ed0 <prvInsertTimerInActiveList>
					break;
 8004082:	e009      	b.n	8004098 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004086:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800408a:	2b00      	cmp	r3, #0
 800408c:	d104      	bne.n	8004098 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800408e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004090:	f000 fb68 	bl	8004764 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004094:	e000      	b.n	8004098 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004096:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004098:	4b07      	ldr	r3, [pc, #28]	; (80040b8 <prvProcessReceivedCommands+0x164>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	1d39      	adds	r1, r7, #4
 800409e:	2200      	movs	r2, #0
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fe fb59 	bl	8002758 <xQueueReceive>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f47f af57 	bne.w	8003f5c <prvProcessReceivedCommands+0x8>
	}
}
 80040ae:	bf00      	nop
 80040b0:	bf00      	nop
 80040b2:	3730      	adds	r7, #48	; 0x30
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	20000c88 	.word	0x20000c88

080040bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040c2:	e045      	b.n	8004150 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040c4:	4b2c      	ldr	r3, [pc, #176]	; (8004178 <prvSwitchTimerLists+0xbc>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040ce:	4b2a      	ldr	r3, [pc, #168]	; (8004178 <prvSwitchTimerLists+0xbc>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	3304      	adds	r3, #4
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fe f879 	bl	80021d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d12e      	bne.n	8004150 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4413      	add	r3, r2
 80040fa:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	429a      	cmp	r2, r3
 8004102:	d90e      	bls.n	8004122 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004110:	4b19      	ldr	r3, [pc, #100]	; (8004178 <prvSwitchTimerLists+0xbc>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	3304      	adds	r3, #4
 8004118:	4619      	mov	r1, r3
 800411a:	4610      	mov	r0, r2
 800411c:	f7fe f822 	bl	8002164 <vListInsert>
 8004120:	e016      	b.n	8004150 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004122:	2300      	movs	r3, #0
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	2300      	movs	r3, #0
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	2100      	movs	r1, #0
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f7ff fd9d 	bl	8003c6c <xTimerGenericCommand>
 8004132:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10a      	bne.n	8004150 <prvSwitchTimerLists+0x94>
	__asm volatile
 800413a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413e:	f383 8811 	msr	BASEPRI, r3
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	603b      	str	r3, [r7, #0]
}
 800414c:	bf00      	nop
 800414e:	e7fe      	b.n	800414e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004150:	4b09      	ldr	r3, [pc, #36]	; (8004178 <prvSwitchTimerLists+0xbc>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1b4      	bne.n	80040c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800415a:	4b07      	ldr	r3, [pc, #28]	; (8004178 <prvSwitchTimerLists+0xbc>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004160:	4b06      	ldr	r3, [pc, #24]	; (800417c <prvSwitchTimerLists+0xc0>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a04      	ldr	r2, [pc, #16]	; (8004178 <prvSwitchTimerLists+0xbc>)
 8004166:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004168:	4a04      	ldr	r2, [pc, #16]	; (800417c <prvSwitchTimerLists+0xc0>)
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	6013      	str	r3, [r2, #0]
}
 800416e:	bf00      	nop
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20000c80 	.word	0x20000c80
 800417c:	20000c84 	.word	0x20000c84

08004180 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004186:	f000 f929 	bl	80043dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800418a:	4b15      	ldr	r3, [pc, #84]	; (80041e0 <prvCheckForValidListAndQueue+0x60>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d120      	bne.n	80041d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004192:	4814      	ldr	r0, [pc, #80]	; (80041e4 <prvCheckForValidListAndQueue+0x64>)
 8004194:	f7fd ff98 	bl	80020c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004198:	4813      	ldr	r0, [pc, #76]	; (80041e8 <prvCheckForValidListAndQueue+0x68>)
 800419a:	f7fd ff95 	bl	80020c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800419e:	4b13      	ldr	r3, [pc, #76]	; (80041ec <prvCheckForValidListAndQueue+0x6c>)
 80041a0:	4a10      	ldr	r2, [pc, #64]	; (80041e4 <prvCheckForValidListAndQueue+0x64>)
 80041a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80041a4:	4b12      	ldr	r3, [pc, #72]	; (80041f0 <prvCheckForValidListAndQueue+0x70>)
 80041a6:	4a10      	ldr	r2, [pc, #64]	; (80041e8 <prvCheckForValidListAndQueue+0x68>)
 80041a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80041aa:	2300      	movs	r3, #0
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	4b11      	ldr	r3, [pc, #68]	; (80041f4 <prvCheckForValidListAndQueue+0x74>)
 80041b0:	4a11      	ldr	r2, [pc, #68]	; (80041f8 <prvCheckForValidListAndQueue+0x78>)
 80041b2:	2110      	movs	r1, #16
 80041b4:	200a      	movs	r0, #10
 80041b6:	f7fe f89f 	bl	80022f8 <xQueueGenericCreateStatic>
 80041ba:	4603      	mov	r3, r0
 80041bc:	4a08      	ldr	r2, [pc, #32]	; (80041e0 <prvCheckForValidListAndQueue+0x60>)
 80041be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80041c0:	4b07      	ldr	r3, [pc, #28]	; (80041e0 <prvCheckForValidListAndQueue+0x60>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <prvCheckForValidListAndQueue+0x60>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	490b      	ldr	r1, [pc, #44]	; (80041fc <prvCheckForValidListAndQueue+0x7c>)
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fe fcb2 	bl	8002b38 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041d4:	f000 f932 	bl	800443c <vPortExitCritical>
}
 80041d8:	bf00      	nop
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	20000c88 	.word	0x20000c88
 80041e4:	20000c58 	.word	0x20000c58
 80041e8:	20000c6c 	.word	0x20000c6c
 80041ec:	20000c80 	.word	0x20000c80
 80041f0:	20000c84 	.word	0x20000c84
 80041f4:	20000d34 	.word	0x20000d34
 80041f8:	20000c94 	.word	0x20000c94
 80041fc:	080052ec 	.word	0x080052ec

08004200 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	3b04      	subs	r3, #4
 8004210:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004218:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3b04      	subs	r3, #4
 800421e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f023 0201 	bic.w	r2, r3, #1
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3b04      	subs	r3, #4
 800422e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004230:	4a08      	ldr	r2, [pc, #32]	; (8004254 <pxPortInitialiseStack+0x54>)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	3b14      	subs	r3, #20
 800423a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	3b20      	subs	r3, #32
 8004246:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004248:	68fb      	ldr	r3, [r7, #12]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr
 8004254:	08004259 	.word	0x08004259

08004258 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800425e:	2300      	movs	r3, #0
 8004260:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004262:	4b12      	ldr	r3, [pc, #72]	; (80042ac <prvTaskExitError+0x54>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426a:	d00a      	beq.n	8004282 <prvTaskExitError+0x2a>
	__asm volatile
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	60fb      	str	r3, [r7, #12]
}
 800427e:	bf00      	nop
 8004280:	e7fe      	b.n	8004280 <prvTaskExitError+0x28>
	__asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	60bb      	str	r3, [r7, #8]
}
 8004294:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004296:	bf00      	nop
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0fc      	beq.n	8004298 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800429e:	bf00      	nop
 80042a0:	bf00      	nop
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bc80      	pop	{r7}
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	2000000c 	.word	0x2000000c

080042b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80042b0:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <pxCurrentTCBConst2>)
 80042b2:	6819      	ldr	r1, [r3, #0]
 80042b4:	6808      	ldr	r0, [r1, #0]
 80042b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80042ba:	f380 8809 	msr	PSP, r0
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f04f 0000 	mov.w	r0, #0
 80042c6:	f380 8811 	msr	BASEPRI, r0
 80042ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80042ce:	4770      	bx	lr

080042d0 <pxCurrentTCBConst2>:
 80042d0:	20000758 	.word	0x20000758
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop

080042d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80042d8:	4806      	ldr	r0, [pc, #24]	; (80042f4 <prvPortStartFirstTask+0x1c>)
 80042da:	6800      	ldr	r0, [r0, #0]
 80042dc:	6800      	ldr	r0, [r0, #0]
 80042de:	f380 8808 	msr	MSP, r0
 80042e2:	b662      	cpsie	i
 80042e4:	b661      	cpsie	f
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	df00      	svc	0
 80042f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80042f2:	bf00      	nop
 80042f4:	e000ed08 	.word	0xe000ed08

080042f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042fe:	4b32      	ldr	r3, [pc, #200]	; (80043c8 <xPortStartScheduler+0xd0>)
 8004300:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	b2db      	uxtb	r3, r3
 8004308:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	22ff      	movs	r2, #255	; 0xff
 800430e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004320:	b2da      	uxtb	r2, r3
 8004322:	4b2a      	ldr	r3, [pc, #168]	; (80043cc <xPortStartScheduler+0xd4>)
 8004324:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004326:	4b2a      	ldr	r3, [pc, #168]	; (80043d0 <xPortStartScheduler+0xd8>)
 8004328:	2207      	movs	r2, #7
 800432a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800432c:	e009      	b.n	8004342 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800432e:	4b28      	ldr	r3, [pc, #160]	; (80043d0 <xPortStartScheduler+0xd8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3b01      	subs	r3, #1
 8004334:	4a26      	ldr	r2, [pc, #152]	; (80043d0 <xPortStartScheduler+0xd8>)
 8004336:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	b2db      	uxtb	r3, r3
 8004340:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004342:	78fb      	ldrb	r3, [r7, #3]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434a:	2b80      	cmp	r3, #128	; 0x80
 800434c:	d0ef      	beq.n	800432e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800434e:	4b20      	ldr	r3, [pc, #128]	; (80043d0 <xPortStartScheduler+0xd8>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f1c3 0307 	rsb	r3, r3, #7
 8004356:	2b04      	cmp	r3, #4
 8004358:	d00a      	beq.n	8004370 <xPortStartScheduler+0x78>
	__asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	60bb      	str	r3, [r7, #8]
}
 800436c:	bf00      	nop
 800436e:	e7fe      	b.n	800436e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004370:	4b17      	ldr	r3, [pc, #92]	; (80043d0 <xPortStartScheduler+0xd8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	021b      	lsls	r3, r3, #8
 8004376:	4a16      	ldr	r2, [pc, #88]	; (80043d0 <xPortStartScheduler+0xd8>)
 8004378:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800437a:	4b15      	ldr	r3, [pc, #84]	; (80043d0 <xPortStartScheduler+0xd8>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004382:	4a13      	ldr	r2, [pc, #76]	; (80043d0 <xPortStartScheduler+0xd8>)
 8004384:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	b2da      	uxtb	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800438e:	4b11      	ldr	r3, [pc, #68]	; (80043d4 <xPortStartScheduler+0xdc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a10      	ldr	r2, [pc, #64]	; (80043d4 <xPortStartScheduler+0xdc>)
 8004394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004398:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800439a:	4b0e      	ldr	r3, [pc, #56]	; (80043d4 <xPortStartScheduler+0xdc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a0d      	ldr	r2, [pc, #52]	; (80043d4 <xPortStartScheduler+0xdc>)
 80043a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80043a6:	f000 f8b9 	bl	800451c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043aa:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <xPortStartScheduler+0xe0>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80043b0:	f7ff ff92 	bl	80042d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80043b4:	f7fe ffc6 	bl	8003344 <vTaskSwitchContext>
	prvTaskExitError();
 80043b8:	f7ff ff4e 	bl	8004258 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	e000e400 	.word	0xe000e400
 80043cc:	20000d84 	.word	0x20000d84
 80043d0:	20000d88 	.word	0x20000d88
 80043d4:	e000ed20 	.word	0xe000ed20
 80043d8:	2000000c 	.word	0x2000000c

080043dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
	__asm volatile
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	607b      	str	r3, [r7, #4]
}
 80043f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80043f6:	4b0f      	ldr	r3, [pc, #60]	; (8004434 <vPortEnterCritical+0x58>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3301      	adds	r3, #1
 80043fc:	4a0d      	ldr	r2, [pc, #52]	; (8004434 <vPortEnterCritical+0x58>)
 80043fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004400:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <vPortEnterCritical+0x58>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d10f      	bne.n	8004428 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004408:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <vPortEnterCritical+0x5c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <vPortEnterCritical+0x4c>
	__asm volatile
 8004412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	603b      	str	r3, [r7, #0]
}
 8004424:	bf00      	nop
 8004426:	e7fe      	b.n	8004426 <vPortEnterCritical+0x4a>
	}
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	bc80      	pop	{r7}
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	2000000c 	.word	0x2000000c
 8004438:	e000ed04 	.word	0xe000ed04

0800443c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004442:	4b11      	ldr	r3, [pc, #68]	; (8004488 <vPortExitCritical+0x4c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10a      	bne.n	8004460 <vPortExitCritical+0x24>
	__asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	607b      	str	r3, [r7, #4]
}
 800445c:	bf00      	nop
 800445e:	e7fe      	b.n	800445e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004460:	4b09      	ldr	r3, [pc, #36]	; (8004488 <vPortExitCritical+0x4c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3b01      	subs	r3, #1
 8004466:	4a08      	ldr	r2, [pc, #32]	; (8004488 <vPortExitCritical+0x4c>)
 8004468:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800446a:	4b07      	ldr	r3, [pc, #28]	; (8004488 <vPortExitCritical+0x4c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d105      	bne.n	800447e <vPortExitCritical+0x42>
 8004472:	2300      	movs	r3, #0
 8004474:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	f383 8811 	msr	BASEPRI, r3
}
 800447c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr
 8004488:	2000000c 	.word	0x2000000c
 800448c:	00000000 	.word	0x00000000

08004490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004490:	f3ef 8009 	mrs	r0, PSP
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	4b0d      	ldr	r3, [pc, #52]	; (80044d0 <pxCurrentTCBConst>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80044a0:	6010      	str	r0, [r2, #0]
 80044a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80044a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044aa:	f380 8811 	msr	BASEPRI, r0
 80044ae:	f7fe ff49 	bl	8003344 <vTaskSwitchContext>
 80044b2:	f04f 0000 	mov.w	r0, #0
 80044b6:	f380 8811 	msr	BASEPRI, r0
 80044ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80044be:	6819      	ldr	r1, [r3, #0]
 80044c0:	6808      	ldr	r0, [r1, #0]
 80044c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80044c6:	f380 8809 	msr	PSP, r0
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	4770      	bx	lr

080044d0 <pxCurrentTCBConst>:
 80044d0:	20000758 	.word	0x20000758
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop

080044d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
	__asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	607b      	str	r3, [r7, #4]
}
 80044f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044f2:	f7fe fe69 	bl	80031c8 <xTaskIncrementTick>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044fc:	4b06      	ldr	r3, [pc, #24]	; (8004518 <SysTick_Handler+0x40>)
 80044fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	2300      	movs	r3, #0
 8004506:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	f383 8811 	msr	BASEPRI, r3
}
 800450e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004510:	bf00      	nop
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	e000ed04 	.word	0xe000ed04

0800451c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004520:	4b0a      	ldr	r3, [pc, #40]	; (800454c <vPortSetupTimerInterrupt+0x30>)
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <vPortSetupTimerInterrupt+0x34>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800452c:	4b09      	ldr	r3, [pc, #36]	; (8004554 <vPortSetupTimerInterrupt+0x38>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a09      	ldr	r2, [pc, #36]	; (8004558 <vPortSetupTimerInterrupt+0x3c>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	099b      	lsrs	r3, r3, #6
 8004538:	4a08      	ldr	r2, [pc, #32]	; (800455c <vPortSetupTimerInterrupt+0x40>)
 800453a:	3b01      	subs	r3, #1
 800453c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800453e:	4b03      	ldr	r3, [pc, #12]	; (800454c <vPortSetupTimerInterrupt+0x30>)
 8004540:	2207      	movs	r2, #7
 8004542:	601a      	str	r2, [r3, #0]
}
 8004544:	bf00      	nop
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr
 800454c:	e000e010 	.word	0xe000e010
 8004550:	e000e018 	.word	0xe000e018
 8004554:	20000000 	.word	0x20000000
 8004558:	10624dd3 	.word	0x10624dd3
 800455c:	e000e014 	.word	0xe000e014

08004560 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004566:	f3ef 8305 	mrs	r3, IPSR
 800456a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b0f      	cmp	r3, #15
 8004570:	d914      	bls.n	800459c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004572:	4a16      	ldr	r2, [pc, #88]	; (80045cc <vPortValidateInterruptPriority+0x6c>)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4413      	add	r3, r2
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800457c:	4b14      	ldr	r3, [pc, #80]	; (80045d0 <vPortValidateInterruptPriority+0x70>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	7afa      	ldrb	r2, [r7, #11]
 8004582:	429a      	cmp	r2, r3
 8004584:	d20a      	bcs.n	800459c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	607b      	str	r3, [r7, #4]
}
 8004598:	bf00      	nop
 800459a:	e7fe      	b.n	800459a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800459c:	4b0d      	ldr	r3, [pc, #52]	; (80045d4 <vPortValidateInterruptPriority+0x74>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045a4:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <vPortValidateInterruptPriority+0x78>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d90a      	bls.n	80045c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80045ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	603b      	str	r3, [r7, #0]
}
 80045be:	bf00      	nop
 80045c0:	e7fe      	b.n	80045c0 <vPortValidateInterruptPriority+0x60>
	}
 80045c2:	bf00      	nop
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bc80      	pop	{r7}
 80045ca:	4770      	bx	lr
 80045cc:	e000e3f0 	.word	0xe000e3f0
 80045d0:	20000d84 	.word	0x20000d84
 80045d4:	e000ed0c 	.word	0xe000ed0c
 80045d8:	20000d88 	.word	0x20000d88

080045dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08a      	sub	sp, #40	; 0x28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80045e4:	2300      	movs	r3, #0
 80045e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80045e8:	f7fe fd34 	bl	8003054 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80045ec:	4b58      	ldr	r3, [pc, #352]	; (8004750 <pvPortMalloc+0x174>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80045f4:	f000 f910 	bl	8004818 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045f8:	4b56      	ldr	r3, [pc, #344]	; (8004754 <pvPortMalloc+0x178>)
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4013      	ands	r3, r2
 8004600:	2b00      	cmp	r3, #0
 8004602:	f040 808e 	bne.w	8004722 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d01d      	beq.n	8004648 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800460c:	2208      	movs	r2, #8
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4413      	add	r3, r2
 8004612:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	2b00      	cmp	r3, #0
 800461c:	d014      	beq.n	8004648 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f023 0307 	bic.w	r3, r3, #7
 8004624:	3308      	adds	r3, #8
 8004626:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <pvPortMalloc+0x6c>
	__asm volatile
 8004632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	617b      	str	r3, [r7, #20]
}
 8004644:	bf00      	nop
 8004646:	e7fe      	b.n	8004646 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d069      	beq.n	8004722 <pvPortMalloc+0x146>
 800464e:	4b42      	ldr	r3, [pc, #264]	; (8004758 <pvPortMalloc+0x17c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	429a      	cmp	r2, r3
 8004656:	d864      	bhi.n	8004722 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004658:	4b40      	ldr	r3, [pc, #256]	; (800475c <pvPortMalloc+0x180>)
 800465a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800465c:	4b3f      	ldr	r3, [pc, #252]	; (800475c <pvPortMalloc+0x180>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004662:	e004      	b.n	800466e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	429a      	cmp	r2, r3
 8004676:	d903      	bls.n	8004680 <pvPortMalloc+0xa4>
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1f1      	bne.n	8004664 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004680:	4b33      	ldr	r3, [pc, #204]	; (8004750 <pvPortMalloc+0x174>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004686:	429a      	cmp	r2, r3
 8004688:	d04b      	beq.n	8004722 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2208      	movs	r2, #8
 8004690:	4413      	add	r3, r2
 8004692:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	1ad2      	subs	r2, r2, r3
 80046a4:	2308      	movs	r3, #8
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d91f      	bls.n	80046ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4413      	add	r3, r2
 80046b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <pvPortMalloc+0xf8>
	__asm volatile
 80046be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	613b      	str	r3, [r7, #16]
}
 80046d0:	bf00      	nop
 80046d2:	e7fe      	b.n	80046d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	1ad2      	subs	r2, r2, r3
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046e6:	69b8      	ldr	r0, [r7, #24]
 80046e8:	f000 f8f8 	bl	80048dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046ec:	4b1a      	ldr	r3, [pc, #104]	; (8004758 <pvPortMalloc+0x17c>)
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	4a18      	ldr	r2, [pc, #96]	; (8004758 <pvPortMalloc+0x17c>)
 80046f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046fa:	4b17      	ldr	r3, [pc, #92]	; (8004758 <pvPortMalloc+0x17c>)
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	4b18      	ldr	r3, [pc, #96]	; (8004760 <pvPortMalloc+0x184>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d203      	bcs.n	800470e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004706:	4b14      	ldr	r3, [pc, #80]	; (8004758 <pvPortMalloc+0x17c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a15      	ldr	r2, [pc, #84]	; (8004760 <pvPortMalloc+0x184>)
 800470c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	4b10      	ldr	r3, [pc, #64]	; (8004754 <pvPortMalloc+0x178>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	431a      	orrs	r2, r3
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004722:	f7fe fca5 	bl	8003070 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <pvPortMalloc+0x16a>
	__asm volatile
 8004730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004734:	f383 8811 	msr	BASEPRI, r3
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	60fb      	str	r3, [r7, #12]
}
 8004742:	bf00      	nop
 8004744:	e7fe      	b.n	8004744 <pvPortMalloc+0x168>
	return pvReturn;
 8004746:	69fb      	ldr	r3, [r7, #28]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3728      	adds	r7, #40	; 0x28
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	20001994 	.word	0x20001994
 8004754:	200019a0 	.word	0x200019a0
 8004758:	20001998 	.word	0x20001998
 800475c:	2000198c 	.word	0x2000198c
 8004760:	2000199c 	.word	0x2000199c

08004764 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d048      	beq.n	8004808 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004776:	2308      	movs	r3, #8
 8004778:	425b      	negs	r3, r3
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	4413      	add	r3, r2
 800477e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	4b21      	ldr	r3, [pc, #132]	; (8004810 <vPortFree+0xac>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4013      	ands	r3, r2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10a      	bne.n	80047a8 <vPortFree+0x44>
	__asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	60fb      	str	r3, [r7, #12]
}
 80047a4:	bf00      	nop
 80047a6:	e7fe      	b.n	80047a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <vPortFree+0x62>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	60bb      	str	r3, [r7, #8]
}
 80047c2:	bf00      	nop
 80047c4:	e7fe      	b.n	80047c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	4b11      	ldr	r3, [pc, #68]	; (8004810 <vPortFree+0xac>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4013      	ands	r3, r2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d019      	beq.n	8004808 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d115      	bne.n	8004808 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <vPortFree+0xac>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	43db      	mvns	r3, r3
 80047e6:	401a      	ands	r2, r3
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80047ec:	f7fe fc32 	bl	8003054 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	4b07      	ldr	r3, [pc, #28]	; (8004814 <vPortFree+0xb0>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4413      	add	r3, r2
 80047fa:	4a06      	ldr	r2, [pc, #24]	; (8004814 <vPortFree+0xb0>)
 80047fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047fe:	6938      	ldr	r0, [r7, #16]
 8004800:	f000 f86c 	bl	80048dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004804:	f7fe fc34 	bl	8003070 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004808:	bf00      	nop
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	200019a0 	.word	0x200019a0
 8004814:	20001998 	.word	0x20001998

08004818 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800481e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004822:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004824:	4b27      	ldr	r3, [pc, #156]	; (80048c4 <prvHeapInit+0xac>)
 8004826:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00c      	beq.n	800484c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3307      	adds	r3, #7
 8004836:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0307 	bic.w	r3, r3, #7
 800483e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	4a1f      	ldr	r2, [pc, #124]	; (80048c4 <prvHeapInit+0xac>)
 8004848:	4413      	add	r3, r2
 800484a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004850:	4a1d      	ldr	r2, [pc, #116]	; (80048c8 <prvHeapInit+0xb0>)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004856:	4b1c      	ldr	r3, [pc, #112]	; (80048c8 <prvHeapInit+0xb0>)
 8004858:	2200      	movs	r2, #0
 800485a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	4413      	add	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004864:	2208      	movs	r2, #8
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	1a9b      	subs	r3, r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 0307 	bic.w	r3, r3, #7
 8004872:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4a15      	ldr	r2, [pc, #84]	; (80048cc <prvHeapInit+0xb4>)
 8004878:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800487a:	4b14      	ldr	r3, [pc, #80]	; (80048cc <prvHeapInit+0xb4>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2200      	movs	r2, #0
 8004880:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004882:	4b12      	ldr	r3, [pc, #72]	; (80048cc <prvHeapInit+0xb4>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	1ad2      	subs	r2, r2, r3
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004898:	4b0c      	ldr	r3, [pc, #48]	; (80048cc <prvHeapInit+0xb4>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	4a0a      	ldr	r2, [pc, #40]	; (80048d0 <prvHeapInit+0xb8>)
 80048a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	4a09      	ldr	r2, [pc, #36]	; (80048d4 <prvHeapInit+0xbc>)
 80048ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048b0:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <prvHeapInit+0xc0>)
 80048b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048b6:	601a      	str	r2, [r3, #0]
}
 80048b8:	bf00      	nop
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	20000d8c 	.word	0x20000d8c
 80048c8:	2000198c 	.word	0x2000198c
 80048cc:	20001994 	.word	0x20001994
 80048d0:	2000199c 	.word	0x2000199c
 80048d4:	20001998 	.word	0x20001998
 80048d8:	200019a0 	.word	0x200019a0

080048dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048e4:	4b27      	ldr	r3, [pc, #156]	; (8004984 <prvInsertBlockIntoFreeList+0xa8>)
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	e002      	b.n	80048f0 <prvInsertBlockIntoFreeList+0x14>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d8f7      	bhi.n	80048ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	4413      	add	r3, r2
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	429a      	cmp	r2, r3
 800490a:	d108      	bne.n	800491e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	441a      	add	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	441a      	add	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d118      	bne.n	8004964 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	4b14      	ldr	r3, [pc, #80]	; (8004988 <prvInsertBlockIntoFreeList+0xac>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d00d      	beq.n	800495a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	441a      	add	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	e008      	b.n	800496c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800495a:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <prvInsertBlockIntoFreeList+0xac>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	e003      	b.n	800496c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	429a      	cmp	r2, r3
 8004972:	d002      	beq.n	800497a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr
 8004984:	2000198c 	.word	0x2000198c
 8004988:	20001994 	.word	0x20001994

0800498c <__errno>:
 800498c:	4b01      	ldr	r3, [pc, #4]	; (8004994 <__errno+0x8>)
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	20000010 	.word	0x20000010

08004998 <__libc_init_array>:
 8004998:	b570      	push	{r4, r5, r6, lr}
 800499a:	2600      	movs	r6, #0
 800499c:	4d0c      	ldr	r5, [pc, #48]	; (80049d0 <__libc_init_array+0x38>)
 800499e:	4c0d      	ldr	r4, [pc, #52]	; (80049d4 <__libc_init_array+0x3c>)
 80049a0:	1b64      	subs	r4, r4, r5
 80049a2:	10a4      	asrs	r4, r4, #2
 80049a4:	42a6      	cmp	r6, r4
 80049a6:	d109      	bne.n	80049bc <__libc_init_array+0x24>
 80049a8:	f000 fc5c 	bl	8005264 <_init>
 80049ac:	2600      	movs	r6, #0
 80049ae:	4d0a      	ldr	r5, [pc, #40]	; (80049d8 <__libc_init_array+0x40>)
 80049b0:	4c0a      	ldr	r4, [pc, #40]	; (80049dc <__libc_init_array+0x44>)
 80049b2:	1b64      	subs	r4, r4, r5
 80049b4:	10a4      	asrs	r4, r4, #2
 80049b6:	42a6      	cmp	r6, r4
 80049b8:	d105      	bne.n	80049c6 <__libc_init_array+0x2e>
 80049ba:	bd70      	pop	{r4, r5, r6, pc}
 80049bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c0:	4798      	blx	r3
 80049c2:	3601      	adds	r6, #1
 80049c4:	e7ee      	b.n	80049a4 <__libc_init_array+0xc>
 80049c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ca:	4798      	blx	r3
 80049cc:	3601      	adds	r6, #1
 80049ce:	e7f2      	b.n	80049b6 <__libc_init_array+0x1e>
 80049d0:	08005364 	.word	0x08005364
 80049d4:	08005364 	.word	0x08005364
 80049d8:	08005364 	.word	0x08005364
 80049dc:	08005368 	.word	0x08005368

080049e0 <memcpy>:
 80049e0:	440a      	add	r2, r1
 80049e2:	4291      	cmp	r1, r2
 80049e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80049e8:	d100      	bne.n	80049ec <memcpy+0xc>
 80049ea:	4770      	bx	lr
 80049ec:	b510      	push	{r4, lr}
 80049ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049f2:	4291      	cmp	r1, r2
 80049f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049f8:	d1f9      	bne.n	80049ee <memcpy+0xe>
 80049fa:	bd10      	pop	{r4, pc}

080049fc <memset>:
 80049fc:	4603      	mov	r3, r0
 80049fe:	4402      	add	r2, r0
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d100      	bne.n	8004a06 <memset+0xa>
 8004a04:	4770      	bx	lr
 8004a06:	f803 1b01 	strb.w	r1, [r3], #1
 8004a0a:	e7f9      	b.n	8004a00 <memset+0x4>

08004a0c <siprintf>:
 8004a0c:	b40e      	push	{r1, r2, r3}
 8004a0e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a12:	b500      	push	{lr}
 8004a14:	b09c      	sub	sp, #112	; 0x70
 8004a16:	ab1d      	add	r3, sp, #116	; 0x74
 8004a18:	9002      	str	r0, [sp, #8]
 8004a1a:	9006      	str	r0, [sp, #24]
 8004a1c:	9107      	str	r1, [sp, #28]
 8004a1e:	9104      	str	r1, [sp, #16]
 8004a20:	4808      	ldr	r0, [pc, #32]	; (8004a44 <siprintf+0x38>)
 8004a22:	4909      	ldr	r1, [pc, #36]	; (8004a48 <siprintf+0x3c>)
 8004a24:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a28:	9105      	str	r1, [sp, #20]
 8004a2a:	6800      	ldr	r0, [r0, #0]
 8004a2c:	a902      	add	r1, sp, #8
 8004a2e:	9301      	str	r3, [sp, #4]
 8004a30:	f000 f868 	bl	8004b04 <_svfiprintf_r>
 8004a34:	2200      	movs	r2, #0
 8004a36:	9b02      	ldr	r3, [sp, #8]
 8004a38:	701a      	strb	r2, [r3, #0]
 8004a3a:	b01c      	add	sp, #112	; 0x70
 8004a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a40:	b003      	add	sp, #12
 8004a42:	4770      	bx	lr
 8004a44:	20000010 	.word	0x20000010
 8004a48:	ffff0208 	.word	0xffff0208

08004a4c <__ssputs_r>:
 8004a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a50:	688e      	ldr	r6, [r1, #8]
 8004a52:	4682      	mov	sl, r0
 8004a54:	429e      	cmp	r6, r3
 8004a56:	460c      	mov	r4, r1
 8004a58:	4690      	mov	r8, r2
 8004a5a:	461f      	mov	r7, r3
 8004a5c:	d838      	bhi.n	8004ad0 <__ssputs_r+0x84>
 8004a5e:	898a      	ldrh	r2, [r1, #12]
 8004a60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a64:	d032      	beq.n	8004acc <__ssputs_r+0x80>
 8004a66:	6825      	ldr	r5, [r4, #0]
 8004a68:	6909      	ldr	r1, [r1, #16]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	eba5 0901 	sub.w	r9, r5, r1
 8004a70:	6965      	ldr	r5, [r4, #20]
 8004a72:	444b      	add	r3, r9
 8004a74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a7c:	106d      	asrs	r5, r5, #1
 8004a7e:	429d      	cmp	r5, r3
 8004a80:	bf38      	it	cc
 8004a82:	461d      	movcc	r5, r3
 8004a84:	0553      	lsls	r3, r2, #21
 8004a86:	d531      	bpl.n	8004aec <__ssputs_r+0xa0>
 8004a88:	4629      	mov	r1, r5
 8004a8a:	f000 fb45 	bl	8005118 <_malloc_r>
 8004a8e:	4606      	mov	r6, r0
 8004a90:	b950      	cbnz	r0, 8004aa8 <__ssputs_r+0x5c>
 8004a92:	230c      	movs	r3, #12
 8004a94:	f04f 30ff 	mov.w	r0, #4294967295
 8004a98:	f8ca 3000 	str.w	r3, [sl]
 8004a9c:	89a3      	ldrh	r3, [r4, #12]
 8004a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aa2:	81a3      	strh	r3, [r4, #12]
 8004aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aa8:	464a      	mov	r2, r9
 8004aaa:	6921      	ldr	r1, [r4, #16]
 8004aac:	f7ff ff98 	bl	80049e0 <memcpy>
 8004ab0:	89a3      	ldrh	r3, [r4, #12]
 8004ab2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aba:	81a3      	strh	r3, [r4, #12]
 8004abc:	6126      	str	r6, [r4, #16]
 8004abe:	444e      	add	r6, r9
 8004ac0:	6026      	str	r6, [r4, #0]
 8004ac2:	463e      	mov	r6, r7
 8004ac4:	6165      	str	r5, [r4, #20]
 8004ac6:	eba5 0509 	sub.w	r5, r5, r9
 8004aca:	60a5      	str	r5, [r4, #8]
 8004acc:	42be      	cmp	r6, r7
 8004ace:	d900      	bls.n	8004ad2 <__ssputs_r+0x86>
 8004ad0:	463e      	mov	r6, r7
 8004ad2:	4632      	mov	r2, r6
 8004ad4:	4641      	mov	r1, r8
 8004ad6:	6820      	ldr	r0, [r4, #0]
 8004ad8:	f000 fab8 	bl	800504c <memmove>
 8004adc:	68a3      	ldr	r3, [r4, #8]
 8004ade:	6822      	ldr	r2, [r4, #0]
 8004ae0:	1b9b      	subs	r3, r3, r6
 8004ae2:	4432      	add	r2, r6
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	60a3      	str	r3, [r4, #8]
 8004ae8:	6022      	str	r2, [r4, #0]
 8004aea:	e7db      	b.n	8004aa4 <__ssputs_r+0x58>
 8004aec:	462a      	mov	r2, r5
 8004aee:	f000 fb6d 	bl	80051cc <_realloc_r>
 8004af2:	4606      	mov	r6, r0
 8004af4:	2800      	cmp	r0, #0
 8004af6:	d1e1      	bne.n	8004abc <__ssputs_r+0x70>
 8004af8:	4650      	mov	r0, sl
 8004afa:	6921      	ldr	r1, [r4, #16]
 8004afc:	f000 fac0 	bl	8005080 <_free_r>
 8004b00:	e7c7      	b.n	8004a92 <__ssputs_r+0x46>
	...

08004b04 <_svfiprintf_r>:
 8004b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b08:	4698      	mov	r8, r3
 8004b0a:	898b      	ldrh	r3, [r1, #12]
 8004b0c:	4607      	mov	r7, r0
 8004b0e:	061b      	lsls	r3, r3, #24
 8004b10:	460d      	mov	r5, r1
 8004b12:	4614      	mov	r4, r2
 8004b14:	b09d      	sub	sp, #116	; 0x74
 8004b16:	d50e      	bpl.n	8004b36 <_svfiprintf_r+0x32>
 8004b18:	690b      	ldr	r3, [r1, #16]
 8004b1a:	b963      	cbnz	r3, 8004b36 <_svfiprintf_r+0x32>
 8004b1c:	2140      	movs	r1, #64	; 0x40
 8004b1e:	f000 fafb 	bl	8005118 <_malloc_r>
 8004b22:	6028      	str	r0, [r5, #0]
 8004b24:	6128      	str	r0, [r5, #16]
 8004b26:	b920      	cbnz	r0, 8004b32 <_svfiprintf_r+0x2e>
 8004b28:	230c      	movs	r3, #12
 8004b2a:	603b      	str	r3, [r7, #0]
 8004b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b30:	e0d1      	b.n	8004cd6 <_svfiprintf_r+0x1d2>
 8004b32:	2340      	movs	r3, #64	; 0x40
 8004b34:	616b      	str	r3, [r5, #20]
 8004b36:	2300      	movs	r3, #0
 8004b38:	9309      	str	r3, [sp, #36]	; 0x24
 8004b3a:	2320      	movs	r3, #32
 8004b3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b40:	2330      	movs	r3, #48	; 0x30
 8004b42:	f04f 0901 	mov.w	r9, #1
 8004b46:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004cf0 <_svfiprintf_r+0x1ec>
 8004b4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b52:	4623      	mov	r3, r4
 8004b54:	469a      	mov	sl, r3
 8004b56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b5a:	b10a      	cbz	r2, 8004b60 <_svfiprintf_r+0x5c>
 8004b5c:	2a25      	cmp	r2, #37	; 0x25
 8004b5e:	d1f9      	bne.n	8004b54 <_svfiprintf_r+0x50>
 8004b60:	ebba 0b04 	subs.w	fp, sl, r4
 8004b64:	d00b      	beq.n	8004b7e <_svfiprintf_r+0x7a>
 8004b66:	465b      	mov	r3, fp
 8004b68:	4622      	mov	r2, r4
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	4638      	mov	r0, r7
 8004b6e:	f7ff ff6d 	bl	8004a4c <__ssputs_r>
 8004b72:	3001      	adds	r0, #1
 8004b74:	f000 80aa 	beq.w	8004ccc <_svfiprintf_r+0x1c8>
 8004b78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b7a:	445a      	add	r2, fp
 8004b7c:	9209      	str	r2, [sp, #36]	; 0x24
 8004b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 80a2 	beq.w	8004ccc <_svfiprintf_r+0x1c8>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b92:	f10a 0a01 	add.w	sl, sl, #1
 8004b96:	9304      	str	r3, [sp, #16]
 8004b98:	9307      	str	r3, [sp, #28]
 8004b9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b9e:	931a      	str	r3, [sp, #104]	; 0x68
 8004ba0:	4654      	mov	r4, sl
 8004ba2:	2205      	movs	r2, #5
 8004ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ba8:	4851      	ldr	r0, [pc, #324]	; (8004cf0 <_svfiprintf_r+0x1ec>)
 8004baa:	f000 fa41 	bl	8005030 <memchr>
 8004bae:	9a04      	ldr	r2, [sp, #16]
 8004bb0:	b9d8      	cbnz	r0, 8004bea <_svfiprintf_r+0xe6>
 8004bb2:	06d0      	lsls	r0, r2, #27
 8004bb4:	bf44      	itt	mi
 8004bb6:	2320      	movmi	r3, #32
 8004bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bbc:	0711      	lsls	r1, r2, #28
 8004bbe:	bf44      	itt	mi
 8004bc0:	232b      	movmi	r3, #43	; 0x2b
 8004bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8004bca:	2b2a      	cmp	r3, #42	; 0x2a
 8004bcc:	d015      	beq.n	8004bfa <_svfiprintf_r+0xf6>
 8004bce:	4654      	mov	r4, sl
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	f04f 0c0a 	mov.w	ip, #10
 8004bd6:	9a07      	ldr	r2, [sp, #28]
 8004bd8:	4621      	mov	r1, r4
 8004bda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bde:	3b30      	subs	r3, #48	; 0x30
 8004be0:	2b09      	cmp	r3, #9
 8004be2:	d94e      	bls.n	8004c82 <_svfiprintf_r+0x17e>
 8004be4:	b1b0      	cbz	r0, 8004c14 <_svfiprintf_r+0x110>
 8004be6:	9207      	str	r2, [sp, #28]
 8004be8:	e014      	b.n	8004c14 <_svfiprintf_r+0x110>
 8004bea:	eba0 0308 	sub.w	r3, r0, r8
 8004bee:	fa09 f303 	lsl.w	r3, r9, r3
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	46a2      	mov	sl, r4
 8004bf6:	9304      	str	r3, [sp, #16]
 8004bf8:	e7d2      	b.n	8004ba0 <_svfiprintf_r+0x9c>
 8004bfa:	9b03      	ldr	r3, [sp, #12]
 8004bfc:	1d19      	adds	r1, r3, #4
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	9103      	str	r1, [sp, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	bfbb      	ittet	lt
 8004c06:	425b      	neglt	r3, r3
 8004c08:	f042 0202 	orrlt.w	r2, r2, #2
 8004c0c:	9307      	strge	r3, [sp, #28]
 8004c0e:	9307      	strlt	r3, [sp, #28]
 8004c10:	bfb8      	it	lt
 8004c12:	9204      	strlt	r2, [sp, #16]
 8004c14:	7823      	ldrb	r3, [r4, #0]
 8004c16:	2b2e      	cmp	r3, #46	; 0x2e
 8004c18:	d10c      	bne.n	8004c34 <_svfiprintf_r+0x130>
 8004c1a:	7863      	ldrb	r3, [r4, #1]
 8004c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c1e:	d135      	bne.n	8004c8c <_svfiprintf_r+0x188>
 8004c20:	9b03      	ldr	r3, [sp, #12]
 8004c22:	3402      	adds	r4, #2
 8004c24:	1d1a      	adds	r2, r3, #4
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	9203      	str	r2, [sp, #12]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	bfb8      	it	lt
 8004c2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c32:	9305      	str	r3, [sp, #20]
 8004c34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d00 <_svfiprintf_r+0x1fc>
 8004c38:	2203      	movs	r2, #3
 8004c3a:	4650      	mov	r0, sl
 8004c3c:	7821      	ldrb	r1, [r4, #0]
 8004c3e:	f000 f9f7 	bl	8005030 <memchr>
 8004c42:	b140      	cbz	r0, 8004c56 <_svfiprintf_r+0x152>
 8004c44:	2340      	movs	r3, #64	; 0x40
 8004c46:	eba0 000a 	sub.w	r0, r0, sl
 8004c4a:	fa03 f000 	lsl.w	r0, r3, r0
 8004c4e:	9b04      	ldr	r3, [sp, #16]
 8004c50:	3401      	adds	r4, #1
 8004c52:	4303      	orrs	r3, r0
 8004c54:	9304      	str	r3, [sp, #16]
 8004c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c5a:	2206      	movs	r2, #6
 8004c5c:	4825      	ldr	r0, [pc, #148]	; (8004cf4 <_svfiprintf_r+0x1f0>)
 8004c5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c62:	f000 f9e5 	bl	8005030 <memchr>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	d038      	beq.n	8004cdc <_svfiprintf_r+0x1d8>
 8004c6a:	4b23      	ldr	r3, [pc, #140]	; (8004cf8 <_svfiprintf_r+0x1f4>)
 8004c6c:	bb1b      	cbnz	r3, 8004cb6 <_svfiprintf_r+0x1b2>
 8004c6e:	9b03      	ldr	r3, [sp, #12]
 8004c70:	3307      	adds	r3, #7
 8004c72:	f023 0307 	bic.w	r3, r3, #7
 8004c76:	3308      	adds	r3, #8
 8004c78:	9303      	str	r3, [sp, #12]
 8004c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c7c:	4433      	add	r3, r6
 8004c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004c80:	e767      	b.n	8004b52 <_svfiprintf_r+0x4e>
 8004c82:	460c      	mov	r4, r1
 8004c84:	2001      	movs	r0, #1
 8004c86:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c8a:	e7a5      	b.n	8004bd8 <_svfiprintf_r+0xd4>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f04f 0c0a 	mov.w	ip, #10
 8004c92:	4619      	mov	r1, r3
 8004c94:	3401      	adds	r4, #1
 8004c96:	9305      	str	r3, [sp, #20]
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c9e:	3a30      	subs	r2, #48	; 0x30
 8004ca0:	2a09      	cmp	r2, #9
 8004ca2:	d903      	bls.n	8004cac <_svfiprintf_r+0x1a8>
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0c5      	beq.n	8004c34 <_svfiprintf_r+0x130>
 8004ca8:	9105      	str	r1, [sp, #20]
 8004caa:	e7c3      	b.n	8004c34 <_svfiprintf_r+0x130>
 8004cac:	4604      	mov	r4, r0
 8004cae:	2301      	movs	r3, #1
 8004cb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cb4:	e7f0      	b.n	8004c98 <_svfiprintf_r+0x194>
 8004cb6:	ab03      	add	r3, sp, #12
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	462a      	mov	r2, r5
 8004cbc:	4638      	mov	r0, r7
 8004cbe:	4b0f      	ldr	r3, [pc, #60]	; (8004cfc <_svfiprintf_r+0x1f8>)
 8004cc0:	a904      	add	r1, sp, #16
 8004cc2:	f3af 8000 	nop.w
 8004cc6:	1c42      	adds	r2, r0, #1
 8004cc8:	4606      	mov	r6, r0
 8004cca:	d1d6      	bne.n	8004c7a <_svfiprintf_r+0x176>
 8004ccc:	89ab      	ldrh	r3, [r5, #12]
 8004cce:	065b      	lsls	r3, r3, #25
 8004cd0:	f53f af2c 	bmi.w	8004b2c <_svfiprintf_r+0x28>
 8004cd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cd6:	b01d      	add	sp, #116	; 0x74
 8004cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cdc:	ab03      	add	r3, sp, #12
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	462a      	mov	r2, r5
 8004ce2:	4638      	mov	r0, r7
 8004ce4:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <_svfiprintf_r+0x1f8>)
 8004ce6:	a904      	add	r1, sp, #16
 8004ce8:	f000 f87c 	bl	8004de4 <_printf_i>
 8004cec:	e7eb      	b.n	8004cc6 <_svfiprintf_r+0x1c2>
 8004cee:	bf00      	nop
 8004cf0:	08005330 	.word	0x08005330
 8004cf4:	0800533a 	.word	0x0800533a
 8004cf8:	00000000 	.word	0x00000000
 8004cfc:	08004a4d 	.word	0x08004a4d
 8004d00:	08005336 	.word	0x08005336

08004d04 <_printf_common>:
 8004d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d08:	4616      	mov	r6, r2
 8004d0a:	4699      	mov	r9, r3
 8004d0c:	688a      	ldr	r2, [r1, #8]
 8004d0e:	690b      	ldr	r3, [r1, #16]
 8004d10:	4607      	mov	r7, r0
 8004d12:	4293      	cmp	r3, r2
 8004d14:	bfb8      	it	lt
 8004d16:	4613      	movlt	r3, r2
 8004d18:	6033      	str	r3, [r6, #0]
 8004d1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d1e:	460c      	mov	r4, r1
 8004d20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d24:	b10a      	cbz	r2, 8004d2a <_printf_common+0x26>
 8004d26:	3301      	adds	r3, #1
 8004d28:	6033      	str	r3, [r6, #0]
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	0699      	lsls	r1, r3, #26
 8004d2e:	bf42      	ittt	mi
 8004d30:	6833      	ldrmi	r3, [r6, #0]
 8004d32:	3302      	addmi	r3, #2
 8004d34:	6033      	strmi	r3, [r6, #0]
 8004d36:	6825      	ldr	r5, [r4, #0]
 8004d38:	f015 0506 	ands.w	r5, r5, #6
 8004d3c:	d106      	bne.n	8004d4c <_printf_common+0x48>
 8004d3e:	f104 0a19 	add.w	sl, r4, #25
 8004d42:	68e3      	ldr	r3, [r4, #12]
 8004d44:	6832      	ldr	r2, [r6, #0]
 8004d46:	1a9b      	subs	r3, r3, r2
 8004d48:	42ab      	cmp	r3, r5
 8004d4a:	dc28      	bgt.n	8004d9e <_printf_common+0x9a>
 8004d4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d50:	1e13      	subs	r3, r2, #0
 8004d52:	6822      	ldr	r2, [r4, #0]
 8004d54:	bf18      	it	ne
 8004d56:	2301      	movne	r3, #1
 8004d58:	0692      	lsls	r2, r2, #26
 8004d5a:	d42d      	bmi.n	8004db8 <_printf_common+0xb4>
 8004d5c:	4649      	mov	r1, r9
 8004d5e:	4638      	mov	r0, r7
 8004d60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d64:	47c0      	blx	r8
 8004d66:	3001      	adds	r0, #1
 8004d68:	d020      	beq.n	8004dac <_printf_common+0xa8>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	68e5      	ldr	r5, [r4, #12]
 8004d6e:	f003 0306 	and.w	r3, r3, #6
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	bf18      	it	ne
 8004d76:	2500      	movne	r5, #0
 8004d78:	6832      	ldr	r2, [r6, #0]
 8004d7a:	f04f 0600 	mov.w	r6, #0
 8004d7e:	68a3      	ldr	r3, [r4, #8]
 8004d80:	bf08      	it	eq
 8004d82:	1aad      	subeq	r5, r5, r2
 8004d84:	6922      	ldr	r2, [r4, #16]
 8004d86:	bf08      	it	eq
 8004d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	bfc4      	itt	gt
 8004d90:	1a9b      	subgt	r3, r3, r2
 8004d92:	18ed      	addgt	r5, r5, r3
 8004d94:	341a      	adds	r4, #26
 8004d96:	42b5      	cmp	r5, r6
 8004d98:	d11a      	bne.n	8004dd0 <_printf_common+0xcc>
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	e008      	b.n	8004db0 <_printf_common+0xac>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	4652      	mov	r2, sl
 8004da2:	4649      	mov	r1, r9
 8004da4:	4638      	mov	r0, r7
 8004da6:	47c0      	blx	r8
 8004da8:	3001      	adds	r0, #1
 8004daa:	d103      	bne.n	8004db4 <_printf_common+0xb0>
 8004dac:	f04f 30ff 	mov.w	r0, #4294967295
 8004db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db4:	3501      	adds	r5, #1
 8004db6:	e7c4      	b.n	8004d42 <_printf_common+0x3e>
 8004db8:	2030      	movs	r0, #48	; 0x30
 8004dba:	18e1      	adds	r1, r4, r3
 8004dbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dc6:	4422      	add	r2, r4
 8004dc8:	3302      	adds	r3, #2
 8004dca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004dce:	e7c5      	b.n	8004d5c <_printf_common+0x58>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	4622      	mov	r2, r4
 8004dd4:	4649      	mov	r1, r9
 8004dd6:	4638      	mov	r0, r7
 8004dd8:	47c0      	blx	r8
 8004dda:	3001      	adds	r0, #1
 8004ddc:	d0e6      	beq.n	8004dac <_printf_common+0xa8>
 8004dde:	3601      	adds	r6, #1
 8004de0:	e7d9      	b.n	8004d96 <_printf_common+0x92>
	...

08004de4 <_printf_i>:
 8004de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004de8:	460c      	mov	r4, r1
 8004dea:	7e27      	ldrb	r7, [r4, #24]
 8004dec:	4691      	mov	r9, r2
 8004dee:	2f78      	cmp	r7, #120	; 0x78
 8004df0:	4680      	mov	r8, r0
 8004df2:	469a      	mov	sl, r3
 8004df4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004df6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dfa:	d807      	bhi.n	8004e0c <_printf_i+0x28>
 8004dfc:	2f62      	cmp	r7, #98	; 0x62
 8004dfe:	d80a      	bhi.n	8004e16 <_printf_i+0x32>
 8004e00:	2f00      	cmp	r7, #0
 8004e02:	f000 80d9 	beq.w	8004fb8 <_printf_i+0x1d4>
 8004e06:	2f58      	cmp	r7, #88	; 0x58
 8004e08:	f000 80a4 	beq.w	8004f54 <_printf_i+0x170>
 8004e0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e14:	e03a      	b.n	8004e8c <_printf_i+0xa8>
 8004e16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e1a:	2b15      	cmp	r3, #21
 8004e1c:	d8f6      	bhi.n	8004e0c <_printf_i+0x28>
 8004e1e:	a001      	add	r0, pc, #4	; (adr r0, 8004e24 <_printf_i+0x40>)
 8004e20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e24:	08004e7d 	.word	0x08004e7d
 8004e28:	08004e91 	.word	0x08004e91
 8004e2c:	08004e0d 	.word	0x08004e0d
 8004e30:	08004e0d 	.word	0x08004e0d
 8004e34:	08004e0d 	.word	0x08004e0d
 8004e38:	08004e0d 	.word	0x08004e0d
 8004e3c:	08004e91 	.word	0x08004e91
 8004e40:	08004e0d 	.word	0x08004e0d
 8004e44:	08004e0d 	.word	0x08004e0d
 8004e48:	08004e0d 	.word	0x08004e0d
 8004e4c:	08004e0d 	.word	0x08004e0d
 8004e50:	08004f9f 	.word	0x08004f9f
 8004e54:	08004ec1 	.word	0x08004ec1
 8004e58:	08004f81 	.word	0x08004f81
 8004e5c:	08004e0d 	.word	0x08004e0d
 8004e60:	08004e0d 	.word	0x08004e0d
 8004e64:	08004fc1 	.word	0x08004fc1
 8004e68:	08004e0d 	.word	0x08004e0d
 8004e6c:	08004ec1 	.word	0x08004ec1
 8004e70:	08004e0d 	.word	0x08004e0d
 8004e74:	08004e0d 	.word	0x08004e0d
 8004e78:	08004f89 	.word	0x08004f89
 8004e7c:	680b      	ldr	r3, [r1, #0]
 8004e7e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e82:	1d1a      	adds	r2, r3, #4
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	600a      	str	r2, [r1, #0]
 8004e88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e0a4      	b.n	8004fda <_printf_i+0x1f6>
 8004e90:	6825      	ldr	r5, [r4, #0]
 8004e92:	6808      	ldr	r0, [r1, #0]
 8004e94:	062e      	lsls	r6, r5, #24
 8004e96:	f100 0304 	add.w	r3, r0, #4
 8004e9a:	d50a      	bpl.n	8004eb2 <_printf_i+0xce>
 8004e9c:	6805      	ldr	r5, [r0, #0]
 8004e9e:	600b      	str	r3, [r1, #0]
 8004ea0:	2d00      	cmp	r5, #0
 8004ea2:	da03      	bge.n	8004eac <_printf_i+0xc8>
 8004ea4:	232d      	movs	r3, #45	; 0x2d
 8004ea6:	426d      	negs	r5, r5
 8004ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eac:	230a      	movs	r3, #10
 8004eae:	485e      	ldr	r0, [pc, #376]	; (8005028 <_printf_i+0x244>)
 8004eb0:	e019      	b.n	8004ee6 <_printf_i+0x102>
 8004eb2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004eb6:	6805      	ldr	r5, [r0, #0]
 8004eb8:	600b      	str	r3, [r1, #0]
 8004eba:	bf18      	it	ne
 8004ebc:	b22d      	sxthne	r5, r5
 8004ebe:	e7ef      	b.n	8004ea0 <_printf_i+0xbc>
 8004ec0:	680b      	ldr	r3, [r1, #0]
 8004ec2:	6825      	ldr	r5, [r4, #0]
 8004ec4:	1d18      	adds	r0, r3, #4
 8004ec6:	6008      	str	r0, [r1, #0]
 8004ec8:	0628      	lsls	r0, r5, #24
 8004eca:	d501      	bpl.n	8004ed0 <_printf_i+0xec>
 8004ecc:	681d      	ldr	r5, [r3, #0]
 8004ece:	e002      	b.n	8004ed6 <_printf_i+0xf2>
 8004ed0:	0669      	lsls	r1, r5, #25
 8004ed2:	d5fb      	bpl.n	8004ecc <_printf_i+0xe8>
 8004ed4:	881d      	ldrh	r5, [r3, #0]
 8004ed6:	2f6f      	cmp	r7, #111	; 0x6f
 8004ed8:	bf0c      	ite	eq
 8004eda:	2308      	moveq	r3, #8
 8004edc:	230a      	movne	r3, #10
 8004ede:	4852      	ldr	r0, [pc, #328]	; (8005028 <_printf_i+0x244>)
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ee6:	6866      	ldr	r6, [r4, #4]
 8004ee8:	2e00      	cmp	r6, #0
 8004eea:	bfa8      	it	ge
 8004eec:	6821      	ldrge	r1, [r4, #0]
 8004eee:	60a6      	str	r6, [r4, #8]
 8004ef0:	bfa4      	itt	ge
 8004ef2:	f021 0104 	bicge.w	r1, r1, #4
 8004ef6:	6021      	strge	r1, [r4, #0]
 8004ef8:	b90d      	cbnz	r5, 8004efe <_printf_i+0x11a>
 8004efa:	2e00      	cmp	r6, #0
 8004efc:	d04d      	beq.n	8004f9a <_printf_i+0x1b6>
 8004efe:	4616      	mov	r6, r2
 8004f00:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f04:	fb03 5711 	mls	r7, r3, r1, r5
 8004f08:	5dc7      	ldrb	r7, [r0, r7]
 8004f0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f0e:	462f      	mov	r7, r5
 8004f10:	42bb      	cmp	r3, r7
 8004f12:	460d      	mov	r5, r1
 8004f14:	d9f4      	bls.n	8004f00 <_printf_i+0x11c>
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d10b      	bne.n	8004f32 <_printf_i+0x14e>
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	07df      	lsls	r7, r3, #31
 8004f1e:	d508      	bpl.n	8004f32 <_printf_i+0x14e>
 8004f20:	6923      	ldr	r3, [r4, #16]
 8004f22:	6861      	ldr	r1, [r4, #4]
 8004f24:	4299      	cmp	r1, r3
 8004f26:	bfde      	ittt	le
 8004f28:	2330      	movle	r3, #48	; 0x30
 8004f2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f32:	1b92      	subs	r2, r2, r6
 8004f34:	6122      	str	r2, [r4, #16]
 8004f36:	464b      	mov	r3, r9
 8004f38:	4621      	mov	r1, r4
 8004f3a:	4640      	mov	r0, r8
 8004f3c:	f8cd a000 	str.w	sl, [sp]
 8004f40:	aa03      	add	r2, sp, #12
 8004f42:	f7ff fedf 	bl	8004d04 <_printf_common>
 8004f46:	3001      	adds	r0, #1
 8004f48:	d14c      	bne.n	8004fe4 <_printf_i+0x200>
 8004f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4e:	b004      	add	sp, #16
 8004f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f54:	4834      	ldr	r0, [pc, #208]	; (8005028 <_printf_i+0x244>)
 8004f56:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f5a:	680e      	ldr	r6, [r1, #0]
 8004f5c:	6823      	ldr	r3, [r4, #0]
 8004f5e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004f62:	061f      	lsls	r7, r3, #24
 8004f64:	600e      	str	r6, [r1, #0]
 8004f66:	d514      	bpl.n	8004f92 <_printf_i+0x1ae>
 8004f68:	07d9      	lsls	r1, r3, #31
 8004f6a:	bf44      	itt	mi
 8004f6c:	f043 0320 	orrmi.w	r3, r3, #32
 8004f70:	6023      	strmi	r3, [r4, #0]
 8004f72:	b91d      	cbnz	r5, 8004f7c <_printf_i+0x198>
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	f023 0320 	bic.w	r3, r3, #32
 8004f7a:	6023      	str	r3, [r4, #0]
 8004f7c:	2310      	movs	r3, #16
 8004f7e:	e7af      	b.n	8004ee0 <_printf_i+0xfc>
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	f043 0320 	orr.w	r3, r3, #32
 8004f86:	6023      	str	r3, [r4, #0]
 8004f88:	2378      	movs	r3, #120	; 0x78
 8004f8a:	4828      	ldr	r0, [pc, #160]	; (800502c <_printf_i+0x248>)
 8004f8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f90:	e7e3      	b.n	8004f5a <_printf_i+0x176>
 8004f92:	065e      	lsls	r6, r3, #25
 8004f94:	bf48      	it	mi
 8004f96:	b2ad      	uxthmi	r5, r5
 8004f98:	e7e6      	b.n	8004f68 <_printf_i+0x184>
 8004f9a:	4616      	mov	r6, r2
 8004f9c:	e7bb      	b.n	8004f16 <_printf_i+0x132>
 8004f9e:	680b      	ldr	r3, [r1, #0]
 8004fa0:	6826      	ldr	r6, [r4, #0]
 8004fa2:	1d1d      	adds	r5, r3, #4
 8004fa4:	6960      	ldr	r0, [r4, #20]
 8004fa6:	600d      	str	r5, [r1, #0]
 8004fa8:	0635      	lsls	r5, r6, #24
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	d501      	bpl.n	8004fb2 <_printf_i+0x1ce>
 8004fae:	6018      	str	r0, [r3, #0]
 8004fb0:	e002      	b.n	8004fb8 <_printf_i+0x1d4>
 8004fb2:	0671      	lsls	r1, r6, #25
 8004fb4:	d5fb      	bpl.n	8004fae <_printf_i+0x1ca>
 8004fb6:	8018      	strh	r0, [r3, #0]
 8004fb8:	2300      	movs	r3, #0
 8004fba:	4616      	mov	r6, r2
 8004fbc:	6123      	str	r3, [r4, #16]
 8004fbe:	e7ba      	b.n	8004f36 <_printf_i+0x152>
 8004fc0:	680b      	ldr	r3, [r1, #0]
 8004fc2:	1d1a      	adds	r2, r3, #4
 8004fc4:	600a      	str	r2, [r1, #0]
 8004fc6:	681e      	ldr	r6, [r3, #0]
 8004fc8:	2100      	movs	r1, #0
 8004fca:	4630      	mov	r0, r6
 8004fcc:	6862      	ldr	r2, [r4, #4]
 8004fce:	f000 f82f 	bl	8005030 <memchr>
 8004fd2:	b108      	cbz	r0, 8004fd8 <_printf_i+0x1f4>
 8004fd4:	1b80      	subs	r0, r0, r6
 8004fd6:	6060      	str	r0, [r4, #4]
 8004fd8:	6863      	ldr	r3, [r4, #4]
 8004fda:	6123      	str	r3, [r4, #16]
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fe2:	e7a8      	b.n	8004f36 <_printf_i+0x152>
 8004fe4:	4632      	mov	r2, r6
 8004fe6:	4649      	mov	r1, r9
 8004fe8:	4640      	mov	r0, r8
 8004fea:	6923      	ldr	r3, [r4, #16]
 8004fec:	47d0      	blx	sl
 8004fee:	3001      	adds	r0, #1
 8004ff0:	d0ab      	beq.n	8004f4a <_printf_i+0x166>
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	079b      	lsls	r3, r3, #30
 8004ff6:	d413      	bmi.n	8005020 <_printf_i+0x23c>
 8004ff8:	68e0      	ldr	r0, [r4, #12]
 8004ffa:	9b03      	ldr	r3, [sp, #12]
 8004ffc:	4298      	cmp	r0, r3
 8004ffe:	bfb8      	it	lt
 8005000:	4618      	movlt	r0, r3
 8005002:	e7a4      	b.n	8004f4e <_printf_i+0x16a>
 8005004:	2301      	movs	r3, #1
 8005006:	4632      	mov	r2, r6
 8005008:	4649      	mov	r1, r9
 800500a:	4640      	mov	r0, r8
 800500c:	47d0      	blx	sl
 800500e:	3001      	adds	r0, #1
 8005010:	d09b      	beq.n	8004f4a <_printf_i+0x166>
 8005012:	3501      	adds	r5, #1
 8005014:	68e3      	ldr	r3, [r4, #12]
 8005016:	9903      	ldr	r1, [sp, #12]
 8005018:	1a5b      	subs	r3, r3, r1
 800501a:	42ab      	cmp	r3, r5
 800501c:	dcf2      	bgt.n	8005004 <_printf_i+0x220>
 800501e:	e7eb      	b.n	8004ff8 <_printf_i+0x214>
 8005020:	2500      	movs	r5, #0
 8005022:	f104 0619 	add.w	r6, r4, #25
 8005026:	e7f5      	b.n	8005014 <_printf_i+0x230>
 8005028:	08005341 	.word	0x08005341
 800502c:	08005352 	.word	0x08005352

08005030 <memchr>:
 8005030:	4603      	mov	r3, r0
 8005032:	b510      	push	{r4, lr}
 8005034:	b2c9      	uxtb	r1, r1
 8005036:	4402      	add	r2, r0
 8005038:	4293      	cmp	r3, r2
 800503a:	4618      	mov	r0, r3
 800503c:	d101      	bne.n	8005042 <memchr+0x12>
 800503e:	2000      	movs	r0, #0
 8005040:	e003      	b.n	800504a <memchr+0x1a>
 8005042:	7804      	ldrb	r4, [r0, #0]
 8005044:	3301      	adds	r3, #1
 8005046:	428c      	cmp	r4, r1
 8005048:	d1f6      	bne.n	8005038 <memchr+0x8>
 800504a:	bd10      	pop	{r4, pc}

0800504c <memmove>:
 800504c:	4288      	cmp	r0, r1
 800504e:	b510      	push	{r4, lr}
 8005050:	eb01 0402 	add.w	r4, r1, r2
 8005054:	d902      	bls.n	800505c <memmove+0x10>
 8005056:	4284      	cmp	r4, r0
 8005058:	4623      	mov	r3, r4
 800505a:	d807      	bhi.n	800506c <memmove+0x20>
 800505c:	1e43      	subs	r3, r0, #1
 800505e:	42a1      	cmp	r1, r4
 8005060:	d008      	beq.n	8005074 <memmove+0x28>
 8005062:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800506a:	e7f8      	b.n	800505e <memmove+0x12>
 800506c:	4601      	mov	r1, r0
 800506e:	4402      	add	r2, r0
 8005070:	428a      	cmp	r2, r1
 8005072:	d100      	bne.n	8005076 <memmove+0x2a>
 8005074:	bd10      	pop	{r4, pc}
 8005076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800507a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800507e:	e7f7      	b.n	8005070 <memmove+0x24>

08005080 <_free_r>:
 8005080:	b538      	push	{r3, r4, r5, lr}
 8005082:	4605      	mov	r5, r0
 8005084:	2900      	cmp	r1, #0
 8005086:	d043      	beq.n	8005110 <_free_r+0x90>
 8005088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800508c:	1f0c      	subs	r4, r1, #4
 800508e:	2b00      	cmp	r3, #0
 8005090:	bfb8      	it	lt
 8005092:	18e4      	addlt	r4, r4, r3
 8005094:	f000 f8d0 	bl	8005238 <__malloc_lock>
 8005098:	4a1e      	ldr	r2, [pc, #120]	; (8005114 <_free_r+0x94>)
 800509a:	6813      	ldr	r3, [r2, #0]
 800509c:	4610      	mov	r0, r2
 800509e:	b933      	cbnz	r3, 80050ae <_free_r+0x2e>
 80050a0:	6063      	str	r3, [r4, #4]
 80050a2:	6014      	str	r4, [r2, #0]
 80050a4:	4628      	mov	r0, r5
 80050a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050aa:	f000 b8cb 	b.w	8005244 <__malloc_unlock>
 80050ae:	42a3      	cmp	r3, r4
 80050b0:	d90a      	bls.n	80050c8 <_free_r+0x48>
 80050b2:	6821      	ldr	r1, [r4, #0]
 80050b4:	1862      	adds	r2, r4, r1
 80050b6:	4293      	cmp	r3, r2
 80050b8:	bf01      	itttt	eq
 80050ba:	681a      	ldreq	r2, [r3, #0]
 80050bc:	685b      	ldreq	r3, [r3, #4]
 80050be:	1852      	addeq	r2, r2, r1
 80050c0:	6022      	streq	r2, [r4, #0]
 80050c2:	6063      	str	r3, [r4, #4]
 80050c4:	6004      	str	r4, [r0, #0]
 80050c6:	e7ed      	b.n	80050a4 <_free_r+0x24>
 80050c8:	461a      	mov	r2, r3
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	b10b      	cbz	r3, 80050d2 <_free_r+0x52>
 80050ce:	42a3      	cmp	r3, r4
 80050d0:	d9fa      	bls.n	80050c8 <_free_r+0x48>
 80050d2:	6811      	ldr	r1, [r2, #0]
 80050d4:	1850      	adds	r0, r2, r1
 80050d6:	42a0      	cmp	r0, r4
 80050d8:	d10b      	bne.n	80050f2 <_free_r+0x72>
 80050da:	6820      	ldr	r0, [r4, #0]
 80050dc:	4401      	add	r1, r0
 80050de:	1850      	adds	r0, r2, r1
 80050e0:	4283      	cmp	r3, r0
 80050e2:	6011      	str	r1, [r2, #0]
 80050e4:	d1de      	bne.n	80050a4 <_free_r+0x24>
 80050e6:	6818      	ldr	r0, [r3, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	4401      	add	r1, r0
 80050ec:	6011      	str	r1, [r2, #0]
 80050ee:	6053      	str	r3, [r2, #4]
 80050f0:	e7d8      	b.n	80050a4 <_free_r+0x24>
 80050f2:	d902      	bls.n	80050fa <_free_r+0x7a>
 80050f4:	230c      	movs	r3, #12
 80050f6:	602b      	str	r3, [r5, #0]
 80050f8:	e7d4      	b.n	80050a4 <_free_r+0x24>
 80050fa:	6820      	ldr	r0, [r4, #0]
 80050fc:	1821      	adds	r1, r4, r0
 80050fe:	428b      	cmp	r3, r1
 8005100:	bf01      	itttt	eq
 8005102:	6819      	ldreq	r1, [r3, #0]
 8005104:	685b      	ldreq	r3, [r3, #4]
 8005106:	1809      	addeq	r1, r1, r0
 8005108:	6021      	streq	r1, [r4, #0]
 800510a:	6063      	str	r3, [r4, #4]
 800510c:	6054      	str	r4, [r2, #4]
 800510e:	e7c9      	b.n	80050a4 <_free_r+0x24>
 8005110:	bd38      	pop	{r3, r4, r5, pc}
 8005112:	bf00      	nop
 8005114:	200019a4 	.word	0x200019a4

08005118 <_malloc_r>:
 8005118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511a:	1ccd      	adds	r5, r1, #3
 800511c:	f025 0503 	bic.w	r5, r5, #3
 8005120:	3508      	adds	r5, #8
 8005122:	2d0c      	cmp	r5, #12
 8005124:	bf38      	it	cc
 8005126:	250c      	movcc	r5, #12
 8005128:	2d00      	cmp	r5, #0
 800512a:	4606      	mov	r6, r0
 800512c:	db01      	blt.n	8005132 <_malloc_r+0x1a>
 800512e:	42a9      	cmp	r1, r5
 8005130:	d903      	bls.n	800513a <_malloc_r+0x22>
 8005132:	230c      	movs	r3, #12
 8005134:	6033      	str	r3, [r6, #0]
 8005136:	2000      	movs	r0, #0
 8005138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800513a:	f000 f87d 	bl	8005238 <__malloc_lock>
 800513e:	4921      	ldr	r1, [pc, #132]	; (80051c4 <_malloc_r+0xac>)
 8005140:	680a      	ldr	r2, [r1, #0]
 8005142:	4614      	mov	r4, r2
 8005144:	b99c      	cbnz	r4, 800516e <_malloc_r+0x56>
 8005146:	4f20      	ldr	r7, [pc, #128]	; (80051c8 <_malloc_r+0xb0>)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	b923      	cbnz	r3, 8005156 <_malloc_r+0x3e>
 800514c:	4621      	mov	r1, r4
 800514e:	4630      	mov	r0, r6
 8005150:	f000 f862 	bl	8005218 <_sbrk_r>
 8005154:	6038      	str	r0, [r7, #0]
 8005156:	4629      	mov	r1, r5
 8005158:	4630      	mov	r0, r6
 800515a:	f000 f85d 	bl	8005218 <_sbrk_r>
 800515e:	1c43      	adds	r3, r0, #1
 8005160:	d123      	bne.n	80051aa <_malloc_r+0x92>
 8005162:	230c      	movs	r3, #12
 8005164:	4630      	mov	r0, r6
 8005166:	6033      	str	r3, [r6, #0]
 8005168:	f000 f86c 	bl	8005244 <__malloc_unlock>
 800516c:	e7e3      	b.n	8005136 <_malloc_r+0x1e>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	1b5b      	subs	r3, r3, r5
 8005172:	d417      	bmi.n	80051a4 <_malloc_r+0x8c>
 8005174:	2b0b      	cmp	r3, #11
 8005176:	d903      	bls.n	8005180 <_malloc_r+0x68>
 8005178:	6023      	str	r3, [r4, #0]
 800517a:	441c      	add	r4, r3
 800517c:	6025      	str	r5, [r4, #0]
 800517e:	e004      	b.n	800518a <_malloc_r+0x72>
 8005180:	6863      	ldr	r3, [r4, #4]
 8005182:	42a2      	cmp	r2, r4
 8005184:	bf0c      	ite	eq
 8005186:	600b      	streq	r3, [r1, #0]
 8005188:	6053      	strne	r3, [r2, #4]
 800518a:	4630      	mov	r0, r6
 800518c:	f000 f85a 	bl	8005244 <__malloc_unlock>
 8005190:	f104 000b 	add.w	r0, r4, #11
 8005194:	1d23      	adds	r3, r4, #4
 8005196:	f020 0007 	bic.w	r0, r0, #7
 800519a:	1ac2      	subs	r2, r0, r3
 800519c:	d0cc      	beq.n	8005138 <_malloc_r+0x20>
 800519e:	1a1b      	subs	r3, r3, r0
 80051a0:	50a3      	str	r3, [r4, r2]
 80051a2:	e7c9      	b.n	8005138 <_malloc_r+0x20>
 80051a4:	4622      	mov	r2, r4
 80051a6:	6864      	ldr	r4, [r4, #4]
 80051a8:	e7cc      	b.n	8005144 <_malloc_r+0x2c>
 80051aa:	1cc4      	adds	r4, r0, #3
 80051ac:	f024 0403 	bic.w	r4, r4, #3
 80051b0:	42a0      	cmp	r0, r4
 80051b2:	d0e3      	beq.n	800517c <_malloc_r+0x64>
 80051b4:	1a21      	subs	r1, r4, r0
 80051b6:	4630      	mov	r0, r6
 80051b8:	f000 f82e 	bl	8005218 <_sbrk_r>
 80051bc:	3001      	adds	r0, #1
 80051be:	d1dd      	bne.n	800517c <_malloc_r+0x64>
 80051c0:	e7cf      	b.n	8005162 <_malloc_r+0x4a>
 80051c2:	bf00      	nop
 80051c4:	200019a4 	.word	0x200019a4
 80051c8:	200019a8 	.word	0x200019a8

080051cc <_realloc_r>:
 80051cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ce:	4607      	mov	r7, r0
 80051d0:	4614      	mov	r4, r2
 80051d2:	460e      	mov	r6, r1
 80051d4:	b921      	cbnz	r1, 80051e0 <_realloc_r+0x14>
 80051d6:	4611      	mov	r1, r2
 80051d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80051dc:	f7ff bf9c 	b.w	8005118 <_malloc_r>
 80051e0:	b922      	cbnz	r2, 80051ec <_realloc_r+0x20>
 80051e2:	f7ff ff4d 	bl	8005080 <_free_r>
 80051e6:	4625      	mov	r5, r4
 80051e8:	4628      	mov	r0, r5
 80051ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051ec:	f000 f830 	bl	8005250 <_malloc_usable_size_r>
 80051f0:	42a0      	cmp	r0, r4
 80051f2:	d20f      	bcs.n	8005214 <_realloc_r+0x48>
 80051f4:	4621      	mov	r1, r4
 80051f6:	4638      	mov	r0, r7
 80051f8:	f7ff ff8e 	bl	8005118 <_malloc_r>
 80051fc:	4605      	mov	r5, r0
 80051fe:	2800      	cmp	r0, #0
 8005200:	d0f2      	beq.n	80051e8 <_realloc_r+0x1c>
 8005202:	4631      	mov	r1, r6
 8005204:	4622      	mov	r2, r4
 8005206:	f7ff fbeb 	bl	80049e0 <memcpy>
 800520a:	4631      	mov	r1, r6
 800520c:	4638      	mov	r0, r7
 800520e:	f7ff ff37 	bl	8005080 <_free_r>
 8005212:	e7e9      	b.n	80051e8 <_realloc_r+0x1c>
 8005214:	4635      	mov	r5, r6
 8005216:	e7e7      	b.n	80051e8 <_realloc_r+0x1c>

08005218 <_sbrk_r>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	2300      	movs	r3, #0
 800521c:	4d05      	ldr	r5, [pc, #20]	; (8005234 <_sbrk_r+0x1c>)
 800521e:	4604      	mov	r4, r0
 8005220:	4608      	mov	r0, r1
 8005222:	602b      	str	r3, [r5, #0]
 8005224:	f7fb f9f8 	bl	8000618 <_sbrk>
 8005228:	1c43      	adds	r3, r0, #1
 800522a:	d102      	bne.n	8005232 <_sbrk_r+0x1a>
 800522c:	682b      	ldr	r3, [r5, #0]
 800522e:	b103      	cbz	r3, 8005232 <_sbrk_r+0x1a>
 8005230:	6023      	str	r3, [r4, #0]
 8005232:	bd38      	pop	{r3, r4, r5, pc}
 8005234:	20001a7c 	.word	0x20001a7c

08005238 <__malloc_lock>:
 8005238:	4801      	ldr	r0, [pc, #4]	; (8005240 <__malloc_lock+0x8>)
 800523a:	f000 b811 	b.w	8005260 <__retarget_lock_acquire_recursive>
 800523e:	bf00      	nop
 8005240:	20001a84 	.word	0x20001a84

08005244 <__malloc_unlock>:
 8005244:	4801      	ldr	r0, [pc, #4]	; (800524c <__malloc_unlock+0x8>)
 8005246:	f000 b80c 	b.w	8005262 <__retarget_lock_release_recursive>
 800524a:	bf00      	nop
 800524c:	20001a84 	.word	0x20001a84

08005250 <_malloc_usable_size_r>:
 8005250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005254:	1f18      	subs	r0, r3, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	bfbc      	itt	lt
 800525a:	580b      	ldrlt	r3, [r1, r0]
 800525c:	18c0      	addlt	r0, r0, r3
 800525e:	4770      	bx	lr

08005260 <__retarget_lock_acquire_recursive>:
 8005260:	4770      	bx	lr

08005262 <__retarget_lock_release_recursive>:
 8005262:	4770      	bx	lr

08005264 <_init>:
 8005264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005266:	bf00      	nop
 8005268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800526a:	bc08      	pop	{r3}
 800526c:	469e      	mov	lr, r3
 800526e:	4770      	bx	lr

08005270 <_fini>:
 8005270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005272:	bf00      	nop
 8005274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005276:	bc08      	pop	{r3}
 8005278:	469e      	mov	lr, r3
 800527a:	4770      	bx	lr
