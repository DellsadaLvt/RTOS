
RTOS_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005be4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08005cf4  08005cf4  00015cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e14  08005e14  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005e14  08005e14  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e14  08005e14  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e14  08005e14  00015e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e18  08005e18  00015e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000382c  20000010  08005e2c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000383c  08005e2c  0002383c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af6e  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000365e  00000000  00000000  0003afa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  0003e608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001330  00000000  00000000  0003fac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019930  00000000  00000000  00040df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017df9  00000000  00000000  0005a720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096549  00000000  00000000  00072519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00108a62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056a8  00000000  00000000  00108ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08005cdc 	.word	0x08005cdc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08005cdc 	.word	0x08005cdc

08000150 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af02      	add	r7, sp, #8
  /* Create the thread(s) */
  /* creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(Task1_Handler, "Task_1", configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, &handlerTask_1);
 8000156:	4b06      	ldr	r3, [pc, #24]	; (8000170 <MX_FREERTOS_Init+0x20>)
 8000158:	9301      	str	r3, [sp, #4]
 800015a:	2318      	movs	r3, #24
 800015c:	9300      	str	r3, [sp, #0]
 800015e:	2300      	movs	r3, #0
 8000160:	2280      	movs	r2, #128	; 0x80
 8000162:	4904      	ldr	r1, [pc, #16]	; (8000174 <MX_FREERTOS_Init+0x24>)
 8000164:	4804      	ldr	r0, [pc, #16]	; (8000178 <MX_FREERTOS_Init+0x28>)
 8000166:	f002 fa06 	bl	8002576 <xTaskCreate>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800016a:	bf00      	nop
 800016c:	46bd      	mov	sp, r7
 800016e:	bd80      	pop	{r7, pc}
 8000170:	20003704 	.word	0x20003704
 8000174:	08005cf4 	.word	0x08005cf4
 8000178:	0800017d 	.word	0x0800017d

0800017c <Task1_Handler>:
/* USER CODE END Header_StartDefaultTask */


/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void Task1_Handler( void *argument){
 800017c:	b580      	push	{r7, lr}
 800017e:	b084      	sub	sp, #16
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
	char flag= 0;
 8000184:	2300      	movs	r3, #0
 8000186:	73fb      	strb	r3, [r7, #15]
	while(1){
		flag++;
 8000188:	7bfb      	ldrb	r3, [r7, #15]
 800018a:	3301      	adds	r3, #1
 800018c:	73fb      	strb	r3, [r7, #15]
		osDelay(500);
 800018e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000192:	f001 fb33 	bl	80017fc <osDelay>
		flag++;
 8000196:	e7f7      	b.n	8000188 <Task1_Handler+0xc>

08000198 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b088      	sub	sp, #32
 800019c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800019e:	f107 0310 	add.w	r3, r7, #16
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ac:	4b2a      	ldr	r3, [pc, #168]	; (8000258 <MX_GPIO_Init+0xc0>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a29      	ldr	r2, [pc, #164]	; (8000258 <MX_GPIO_Init+0xc0>)
 80001b2:	f043 0310 	orr.w	r3, r3, #16
 80001b6:	6193      	str	r3, [r2, #24]
 80001b8:	4b27      	ldr	r3, [pc, #156]	; (8000258 <MX_GPIO_Init+0xc0>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	f003 0310 	and.w	r3, r3, #16
 80001c0:	60fb      	str	r3, [r7, #12]
 80001c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001c4:	4b24      	ldr	r3, [pc, #144]	; (8000258 <MX_GPIO_Init+0xc0>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	4a23      	ldr	r2, [pc, #140]	; (8000258 <MX_GPIO_Init+0xc0>)
 80001ca:	f043 0320 	orr.w	r3, r3, #32
 80001ce:	6193      	str	r3, [r2, #24]
 80001d0:	4b21      	ldr	r3, [pc, #132]	; (8000258 <MX_GPIO_Init+0xc0>)
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	f003 0320 	and.w	r3, r3, #32
 80001d8:	60bb      	str	r3, [r7, #8]
 80001da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001dc:	4b1e      	ldr	r3, [pc, #120]	; (8000258 <MX_GPIO_Init+0xc0>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	4a1d      	ldr	r2, [pc, #116]	; (8000258 <MX_GPIO_Init+0xc0>)
 80001e2:	f043 0304 	orr.w	r3, r3, #4
 80001e6:	6193      	str	r3, [r2, #24]
 80001e8:	4b1b      	ldr	r3, [pc, #108]	; (8000258 <MX_GPIO_Init+0xc0>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	f003 0304 	and.w	r3, r3, #4
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001f4:	4b18      	ldr	r3, [pc, #96]	; (8000258 <MX_GPIO_Init+0xc0>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	4a17      	ldr	r2, [pc, #92]	; (8000258 <MX_GPIO_Init+0xc0>)
 80001fa:	f043 0308 	orr.w	r3, r3, #8
 80001fe:	6193      	str	r3, [r2, #24]
 8000200:	4b15      	ldr	r3, [pc, #84]	; (8000258 <MX_GPIO_Init+0xc0>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	f003 0308 	and.w	r3, r3, #8
 8000208:	603b      	str	r3, [r7, #0]
 800020a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800020c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000210:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000212:	2303      	movs	r3, #3
 8000214:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000216:	f107 0310 	add.w	r3, r7, #16
 800021a:	4619      	mov	r1, r3
 800021c:	480f      	ldr	r0, [pc, #60]	; (800025c <MX_GPIO_Init+0xc4>)
 800021e:	f000 fa83 	bl	8000728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000222:	f649 73ff 	movw	r3, #40959	; 0x9fff
 8000226:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000228:	2303      	movs	r3, #3
 800022a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800022c:	f107 0310 	add.w	r3, r7, #16
 8000230:	4619      	mov	r1, r3
 8000232:	480b      	ldr	r0, [pc, #44]	; (8000260 <MX_GPIO_Init+0xc8>)
 8000234:	f000 fa78 	bl	8000728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000238:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800023c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800023e:	2303      	movs	r3, #3
 8000240:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000242:	f107 0310 	add.w	r3, r7, #16
 8000246:	4619      	mov	r1, r3
 8000248:	4806      	ldr	r0, [pc, #24]	; (8000264 <MX_GPIO_Init+0xcc>)
 800024a:	f000 fa6d 	bl	8000728 <HAL_GPIO_Init>

}
 800024e:	bf00      	nop
 8000250:	3720      	adds	r7, #32
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	40021000 	.word	0x40021000
 800025c:	40011000 	.word	0x40011000
 8000260:	40010800 	.word	0x40010800
 8000264:	40010c00 	.word	0x40010c00

08000268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  DWT->CTRL |= ( 1 << 0);
 800026c:	4b0b      	ldr	r3, [pc, #44]	; (800029c <main+0x34>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a0a      	ldr	r2, [pc, #40]	; (800029c <main+0x34>)
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000278:	f000 f944 	bl	8000504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027c:	f000 f810 	bl	80002a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000280:	f7ff ff8a 	bl	8000198 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  SEGGER_SYSVIEW_Conf();
 8000284:	f003 ff92 	bl	80041ac <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000288:	f004 ff0a 	bl	80050a0 <SEGGER_SYSVIEW_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800028c:	f001 fa50 	bl	8001730 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000290:	f7ff ff5e 	bl	8000150 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000294:	f001 fa7e 	bl	8001794 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000298:	e7fe      	b.n	8000298 <main+0x30>
 800029a:	bf00      	nop
 800029c:	e0001000 	.word	0xe0001000

080002a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b090      	sub	sp, #64	; 0x40
 80002a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a6:	f107 0318 	add.w	r3, r7, #24
 80002aa:	2228      	movs	r2, #40	; 0x28
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f005 fd0c 	bl	8005ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
 80002c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c2:	2302      	movs	r3, #2
 80002c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c6:	2301      	movs	r3, #1
 80002c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ca:	2310      	movs	r3, #16
 80002cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ce:	2302      	movs	r3, #2
 80002d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002d2:	2300      	movs	r3, #0
 80002d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80002d6:	2300      	movs	r3, #0
 80002d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 fba6 	bl	8000a30 <HAL_RCC_OscConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002ea:	f000 f82b 	bl	8000344 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	230f      	movs	r3, #15
 80002f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f2:	2302      	movs	r3, #2
 80002f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f000 fe12 	bl	8000f30 <HAL_RCC_ClockConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000312:	f000 f817 	bl	8000344 <Error_Handler>
  }
}
 8000316:	bf00      	nop
 8000318:	3740      	adds	r7, #64	; 0x40
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
	...

08000320 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d101      	bne.n	8000336 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000332:	f000 f8fd 	bl	8000530 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000336:	bf00      	nop
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40000400 	.word	0x40000400

08000344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000348:	b672      	cpsid	i
}
 800034a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800034c:	e7fe      	b.n	800034c <Error_Handler+0x8>
	...

08000350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000356:	4b18      	ldr	r3, [pc, #96]	; (80003b8 <HAL_MspInit+0x68>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	4a17      	ldr	r2, [pc, #92]	; (80003b8 <HAL_MspInit+0x68>)
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	6193      	str	r3, [r2, #24]
 8000362:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <HAL_MspInit+0x68>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	60bb      	str	r3, [r7, #8]
 800036c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800036e:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <HAL_MspInit+0x68>)
 8000370:	69db      	ldr	r3, [r3, #28]
 8000372:	4a11      	ldr	r2, [pc, #68]	; (80003b8 <HAL_MspInit+0x68>)
 8000374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000378:	61d3      	str	r3, [r2, #28]
 800037a:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <HAL_MspInit+0x68>)
 800037c:	69db      	ldr	r3, [r3, #28]
 800037e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000386:	2200      	movs	r2, #0
 8000388:	210f      	movs	r1, #15
 800038a:	f06f 0001 	mvn.w	r0, #1
 800038e:	f000 f9a0 	bl	80006d2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000392:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <HAL_MspInit+0x6c>)
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	60fb      	str	r3, [r7, #12]
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800039e:	60fb      	str	r3, [r7, #12]
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003a6:	60fb      	str	r3, [r7, #12]
 80003a8:	4a04      	ldr	r2, [pc, #16]	; (80003bc <HAL_MspInit+0x6c>)
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ae:	bf00      	nop
 80003b0:	3710      	adds	r7, #16
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40021000 	.word	0x40021000
 80003bc:	40010000 	.word	0x40010000

080003c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b08c      	sub	sp, #48	; 0x30
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 80003d0:	2200      	movs	r2, #0
 80003d2:	6879      	ldr	r1, [r7, #4]
 80003d4:	201d      	movs	r0, #29
 80003d6:	f000 f97c 	bl	80006d2 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80003da:	201d      	movs	r0, #29
 80003dc:	f000 f995 	bl	800070a <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80003e0:	4b1e      	ldr	r3, [pc, #120]	; (800045c <HAL_InitTick+0x9c>)
 80003e2:	69db      	ldr	r3, [r3, #28]
 80003e4:	4a1d      	ldr	r2, [pc, #116]	; (800045c <HAL_InitTick+0x9c>)
 80003e6:	f043 0302 	orr.w	r3, r3, #2
 80003ea:	61d3      	str	r3, [r2, #28]
 80003ec:	4b1b      	ldr	r3, [pc, #108]	; (800045c <HAL_InitTick+0x9c>)
 80003ee:	69db      	ldr	r3, [r3, #28]
 80003f0:	f003 0302 	and.w	r3, r3, #2
 80003f4:	60fb      	str	r3, [r7, #12]
 80003f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80003f8:	f107 0210 	add.w	r2, r7, #16
 80003fc:	f107 0314 	add.w	r3, r7, #20
 8000400:	4611      	mov	r1, r2
 8000402:	4618      	mov	r0, r3
 8000404:	f000 fefc 	bl	8001200 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000408:	f000 fee6 	bl	80011d8 <HAL_RCC_GetPCLK1Freq>
 800040c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800040e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000410:	4a13      	ldr	r2, [pc, #76]	; (8000460 <HAL_InitTick+0xa0>)
 8000412:	fba2 2303 	umull	r2, r3, r2, r3
 8000416:	0c9b      	lsrs	r3, r3, #18
 8000418:	3b01      	subs	r3, #1
 800041a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800041c:	4b11      	ldr	r3, [pc, #68]	; (8000464 <HAL_InitTick+0xa4>)
 800041e:	4a12      	ldr	r2, [pc, #72]	; (8000468 <HAL_InitTick+0xa8>)
 8000420:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000422:	4b10      	ldr	r3, [pc, #64]	; (8000464 <HAL_InitTick+0xa4>)
 8000424:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000428:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800042a:	4a0e      	ldr	r2, [pc, #56]	; (8000464 <HAL_InitTick+0xa4>)
 800042c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800042e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <HAL_InitTick+0xa4>)
 8000432:	2200      	movs	r2, #0
 8000434:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000436:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <HAL_InitTick+0xa4>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 800043c:	4809      	ldr	r0, [pc, #36]	; (8000464 <HAL_InitTick+0xa4>)
 800043e:	f000 ff2d 	bl	800129c <HAL_TIM_Base_Init>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d104      	bne.n	8000452 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8000448:	4806      	ldr	r0, [pc, #24]	; (8000464 <HAL_InitTick+0xa4>)
 800044a:	f000 ff7f 	bl	800134c <HAL_TIM_Base_Start_IT>
 800044e:	4603      	mov	r3, r0
 8000450:	e000      	b.n	8000454 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000452:	2301      	movs	r3, #1
}
 8000454:	4618      	mov	r0, r3
 8000456:	3730      	adds	r7, #48	; 0x30
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40021000 	.word	0x40021000
 8000460:	431bde83 	.word	0x431bde83
 8000464:	20003708 	.word	0x20003708
 8000468:	40000400 	.word	0x40000400

0800046c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <NMI_Handler+0x4>

08000472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000476:	e7fe      	b.n	8000476 <HardFault_Handler+0x4>

08000478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800047c:	e7fe      	b.n	800047c <MemManage_Handler+0x4>

0800047e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000482:	e7fe      	b.n	8000482 <BusFault_Handler+0x4>

08000484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000488:	e7fe      	b.n	8000488 <UsageFault_Handler+0x4>

0800048a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
	...

08000498 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <TIM3_IRQHandler+0x10>)
 800049e:	f000 ffa7 	bl	80013f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	20003708 	.word	0x20003708

080004ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80004b8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80004ba:	e003      	b.n	80004c4 <LoopCopyDataInit>

080004bc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80004bc:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80004be:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80004c0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80004c2:	3104      	adds	r1, #4

080004c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80004c4:	480a      	ldr	r0, [pc, #40]	; (80004f0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80004c8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80004ca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80004cc:	d3f6      	bcc.n	80004bc <CopyDataInit>
  ldr r2, =_sbss
 80004ce:	4a0a      	ldr	r2, [pc, #40]	; (80004f8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80004d0:	e002      	b.n	80004d8 <LoopFillZerobss>

080004d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80004d2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80004d4:	f842 3b04 	str.w	r3, [r2], #4

080004d8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80004da:	429a      	cmp	r2, r3
  bcc FillZerobss
 80004dc:	d3f9      	bcc.n	80004d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004de:	f7ff ffe5 	bl	80004ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004e2:	f005 fbb3 	bl	8005c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004e6:	f7ff febf 	bl	8000268 <main>
  bx lr
 80004ea:	4770      	bx	lr
  ldr r3, =_sidata
 80004ec:	08005e1c 	.word	0x08005e1c
  ldr r0, =_sdata
 80004f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80004f4:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80004f8:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80004fc:	2000383c 	.word	0x2000383c

08000500 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000500:	e7fe      	b.n	8000500 <ADC1_2_IRQHandler>
	...

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <HAL_Init+0x28>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <HAL_Init+0x28>)
 800050e:	f043 0310 	orr.w	r3, r3, #16
 8000512:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000514:	2003      	movs	r0, #3
 8000516:	f000 f8d1 	bl	80006bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051a:	2000      	movs	r0, #0
 800051c:	f7ff ff50 	bl	80003c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000520:	f7ff ff16 	bl	8000350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40022000 	.word	0x40022000

08000530 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <HAL_IncTick+0x1c>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	461a      	mov	r2, r3
 800053a:	4b05      	ldr	r3, [pc, #20]	; (8000550 <HAL_IncTick+0x20>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4413      	add	r3, r2
 8000540:	4a03      	ldr	r2, [pc, #12]	; (8000550 <HAL_IncTick+0x20>)
 8000542:	6013      	str	r3, [r2, #0]
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	20000008 	.word	0x20000008
 8000550:	20003750 	.word	0x20003750

08000554 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  return uwTick;
 8000558:	4b02      	ldr	r3, [pc, #8]	; (8000564 <HAL_GetTick+0x10>)
 800055a:	681b      	ldr	r3, [r3, #0]
}
 800055c:	4618      	mov	r0, r3
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	20003750 	.word	0x20003750

08000568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f003 0307 	and.w	r3, r3, #7
 8000576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <__NVIC_SetPriorityGrouping+0x44>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000584:	4013      	ands	r3, r2
 8000586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800059a:	4a04      	ldr	r2, [pc, #16]	; (80005ac <__NVIC_SetPriorityGrouping+0x44>)
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	60d3      	str	r3, [r2, #12]
}
 80005a0:	bf00      	nop
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	e000ed00 	.word	0xe000ed00

080005b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <__NVIC_GetPriorityGrouping+0x18>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	0a1b      	lsrs	r3, r3, #8
 80005ba:	f003 0307 	and.w	r3, r3, #7
}
 80005be:	4618      	mov	r0, r3
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	e000ed00 	.word	0xe000ed00

080005cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	db0b      	blt.n	80005f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	f003 021f 	and.w	r2, r3, #31
 80005e4:	4906      	ldr	r1, [pc, #24]	; (8000600 <__NVIC_EnableIRQ+0x34>)
 80005e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ea:	095b      	lsrs	r3, r3, #5
 80005ec:	2001      	movs	r0, #1
 80005ee:	fa00 f202 	lsl.w	r2, r0, r2
 80005f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	e000e100 	.word	0xe000e100

08000604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000614:	2b00      	cmp	r3, #0
 8000616:	db0a      	blt.n	800062e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	b2da      	uxtb	r2, r3
 800061c:	490c      	ldr	r1, [pc, #48]	; (8000650 <__NVIC_SetPriority+0x4c>)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	0112      	lsls	r2, r2, #4
 8000624:	b2d2      	uxtb	r2, r2
 8000626:	440b      	add	r3, r1
 8000628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800062c:	e00a      	b.n	8000644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4908      	ldr	r1, [pc, #32]	; (8000654 <__NVIC_SetPriority+0x50>)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	f003 030f 	and.w	r3, r3, #15
 800063a:	3b04      	subs	r3, #4
 800063c:	0112      	lsls	r2, r2, #4
 800063e:	b2d2      	uxtb	r2, r2
 8000640:	440b      	add	r3, r1
 8000642:	761a      	strb	r2, [r3, #24]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000e100 	.word	0xe000e100
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000658:	b480      	push	{r7}
 800065a:	b089      	sub	sp, #36	; 0x24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	f1c3 0307 	rsb	r3, r3, #7
 8000672:	2b04      	cmp	r3, #4
 8000674:	bf28      	it	cs
 8000676:	2304      	movcs	r3, #4
 8000678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3304      	adds	r3, #4
 800067e:	2b06      	cmp	r3, #6
 8000680:	d902      	bls.n	8000688 <NVIC_EncodePriority+0x30>
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	3b03      	subs	r3, #3
 8000686:	e000      	b.n	800068a <NVIC_EncodePriority+0x32>
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068c:	f04f 32ff 	mov.w	r2, #4294967295
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	fa02 f303 	lsl.w	r3, r2, r3
 8000696:	43da      	mvns	r2, r3
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	401a      	ands	r2, r3
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a0:	f04f 31ff 	mov.w	r1, #4294967295
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	fa01 f303 	lsl.w	r3, r1, r3
 80006aa:	43d9      	mvns	r1, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b0:	4313      	orrs	r3, r2
         );
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3724      	adds	r7, #36	; 0x24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f7ff ff4f 	bl	8000568 <__NVIC_SetPriorityGrouping>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b086      	sub	sp, #24
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	4603      	mov	r3, r0
 80006da:	60b9      	str	r1, [r7, #8]
 80006dc:	607a      	str	r2, [r7, #4]
 80006de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006e4:	f7ff ff64 	bl	80005b0 <__NVIC_GetPriorityGrouping>
 80006e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	68b9      	ldr	r1, [r7, #8]
 80006ee:	6978      	ldr	r0, [r7, #20]
 80006f0:	f7ff ffb2 	bl	8000658 <NVIC_EncodePriority>
 80006f4:	4602      	mov	r2, r0
 80006f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006fa:	4611      	mov	r1, r2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff81 	bl	8000604 <__NVIC_SetPriority>
}
 8000702:	bf00      	nop
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	4603      	mov	r3, r0
 8000712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff57 	bl	80005cc <__NVIC_EnableIRQ>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000728:	b480      	push	{r7}
 800072a:	b08b      	sub	sp, #44	; 0x2c
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000732:	2300      	movs	r3, #0
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000736:	2300      	movs	r3, #0
 8000738:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800073a:	e169      	b.n	8000a10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800073c:	2201      	movs	r2, #1
 800073e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000740:	fa02 f303 	lsl.w	r3, r2, r3
 8000744:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	69fa      	ldr	r2, [r7, #28]
 800074c:	4013      	ands	r3, r2
 800074e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000750:	69ba      	ldr	r2, [r7, #24]
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	429a      	cmp	r2, r3
 8000756:	f040 8158 	bne.w	8000a0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	4a9a      	ldr	r2, [pc, #616]	; (80009c8 <HAL_GPIO_Init+0x2a0>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d05e      	beq.n	8000822 <HAL_GPIO_Init+0xfa>
 8000764:	4a98      	ldr	r2, [pc, #608]	; (80009c8 <HAL_GPIO_Init+0x2a0>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d875      	bhi.n	8000856 <HAL_GPIO_Init+0x12e>
 800076a:	4a98      	ldr	r2, [pc, #608]	; (80009cc <HAL_GPIO_Init+0x2a4>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d058      	beq.n	8000822 <HAL_GPIO_Init+0xfa>
 8000770:	4a96      	ldr	r2, [pc, #600]	; (80009cc <HAL_GPIO_Init+0x2a4>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d86f      	bhi.n	8000856 <HAL_GPIO_Init+0x12e>
 8000776:	4a96      	ldr	r2, [pc, #600]	; (80009d0 <HAL_GPIO_Init+0x2a8>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d052      	beq.n	8000822 <HAL_GPIO_Init+0xfa>
 800077c:	4a94      	ldr	r2, [pc, #592]	; (80009d0 <HAL_GPIO_Init+0x2a8>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d869      	bhi.n	8000856 <HAL_GPIO_Init+0x12e>
 8000782:	4a94      	ldr	r2, [pc, #592]	; (80009d4 <HAL_GPIO_Init+0x2ac>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d04c      	beq.n	8000822 <HAL_GPIO_Init+0xfa>
 8000788:	4a92      	ldr	r2, [pc, #584]	; (80009d4 <HAL_GPIO_Init+0x2ac>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d863      	bhi.n	8000856 <HAL_GPIO_Init+0x12e>
 800078e:	4a92      	ldr	r2, [pc, #584]	; (80009d8 <HAL_GPIO_Init+0x2b0>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d046      	beq.n	8000822 <HAL_GPIO_Init+0xfa>
 8000794:	4a90      	ldr	r2, [pc, #576]	; (80009d8 <HAL_GPIO_Init+0x2b0>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d85d      	bhi.n	8000856 <HAL_GPIO_Init+0x12e>
 800079a:	2b12      	cmp	r3, #18
 800079c:	d82a      	bhi.n	80007f4 <HAL_GPIO_Init+0xcc>
 800079e:	2b12      	cmp	r3, #18
 80007a0:	d859      	bhi.n	8000856 <HAL_GPIO_Init+0x12e>
 80007a2:	a201      	add	r2, pc, #4	; (adr r2, 80007a8 <HAL_GPIO_Init+0x80>)
 80007a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a8:	08000823 	.word	0x08000823
 80007ac:	080007fd 	.word	0x080007fd
 80007b0:	0800080f 	.word	0x0800080f
 80007b4:	08000851 	.word	0x08000851
 80007b8:	08000857 	.word	0x08000857
 80007bc:	08000857 	.word	0x08000857
 80007c0:	08000857 	.word	0x08000857
 80007c4:	08000857 	.word	0x08000857
 80007c8:	08000857 	.word	0x08000857
 80007cc:	08000857 	.word	0x08000857
 80007d0:	08000857 	.word	0x08000857
 80007d4:	08000857 	.word	0x08000857
 80007d8:	08000857 	.word	0x08000857
 80007dc:	08000857 	.word	0x08000857
 80007e0:	08000857 	.word	0x08000857
 80007e4:	08000857 	.word	0x08000857
 80007e8:	08000857 	.word	0x08000857
 80007ec:	08000805 	.word	0x08000805
 80007f0:	08000819 	.word	0x08000819
 80007f4:	4a79      	ldr	r2, [pc, #484]	; (80009dc <HAL_GPIO_Init+0x2b4>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d013      	beq.n	8000822 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80007fa:	e02c      	b.n	8000856 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	623b      	str	r3, [r7, #32]
          break;
 8000802:	e029      	b.n	8000858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	3304      	adds	r3, #4
 800080a:	623b      	str	r3, [r7, #32]
          break;
 800080c:	e024      	b.n	8000858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	68db      	ldr	r3, [r3, #12]
 8000812:	3308      	adds	r3, #8
 8000814:	623b      	str	r3, [r7, #32]
          break;
 8000816:	e01f      	b.n	8000858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	330c      	adds	r3, #12
 800081e:	623b      	str	r3, [r7, #32]
          break;
 8000820:	e01a      	b.n	8000858 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d102      	bne.n	8000830 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800082a:	2304      	movs	r3, #4
 800082c:	623b      	str	r3, [r7, #32]
          break;
 800082e:	e013      	b.n	8000858 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d105      	bne.n	8000844 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000838:	2308      	movs	r3, #8
 800083a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	69fa      	ldr	r2, [r7, #28]
 8000840:	611a      	str	r2, [r3, #16]
          break;
 8000842:	e009      	b.n	8000858 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000844:	2308      	movs	r3, #8
 8000846:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	69fa      	ldr	r2, [r7, #28]
 800084c:	615a      	str	r2, [r3, #20]
          break;
 800084e:	e003      	b.n	8000858 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
          break;
 8000854:	e000      	b.n	8000858 <HAL_GPIO_Init+0x130>
          break;
 8000856:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	2bff      	cmp	r3, #255	; 0xff
 800085c:	d801      	bhi.n	8000862 <HAL_GPIO_Init+0x13a>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	e001      	b.n	8000866 <HAL_GPIO_Init+0x13e>
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3304      	adds	r3, #4
 8000866:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	2bff      	cmp	r3, #255	; 0xff
 800086c:	d802      	bhi.n	8000874 <HAL_GPIO_Init+0x14c>
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	e002      	b.n	800087a <HAL_GPIO_Init+0x152>
 8000874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000876:	3b08      	subs	r3, #8
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	210f      	movs	r1, #15
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	fa01 f303 	lsl.w	r3, r1, r3
 8000888:	43db      	mvns	r3, r3
 800088a:	401a      	ands	r2, r3
 800088c:	6a39      	ldr	r1, [r7, #32]
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	fa01 f303 	lsl.w	r3, r1, r3
 8000894:	431a      	orrs	r2, r3
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	f000 80b1 	beq.w	8000a0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008a8:	4b4d      	ldr	r3, [pc, #308]	; (80009e0 <HAL_GPIO_Init+0x2b8>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a4c      	ldr	r2, [pc, #304]	; (80009e0 <HAL_GPIO_Init+0x2b8>)
 80008ae:	f043 0301 	orr.w	r3, r3, #1
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b4a      	ldr	r3, [pc, #296]	; (80009e0 <HAL_GPIO_Init+0x2b8>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80008c0:	4a48      	ldr	r2, [pc, #288]	; (80009e4 <HAL_GPIO_Init+0x2bc>)
 80008c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c4:	089b      	lsrs	r3, r3, #2
 80008c6:	3302      	adds	r3, #2
 80008c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d0:	f003 0303 	and.w	r3, r3, #3
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	220f      	movs	r2, #15
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	43db      	mvns	r3, r3
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	4013      	ands	r3, r2
 80008e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4a40      	ldr	r2, [pc, #256]	; (80009e8 <HAL_GPIO_Init+0x2c0>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d013      	beq.n	8000914 <HAL_GPIO_Init+0x1ec>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a3f      	ldr	r2, [pc, #252]	; (80009ec <HAL_GPIO_Init+0x2c4>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d00d      	beq.n	8000910 <HAL_GPIO_Init+0x1e8>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a3e      	ldr	r2, [pc, #248]	; (80009f0 <HAL_GPIO_Init+0x2c8>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d007      	beq.n	800090c <HAL_GPIO_Init+0x1e4>
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a3d      	ldr	r2, [pc, #244]	; (80009f4 <HAL_GPIO_Init+0x2cc>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d101      	bne.n	8000908 <HAL_GPIO_Init+0x1e0>
 8000904:	2303      	movs	r3, #3
 8000906:	e006      	b.n	8000916 <HAL_GPIO_Init+0x1ee>
 8000908:	2304      	movs	r3, #4
 800090a:	e004      	b.n	8000916 <HAL_GPIO_Init+0x1ee>
 800090c:	2302      	movs	r3, #2
 800090e:	e002      	b.n	8000916 <HAL_GPIO_Init+0x1ee>
 8000910:	2301      	movs	r3, #1
 8000912:	e000      	b.n	8000916 <HAL_GPIO_Init+0x1ee>
 8000914:	2300      	movs	r3, #0
 8000916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000918:	f002 0203 	and.w	r2, r2, #3
 800091c:	0092      	lsls	r2, r2, #2
 800091e:	4093      	lsls	r3, r2
 8000920:	68fa      	ldr	r2, [r7, #12]
 8000922:	4313      	orrs	r3, r2
 8000924:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000926:	492f      	ldr	r1, [pc, #188]	; (80009e4 <HAL_GPIO_Init+0x2bc>)
 8000928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092a:	089b      	lsrs	r3, r3, #2
 800092c:	3302      	adds	r3, #2
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800093c:	2b00      	cmp	r3, #0
 800093e:	d006      	beq.n	800094e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000940:	4b2d      	ldr	r3, [pc, #180]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	492c      	ldr	r1, [pc, #176]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	4313      	orrs	r3, r2
 800094a:	600b      	str	r3, [r1, #0]
 800094c:	e006      	b.n	800095c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800094e:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	69bb      	ldr	r3, [r7, #24]
 8000954:	43db      	mvns	r3, r3
 8000956:	4928      	ldr	r1, [pc, #160]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 8000958:	4013      	ands	r3, r2
 800095a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000964:	2b00      	cmp	r3, #0
 8000966:	d006      	beq.n	8000976 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000968:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 800096a:	685a      	ldr	r2, [r3, #4]
 800096c:	4922      	ldr	r1, [pc, #136]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	4313      	orrs	r3, r2
 8000972:	604b      	str	r3, [r1, #4]
 8000974:	e006      	b.n	8000984 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000976:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 8000978:	685a      	ldr	r2, [r3, #4]
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	43db      	mvns	r3, r3
 800097e:	491e      	ldr	r1, [pc, #120]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 8000980:	4013      	ands	r3, r2
 8000982:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800098c:	2b00      	cmp	r3, #0
 800098e:	d006      	beq.n	800099e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 8000992:	689a      	ldr	r2, [r3, #8]
 8000994:	4918      	ldr	r1, [pc, #96]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	4313      	orrs	r3, r2
 800099a:	608b      	str	r3, [r1, #8]
 800099c:	e006      	b.n	80009ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 80009a0:	689a      	ldr	r2, [r3, #8]
 80009a2:	69bb      	ldr	r3, [r7, #24]
 80009a4:	43db      	mvns	r3, r3
 80009a6:	4914      	ldr	r1, [pc, #80]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 80009a8:	4013      	ands	r3, r2
 80009aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d021      	beq.n	80009fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 80009ba:	68da      	ldr	r2, [r3, #12]
 80009bc:	490e      	ldr	r1, [pc, #56]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	60cb      	str	r3, [r1, #12]
 80009c4:	e021      	b.n	8000a0a <HAL_GPIO_Init+0x2e2>
 80009c6:	bf00      	nop
 80009c8:	10320000 	.word	0x10320000
 80009cc:	10310000 	.word	0x10310000
 80009d0:	10220000 	.word	0x10220000
 80009d4:	10210000 	.word	0x10210000
 80009d8:	10120000 	.word	0x10120000
 80009dc:	10110000 	.word	0x10110000
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40010000 	.word	0x40010000
 80009e8:	40010800 	.word	0x40010800
 80009ec:	40010c00 	.word	0x40010c00
 80009f0:	40011000 	.word	0x40011000
 80009f4:	40011400 	.word	0x40011400
 80009f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <HAL_GPIO_Init+0x304>)
 80009fe:	68da      	ldr	r2, [r3, #12]
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	43db      	mvns	r3, r3
 8000a04:	4909      	ldr	r1, [pc, #36]	; (8000a2c <HAL_GPIO_Init+0x304>)
 8000a06:	4013      	ands	r3, r2
 8000a08:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a16:	fa22 f303 	lsr.w	r3, r2, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f47f ae8e 	bne.w	800073c <HAL_GPIO_Init+0x14>
  }
}
 8000a20:	bf00      	nop
 8000a22:	bf00      	nop
 8000a24:	372c      	adds	r7, #44	; 0x2c
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	40010400 	.word	0x40010400

08000a30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d101      	bne.n	8000a42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e26c      	b.n	8000f1c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	f000 8087 	beq.w	8000b5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a50:	4b92      	ldr	r3, [pc, #584]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f003 030c 	and.w	r3, r3, #12
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	d00c      	beq.n	8000a76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a5c:	4b8f      	ldr	r3, [pc, #572]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f003 030c 	and.w	r3, r3, #12
 8000a64:	2b08      	cmp	r3, #8
 8000a66:	d112      	bne.n	8000a8e <HAL_RCC_OscConfig+0x5e>
 8000a68:	4b8c      	ldr	r3, [pc, #560]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a74:	d10b      	bne.n	8000a8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a76:	4b89      	ldr	r3, [pc, #548]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d06c      	beq.n	8000b5c <HAL_RCC_OscConfig+0x12c>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d168      	bne.n	8000b5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e246      	b.n	8000f1c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a96:	d106      	bne.n	8000aa6 <HAL_RCC_OscConfig+0x76>
 8000a98:	4b80      	ldr	r3, [pc, #512]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a7f      	ldr	r2, [pc, #508]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aa2:	6013      	str	r3, [r2, #0]
 8000aa4:	e02e      	b.n	8000b04 <HAL_RCC_OscConfig+0xd4>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d10c      	bne.n	8000ac8 <HAL_RCC_OscConfig+0x98>
 8000aae:	4b7b      	ldr	r3, [pc, #492]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a7a      	ldr	r2, [pc, #488]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ab8:	6013      	str	r3, [r2, #0]
 8000aba:	4b78      	ldr	r3, [pc, #480]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a77      	ldr	r2, [pc, #476]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000ac0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ac4:	6013      	str	r3, [r2, #0]
 8000ac6:	e01d      	b.n	8000b04 <HAL_RCC_OscConfig+0xd4>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ad0:	d10c      	bne.n	8000aec <HAL_RCC_OscConfig+0xbc>
 8000ad2:	4b72      	ldr	r3, [pc, #456]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a71      	ldr	r2, [pc, #452]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000adc:	6013      	str	r3, [r2, #0]
 8000ade:	4b6f      	ldr	r3, [pc, #444]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a6e      	ldr	r2, [pc, #440]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ae8:	6013      	str	r3, [r2, #0]
 8000aea:	e00b      	b.n	8000b04 <HAL_RCC_OscConfig+0xd4>
 8000aec:	4b6b      	ldr	r3, [pc, #428]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a6a      	ldr	r2, [pc, #424]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000af6:	6013      	str	r3, [r2, #0]
 8000af8:	4b68      	ldr	r3, [pc, #416]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a67      	ldr	r2, [pc, #412]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d013      	beq.n	8000b34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b0c:	f7ff fd22 	bl	8000554 <HAL_GetTick>
 8000b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b12:	e008      	b.n	8000b26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b14:	f7ff fd1e 	bl	8000554 <HAL_GetTick>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	2b64      	cmp	r3, #100	; 0x64
 8000b20:	d901      	bls.n	8000b26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b22:	2303      	movs	r3, #3
 8000b24:	e1fa      	b.n	8000f1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b26:	4b5d      	ldr	r3, [pc, #372]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d0f0      	beq.n	8000b14 <HAL_RCC_OscConfig+0xe4>
 8000b32:	e014      	b.n	8000b5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b34:	f7ff fd0e 	bl	8000554 <HAL_GetTick>
 8000b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b3a:	e008      	b.n	8000b4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b3c:	f7ff fd0a 	bl	8000554 <HAL_GetTick>
 8000b40:	4602      	mov	r2, r0
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	2b64      	cmp	r3, #100	; 0x64
 8000b48:	d901      	bls.n	8000b4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	e1e6      	b.n	8000f1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b4e:	4b53      	ldr	r3, [pc, #332]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d1f0      	bne.n	8000b3c <HAL_RCC_OscConfig+0x10c>
 8000b5a:	e000      	b.n	8000b5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d063      	beq.n	8000c32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b6a:	4b4c      	ldr	r3, [pc, #304]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 030c 	and.w	r3, r3, #12
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d00b      	beq.n	8000b8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b76:	4b49      	ldr	r3, [pc, #292]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f003 030c 	and.w	r3, r3, #12
 8000b7e:	2b08      	cmp	r3, #8
 8000b80:	d11c      	bne.n	8000bbc <HAL_RCC_OscConfig+0x18c>
 8000b82:	4b46      	ldr	r3, [pc, #280]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d116      	bne.n	8000bbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b8e:	4b43      	ldr	r3, [pc, #268]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d005      	beq.n	8000ba6 <HAL_RCC_OscConfig+0x176>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	691b      	ldr	r3, [r3, #16]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d001      	beq.n	8000ba6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e1ba      	b.n	8000f1c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ba6:	4b3d      	ldr	r3, [pc, #244]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	4939      	ldr	r1, [pc, #228]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bba:	e03a      	b.n	8000c32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	691b      	ldr	r3, [r3, #16]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d020      	beq.n	8000c06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bc4:	4b36      	ldr	r3, [pc, #216]	; (8000ca0 <HAL_RCC_OscConfig+0x270>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bca:	f7ff fcc3 	bl	8000554 <HAL_GetTick>
 8000bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bd0:	e008      	b.n	8000be4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bd2:	f7ff fcbf 	bl	8000554 <HAL_GetTick>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d901      	bls.n	8000be4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000be0:	2303      	movs	r3, #3
 8000be2:	e19b      	b.n	8000f1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000be4:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f003 0302 	and.w	r3, r3, #2
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d0f0      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bf0:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	00db      	lsls	r3, r3, #3
 8000bfe:	4927      	ldr	r1, [pc, #156]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000c00:	4313      	orrs	r3, r2
 8000c02:	600b      	str	r3, [r1, #0]
 8000c04:	e015      	b.n	8000c32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c06:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <HAL_RCC_OscConfig+0x270>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c0c:	f7ff fca2 	bl	8000554 <HAL_GetTick>
 8000c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c12:	e008      	b.n	8000c26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c14:	f7ff fc9e 	bl	8000554 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d901      	bls.n	8000c26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c22:	2303      	movs	r3, #3
 8000c24:	e17a      	b.n	8000f1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c26:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d1f0      	bne.n	8000c14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d03a      	beq.n	8000cb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d019      	beq.n	8000c7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <HAL_RCC_OscConfig+0x274>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c4c:	f7ff fc82 	bl	8000554 <HAL_GetTick>
 8000c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c52:	e008      	b.n	8000c66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c54:	f7ff fc7e 	bl	8000554 <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d901      	bls.n	8000c66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c62:	2303      	movs	r3, #3
 8000c64:	e15a      	b.n	8000f1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <HAL_RCC_OscConfig+0x26c>)
 8000c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d0f0      	beq.n	8000c54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c72:	2001      	movs	r0, #1
 8000c74:	f000 faf4 	bl	8001260 <RCC_Delay>
 8000c78:	e01c      	b.n	8000cb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <HAL_RCC_OscConfig+0x274>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c80:	f7ff fc68 	bl	8000554 <HAL_GetTick>
 8000c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c86:	e00f      	b.n	8000ca8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c88:	f7ff fc64 	bl	8000554 <HAL_GetTick>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d908      	bls.n	8000ca8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000c96:	2303      	movs	r3, #3
 8000c98:	e140      	b.n	8000f1c <HAL_RCC_OscConfig+0x4ec>
 8000c9a:	bf00      	nop
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	42420000 	.word	0x42420000
 8000ca4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ca8:	4b9e      	ldr	r3, [pc, #632]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d1e9      	bne.n	8000c88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f000 80a6 	beq.w	8000e0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cc6:	4b97      	ldr	r3, [pc, #604]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d10d      	bne.n	8000cee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	4b94      	ldr	r3, [pc, #592]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	4a93      	ldr	r2, [pc, #588]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	61d3      	str	r3, [r2, #28]
 8000cde:	4b91      	ldr	r3, [pc, #580]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000cea:	2301      	movs	r3, #1
 8000cec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cee:	4b8e      	ldr	r3, [pc, #568]	; (8000f28 <HAL_RCC_OscConfig+0x4f8>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d118      	bne.n	8000d2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cfa:	4b8b      	ldr	r3, [pc, #556]	; (8000f28 <HAL_RCC_OscConfig+0x4f8>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a8a      	ldr	r2, [pc, #552]	; (8000f28 <HAL_RCC_OscConfig+0x4f8>)
 8000d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d06:	f7ff fc25 	bl	8000554 <HAL_GetTick>
 8000d0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d0c:	e008      	b.n	8000d20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d0e:	f7ff fc21 	bl	8000554 <HAL_GetTick>
 8000d12:	4602      	mov	r2, r0
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	2b64      	cmp	r3, #100	; 0x64
 8000d1a:	d901      	bls.n	8000d20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	e0fd      	b.n	8000f1c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d20:	4b81      	ldr	r3, [pc, #516]	; (8000f28 <HAL_RCC_OscConfig+0x4f8>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d0f0      	beq.n	8000d0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d106      	bne.n	8000d42 <HAL_RCC_OscConfig+0x312>
 8000d34:	4b7b      	ldr	r3, [pc, #492]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000d36:	6a1b      	ldr	r3, [r3, #32]
 8000d38:	4a7a      	ldr	r2, [pc, #488]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	6213      	str	r3, [r2, #32]
 8000d40:	e02d      	b.n	8000d9e <HAL_RCC_OscConfig+0x36e>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d10c      	bne.n	8000d64 <HAL_RCC_OscConfig+0x334>
 8000d4a:	4b76      	ldr	r3, [pc, #472]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000d4c:	6a1b      	ldr	r3, [r3, #32]
 8000d4e:	4a75      	ldr	r2, [pc, #468]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000d50:	f023 0301 	bic.w	r3, r3, #1
 8000d54:	6213      	str	r3, [r2, #32]
 8000d56:	4b73      	ldr	r3, [pc, #460]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000d58:	6a1b      	ldr	r3, [r3, #32]
 8000d5a:	4a72      	ldr	r2, [pc, #456]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000d5c:	f023 0304 	bic.w	r3, r3, #4
 8000d60:	6213      	str	r3, [r2, #32]
 8000d62:	e01c      	b.n	8000d9e <HAL_RCC_OscConfig+0x36e>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	2b05      	cmp	r3, #5
 8000d6a:	d10c      	bne.n	8000d86 <HAL_RCC_OscConfig+0x356>
 8000d6c:	4b6d      	ldr	r3, [pc, #436]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000d6e:	6a1b      	ldr	r3, [r3, #32]
 8000d70:	4a6c      	ldr	r2, [pc, #432]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	6213      	str	r3, [r2, #32]
 8000d78:	4b6a      	ldr	r3, [pc, #424]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000d7a:	6a1b      	ldr	r3, [r3, #32]
 8000d7c:	4a69      	ldr	r2, [pc, #420]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	6213      	str	r3, [r2, #32]
 8000d84:	e00b      	b.n	8000d9e <HAL_RCC_OscConfig+0x36e>
 8000d86:	4b67      	ldr	r3, [pc, #412]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000d88:	6a1b      	ldr	r3, [r3, #32]
 8000d8a:	4a66      	ldr	r2, [pc, #408]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000d8c:	f023 0301 	bic.w	r3, r3, #1
 8000d90:	6213      	str	r3, [r2, #32]
 8000d92:	4b64      	ldr	r3, [pc, #400]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000d94:	6a1b      	ldr	r3, [r3, #32]
 8000d96:	4a63      	ldr	r2, [pc, #396]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000d98:	f023 0304 	bic.w	r3, r3, #4
 8000d9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d015      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da6:	f7ff fbd5 	bl	8000554 <HAL_GetTick>
 8000daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dac:	e00a      	b.n	8000dc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dae:	f7ff fbd1 	bl	8000554 <HAL_GetTick>
 8000db2:	4602      	mov	r2, r0
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d901      	bls.n	8000dc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e0ab      	b.n	8000f1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dc4:	4b57      	ldr	r3, [pc, #348]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000dc6:	6a1b      	ldr	r3, [r3, #32]
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d0ee      	beq.n	8000dae <HAL_RCC_OscConfig+0x37e>
 8000dd0:	e014      	b.n	8000dfc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd2:	f7ff fbbf 	bl	8000554 <HAL_GetTick>
 8000dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dd8:	e00a      	b.n	8000df0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dda:	f7ff fbbb 	bl	8000554 <HAL_GetTick>
 8000dde:	4602      	mov	r2, r0
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d901      	bls.n	8000df0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000dec:	2303      	movs	r3, #3
 8000dee:	e095      	b.n	8000f1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000df0:	4b4c      	ldr	r3, [pc, #304]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000df2:	6a1b      	ldr	r3, [r3, #32]
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1ee      	bne.n	8000dda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000dfc:	7dfb      	ldrb	r3, [r7, #23]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d105      	bne.n	8000e0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e02:	4b48      	ldr	r3, [pc, #288]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	4a47      	ldr	r2, [pc, #284]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f000 8081 	beq.w	8000f1a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e18:	4b42      	ldr	r3, [pc, #264]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 030c 	and.w	r3, r3, #12
 8000e20:	2b08      	cmp	r3, #8
 8000e22:	d061      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	69db      	ldr	r3, [r3, #28]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d146      	bne.n	8000eba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e2c:	4b3f      	ldr	r3, [pc, #252]	; (8000f2c <HAL_RCC_OscConfig+0x4fc>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e32:	f7ff fb8f 	bl	8000554 <HAL_GetTick>
 8000e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e38:	e008      	b.n	8000e4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e3a:	f7ff fb8b 	bl	8000554 <HAL_GetTick>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d901      	bls.n	8000e4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e067      	b.n	8000f1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e4c:	4b35      	ldr	r3, [pc, #212]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1f0      	bne.n	8000e3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a1b      	ldr	r3, [r3, #32]
 8000e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e60:	d108      	bne.n	8000e74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e62:	4b30      	ldr	r3, [pc, #192]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	492d      	ldr	r1, [pc, #180]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000e70:	4313      	orrs	r3, r2
 8000e72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e74:	4b2b      	ldr	r3, [pc, #172]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a19      	ldr	r1, [r3, #32]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e84:	430b      	orrs	r3, r1
 8000e86:	4927      	ldr	r1, [pc, #156]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e8c:	4b27      	ldr	r3, [pc, #156]	; (8000f2c <HAL_RCC_OscConfig+0x4fc>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e92:	f7ff fb5f 	bl	8000554 <HAL_GetTick>
 8000e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e98:	e008      	b.n	8000eac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e9a:	f7ff fb5b 	bl	8000554 <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e037      	b.n	8000f1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0f0      	beq.n	8000e9a <HAL_RCC_OscConfig+0x46a>
 8000eb8:	e02f      	b.n	8000f1a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000eba:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <HAL_RCC_OscConfig+0x4fc>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fb48 	bl	8000554 <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ec8:	f7ff fb44 	bl	8000554 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e020      	b.n	8000f1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f0      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x498>
 8000ee6:	e018      	b.n	8000f1a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69db      	ldr	r3, [r3, #28]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d101      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e013      	b.n	8000f1c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <HAL_RCC_OscConfig+0x4f4>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d106      	bne.n	8000f16 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d001      	beq.n	8000f1a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40007000 	.word	0x40007000
 8000f2c:	42420060 	.word	0x42420060

08000f30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d101      	bne.n	8000f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e0d0      	b.n	80010e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f44:	4b6a      	ldr	r3, [pc, #424]	; (80010f0 <HAL_RCC_ClockConfig+0x1c0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d910      	bls.n	8000f74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f52:	4b67      	ldr	r3, [pc, #412]	; (80010f0 <HAL_RCC_ClockConfig+0x1c0>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f023 0207 	bic.w	r2, r3, #7
 8000f5a:	4965      	ldr	r1, [pc, #404]	; (80010f0 <HAL_RCC_ClockConfig+0x1c0>)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f62:	4b63      	ldr	r3, [pc, #396]	; (80010f0 <HAL_RCC_ClockConfig+0x1c0>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d001      	beq.n	8000f74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e0b8      	b.n	80010e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d020      	beq.n	8000fc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d005      	beq.n	8000f98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f8c:	4b59      	ldr	r3, [pc, #356]	; (80010f4 <HAL_RCC_ClockConfig+0x1c4>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	4a58      	ldr	r2, [pc, #352]	; (80010f4 <HAL_RCC_ClockConfig+0x1c4>)
 8000f92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0308 	and.w	r3, r3, #8
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d005      	beq.n	8000fb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fa4:	4b53      	ldr	r3, [pc, #332]	; (80010f4 <HAL_RCC_ClockConfig+0x1c4>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	4a52      	ldr	r2, [pc, #328]	; (80010f4 <HAL_RCC_ClockConfig+0x1c4>)
 8000faa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000fae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fb0:	4b50      	ldr	r3, [pc, #320]	; (80010f4 <HAL_RCC_ClockConfig+0x1c4>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	494d      	ldr	r1, [pc, #308]	; (80010f4 <HAL_RCC_ClockConfig+0x1c4>)
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d040      	beq.n	8001050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d107      	bne.n	8000fe6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd6:	4b47      	ldr	r3, [pc, #284]	; (80010f4 <HAL_RCC_ClockConfig+0x1c4>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d115      	bne.n	800100e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e07f      	b.n	80010e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d107      	bne.n	8000ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fee:	4b41      	ldr	r3, [pc, #260]	; (80010f4 <HAL_RCC_ClockConfig+0x1c4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d109      	bne.n	800100e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e073      	b.n	80010e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ffe:	4b3d      	ldr	r3, [pc, #244]	; (80010f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e06b      	b.n	80010e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800100e:	4b39      	ldr	r3, [pc, #228]	; (80010f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f023 0203 	bic.w	r2, r3, #3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	4936      	ldr	r1, [pc, #216]	; (80010f4 <HAL_RCC_ClockConfig+0x1c4>)
 800101c:	4313      	orrs	r3, r2
 800101e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001020:	f7ff fa98 	bl	8000554 <HAL_GetTick>
 8001024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001026:	e00a      	b.n	800103e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001028:	f7ff fa94 	bl	8000554 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	f241 3288 	movw	r2, #5000	; 0x1388
 8001036:	4293      	cmp	r3, r2
 8001038:	d901      	bls.n	800103e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e053      	b.n	80010e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800103e:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 020c 	and.w	r2, r3, #12
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	429a      	cmp	r2, r3
 800104e:	d1eb      	bne.n	8001028 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001050:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	429a      	cmp	r2, r3
 800105c:	d210      	bcs.n	8001080 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800105e:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f023 0207 	bic.w	r2, r3, #7
 8001066:	4922      	ldr	r1, [pc, #136]	; (80010f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	4313      	orrs	r3, r2
 800106c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800106e:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	429a      	cmp	r2, r3
 800107a:	d001      	beq.n	8001080 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e032      	b.n	80010e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	2b00      	cmp	r3, #0
 800108a:	d008      	beq.n	800109e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <HAL_RCC_ClockConfig+0x1c4>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	4916      	ldr	r1, [pc, #88]	; (80010f4 <HAL_RCC_ClockConfig+0x1c4>)
 800109a:	4313      	orrs	r3, r2
 800109c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d009      	beq.n	80010be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_RCC_ClockConfig+0x1c4>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	490e      	ldr	r1, [pc, #56]	; (80010f4 <HAL_RCC_ClockConfig+0x1c4>)
 80010ba:	4313      	orrs	r3, r2
 80010bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010be:	f000 f821 	bl	8001104 <HAL_RCC_GetSysClockFreq>
 80010c2:	4602      	mov	r2, r0
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <HAL_RCC_ClockConfig+0x1c4>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	091b      	lsrs	r3, r3, #4
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	490a      	ldr	r1, [pc, #40]	; (80010f8 <HAL_RCC_ClockConfig+0x1c8>)
 80010d0:	5ccb      	ldrb	r3, [r1, r3]
 80010d2:	fa22 f303 	lsr.w	r3, r2, r3
 80010d6:	4a09      	ldr	r2, [pc, #36]	; (80010fc <HAL_RCC_ClockConfig+0x1cc>)
 80010d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_RCC_ClockConfig+0x1d0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff f96e 	bl	80003c0 <HAL_InitTick>

  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40022000 	.word	0x40022000
 80010f4:	40021000 	.word	0x40021000
 80010f8:	08005de8 	.word	0x08005de8
 80010fc:	20000000 	.word	0x20000000
 8001100:	20000004 	.word	0x20000004

08001104 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001104:	b490      	push	{r4, r7}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800110a:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800110c:	1d3c      	adds	r4, r7, #4
 800110e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001110:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001114:	f240 2301 	movw	r3, #513	; 0x201
 8001118:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800112e:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f003 030c 	and.w	r3, r3, #12
 800113a:	2b04      	cmp	r3, #4
 800113c:	d002      	beq.n	8001144 <HAL_RCC_GetSysClockFreq+0x40>
 800113e:	2b08      	cmp	r3, #8
 8001140:	d003      	beq.n	800114a <HAL_RCC_GetSysClockFreq+0x46>
 8001142:	e02d      	b.n	80011a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001146:	623b      	str	r3, [r7, #32]
      break;
 8001148:	e02d      	b.n	80011a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	0c9b      	lsrs	r3, r3, #18
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001156:	4413      	add	r3, r2
 8001158:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800115c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d013      	beq.n	8001190 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	0c5b      	lsrs	r3, r3, #17
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001176:	4413      	add	r3, r2
 8001178:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800117c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001182:	fb02 f203 	mul.w	r2, r2, r3
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	fbb2 f3f3 	udiv	r3, r2, r3
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
 800118e:	e004      	b.n	800119a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001194:	fb02 f303 	mul.w	r3, r2, r3
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	623b      	str	r3, [r7, #32]
      break;
 800119e:	e002      	b.n	80011a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_RCC_GetSysClockFreq+0xb8>)
 80011a2:	623b      	str	r3, [r7, #32]
      break;
 80011a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80011a6:	6a3b      	ldr	r3, [r7, #32]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3728      	adds	r7, #40	; 0x28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc90      	pop	{r4, r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	08005cfc 	.word	0x08005cfc
 80011b8:	40021000 	.word	0x40021000
 80011bc:	007a1200 	.word	0x007a1200
 80011c0:	003d0900 	.word	0x003d0900

080011c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011c8:	4b02      	ldr	r3, [pc, #8]	; (80011d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	20000000 	.word	0x20000000

080011d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80011dc:	f7ff fff2 	bl	80011c4 <HAL_RCC_GetHCLKFreq>
 80011e0:	4602      	mov	r2, r0
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	0a1b      	lsrs	r3, r3, #8
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	4903      	ldr	r1, [pc, #12]	; (80011fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80011ee:	5ccb      	ldrb	r3, [r1, r3]
 80011f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40021000 	.word	0x40021000
 80011fc:	08005df8 	.word	0x08005df8

08001200 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	220f      	movs	r2, #15
 800120e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_RCC_GetClockConfig+0x58>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0203 	and.w	r2, r3, #3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_RCC_GetClockConfig+0x58>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_RCC_GetClockConfig+0x58>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <HAL_RCC_GetClockConfig+0x58>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	08db      	lsrs	r3, r3, #3
 800123a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_RCC_GetClockConfig+0x5c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0207 	and.w	r2, r3, #7
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	40021000 	.word	0x40021000
 800125c:	40022000 	.word	0x40022000

08001260 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <RCC_Delay+0x34>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <RCC_Delay+0x38>)
 800126e:	fba2 2303 	umull	r2, r3, r2, r3
 8001272:	0a5b      	lsrs	r3, r3, #9
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	fb02 f303 	mul.w	r3, r2, r3
 800127a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800127c:	bf00      	nop
  }
  while (Delay --);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	1e5a      	subs	r2, r3, #1
 8001282:	60fa      	str	r2, [r7, #12]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1f9      	bne.n	800127c <RCC_Delay+0x1c>
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	20000000 	.word	0x20000000
 8001298:	10624dd3 	.word	0x10624dd3

0800129c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e041      	b.n	8001332 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d106      	bne.n	80012c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 f839 	bl	800133a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2202      	movs	r2, #2
 80012cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3304      	adds	r3, #4
 80012d8:	4619      	mov	r1, r3
 80012da:	4610      	mov	r0, r2
 80012dc:	f000 f9b4 	bl	8001648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2201      	movs	r2, #1
 80012f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2201      	movs	r2, #1
 800132c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b01      	cmp	r3, #1
 800135e:	d001      	beq.n	8001364 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e03a      	b.n	80013da <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2202      	movs	r2, #2
 8001368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 0201 	orr.w	r2, r2, #1
 800137a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a18      	ldr	r2, [pc, #96]	; (80013e4 <HAL_TIM_Base_Start_IT+0x98>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d00e      	beq.n	80013a4 <HAL_TIM_Base_Start_IT+0x58>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800138e:	d009      	beq.n	80013a4 <HAL_TIM_Base_Start_IT+0x58>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d004      	beq.n	80013a4 <HAL_TIM_Base_Start_IT+0x58>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a13      	ldr	r2, [pc, #76]	; (80013ec <HAL_TIM_Base_Start_IT+0xa0>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d111      	bne.n	80013c8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d010      	beq.n	80013d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f042 0201 	orr.w	r2, r2, #1
 80013c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80013c6:	e007      	b.n	80013d8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f042 0201 	orr.w	r2, r2, #1
 80013d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	40012c00 	.word	0x40012c00
 80013e8:	40000400 	.word	0x40000400
 80013ec:	40000800 	.word	0x40000800

080013f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b02      	cmp	r3, #2
 8001404:	d122      	bne.n	800144c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b02      	cmp	r3, #2
 8001412:	d11b      	bne.n	800144c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f06f 0202 	mvn.w	r2, #2
 800141c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 f8ed 	bl	8001612 <HAL_TIM_IC_CaptureCallback>
 8001438:	e005      	b.n	8001446 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 f8e0 	bl	8001600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 f8ef 	bl	8001624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	2b04      	cmp	r3, #4
 8001458:	d122      	bne.n	80014a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b04      	cmp	r3, #4
 8001466:	d11b      	bne.n	80014a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f06f 0204 	mvn.w	r2, #4
 8001470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2202      	movs	r2, #2
 8001476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 f8c3 	bl	8001612 <HAL_TIM_IC_CaptureCallback>
 800148c:	e005      	b.n	800149a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 f8b6 	bl	8001600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 f8c5 	bl	8001624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d122      	bne.n	80014f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	2b08      	cmp	r3, #8
 80014ba:	d11b      	bne.n	80014f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f06f 0208 	mvn.w	r2, #8
 80014c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2204      	movs	r2, #4
 80014ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 f899 	bl	8001612 <HAL_TIM_IC_CaptureCallback>
 80014e0:	e005      	b.n	80014ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 f88c 	bl	8001600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f89b 	bl	8001624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	f003 0310 	and.w	r3, r3, #16
 80014fe:	2b10      	cmp	r3, #16
 8001500:	d122      	bne.n	8001548 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	f003 0310 	and.w	r3, r3, #16
 800150c:	2b10      	cmp	r3, #16
 800150e:	d11b      	bne.n	8001548 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f06f 0210 	mvn.w	r2, #16
 8001518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2208      	movs	r2, #8
 800151e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 f86f 	bl	8001612 <HAL_TIM_IC_CaptureCallback>
 8001534:	e005      	b.n	8001542 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f862 	bl	8001600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 f871 	bl	8001624 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b01      	cmp	r3, #1
 8001554:	d10e      	bne.n	8001574 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	2b01      	cmp	r3, #1
 8001562:	d107      	bne.n	8001574 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f06f 0201 	mvn.w	r2, #1
 800156c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7fe fed6 	bl	8000320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157e:	2b80      	cmp	r3, #128	; 0x80
 8001580:	d10e      	bne.n	80015a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158c:	2b80      	cmp	r3, #128	; 0x80
 800158e:	d107      	bne.n	80015a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f8bf 	bl	800171e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015aa:	2b40      	cmp	r3, #64	; 0x40
 80015ac:	d10e      	bne.n	80015cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b8:	2b40      	cmp	r3, #64	; 0x40
 80015ba:	d107      	bne.n	80015cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80015c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f835 	bl	8001636 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	f003 0320 	and.w	r3, r3, #32
 80015d6:	2b20      	cmp	r3, #32
 80015d8:	d10e      	bne.n	80015f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	f003 0320 	and.w	r3, r3, #32
 80015e4:	2b20      	cmp	r3, #32
 80015e6:	d107      	bne.n	80015f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f06f 0220 	mvn.w	r2, #32
 80015f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 f88a 	bl	800170c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr

08001612 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a29      	ldr	r2, [pc, #164]	; (8001700 <TIM_Base_SetConfig+0xb8>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d00b      	beq.n	8001678 <TIM_Base_SetConfig+0x30>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001666:	d007      	beq.n	8001678 <TIM_Base_SetConfig+0x30>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a26      	ldr	r2, [pc, #152]	; (8001704 <TIM_Base_SetConfig+0xbc>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d003      	beq.n	8001678 <TIM_Base_SetConfig+0x30>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a25      	ldr	r2, [pc, #148]	; (8001708 <TIM_Base_SetConfig+0xc0>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d108      	bne.n	800168a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800167e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	4313      	orrs	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a1c      	ldr	r2, [pc, #112]	; (8001700 <TIM_Base_SetConfig+0xb8>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d00b      	beq.n	80016aa <TIM_Base_SetConfig+0x62>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001698:	d007      	beq.n	80016aa <TIM_Base_SetConfig+0x62>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a19      	ldr	r2, [pc, #100]	; (8001704 <TIM_Base_SetConfig+0xbc>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d003      	beq.n	80016aa <TIM_Base_SetConfig+0x62>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a18      	ldr	r2, [pc, #96]	; (8001708 <TIM_Base_SetConfig+0xc0>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d108      	bne.n	80016bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a07      	ldr	r2, [pc, #28]	; (8001700 <TIM_Base_SetConfig+0xb8>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d103      	bne.n	80016f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	615a      	str	r2, [r3, #20]
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	40012c00 	.word	0x40012c00
 8001704:	40000400 	.word	0x40000400
 8001708:	40000800 	.word	0x40000800

0800170c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001736:	f3ef 8305 	mrs	r3, IPSR
 800173a:	60bb      	str	r3, [r7, #8]
  return(result);
 800173c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10f      	bne.n	8001762 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001742:	f3ef 8310 	mrs	r3, PRIMASK
 8001746:	607b      	str	r3, [r7, #4]
  return(result);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d109      	bne.n	8001762 <osKernelInitialize+0x32>
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <osKernelInitialize+0x60>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d109      	bne.n	800176a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001756:	f3ef 8311 	mrs	r3, BASEPRI
 800175a:	603b      	str	r3, [r7, #0]
  return(result);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001762:	f06f 0305 	mvn.w	r3, #5
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	e00c      	b.n	8001784 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <osKernelInitialize+0x60>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d105      	bne.n	800177e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <osKernelInitialize+0x60>)
 8001774:	2201      	movs	r2, #1
 8001776:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	e002      	b.n	8001784 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800177e:	f04f 33ff 	mov.w	r3, #4294967295
 8001782:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001784:	68fb      	ldr	r3, [r7, #12]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	2000002c 	.word	0x2000002c

08001794 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800179a:	f3ef 8305 	mrs	r3, IPSR
 800179e:	60bb      	str	r3, [r7, #8]
  return(result);
 80017a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10f      	bne.n	80017c6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017a6:	f3ef 8310 	mrs	r3, PRIMASK
 80017aa:	607b      	str	r3, [r7, #4]
  return(result);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d109      	bne.n	80017c6 <osKernelStart+0x32>
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <osKernelStart+0x64>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d109      	bne.n	80017ce <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80017ba:	f3ef 8311 	mrs	r3, BASEPRI
 80017be:	603b      	str	r3, [r7, #0]
  return(result);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <osKernelStart+0x3a>
    stat = osErrorISR;
 80017c6:	f06f 0305 	mvn.w	r3, #5
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	e00e      	b.n	80017ec <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80017ce:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <osKernelStart+0x64>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d107      	bne.n	80017e6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80017d6:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <osKernelStart+0x64>)
 80017d8:	2202      	movs	r2, #2
 80017da:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80017dc:	f001 f85c 	bl	8002898 <vTaskStartScheduler>
      stat = osOK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	e002      	b.n	80017ec <osKernelStart+0x58>
    } else {
      stat = osError;
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80017ec:	68fb      	ldr	r3, [r7, #12]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000002c 	.word	0x2000002c

080017fc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001804:	f3ef 8305 	mrs	r3, IPSR
 8001808:	613b      	str	r3, [r7, #16]
  return(result);
 800180a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10f      	bne.n	8001830 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001810:	f3ef 8310 	mrs	r3, PRIMASK
 8001814:	60fb      	str	r3, [r7, #12]
  return(result);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d109      	bne.n	8001830 <osDelay+0x34>
 800181c:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <osDelay+0x58>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d109      	bne.n	8001838 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001824:	f3ef 8311 	mrs	r3, BASEPRI
 8001828:	60bb      	str	r3, [r7, #8]
  return(result);
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <osDelay+0x3c>
    stat = osErrorISR;
 8001830:	f06f 0305 	mvn.w	r3, #5
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e007      	b.n	8001848 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 fff0 	bl	8002828 <vTaskDelay>
    }
  }

  return (stat);
 8001848:	697b      	ldr	r3, [r7, #20]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	2000002c 	.word	0x2000002c

08001858 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4a06      	ldr	r2, [pc, #24]	; (8001880 <vApplicationGetIdleTaskMemory+0x28>)
 8001868:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	4a05      	ldr	r2, [pc, #20]	; (8001884 <vApplicationGetIdleTaskMemory+0x2c>)
 800186e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2280      	movs	r2, #128	; 0x80
 8001874:	601a      	str	r2, [r3, #0]
}
 8001876:	bf00      	nop
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	20000030 	.word	0x20000030
 8001884:	2000008c 	.word	0x2000008c

08001888 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4a07      	ldr	r2, [pc, #28]	; (80018b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8001898:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <vApplicationGetTimerTaskMemory+0x30>)
 800189e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a6:	601a      	str	r2, [r3, #0]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	2000028c 	.word	0x2000028c
 80018b8:	200002e8 	.word	0x200002e8

080018bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f103 0208 	add.w	r2, r3, #8
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295
 80018d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f103 0208 	add.w	r2, r3, #8
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f103 0208 	add.w	r2, r3, #8
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr

08001912 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001912:	b480      	push	{r7}
 8001914:	b085      	sub	sp, #20
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	601a      	str	r2, [r3, #0]
}
 800194e:	bf00      	nop
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196e:	d103      	bne.n	8001978 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	e00c      	b.n	8001992 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3308      	adds	r3, #8
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	e002      	b.n	8001986 <vListInsert+0x2e>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	429a      	cmp	r2, r3
 8001990:	d2f6      	bcs.n	8001980 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	601a      	str	r2, [r3, #0]
}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6892      	ldr	r2, [r2, #8]
 80019de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6852      	ldr	r2, [r2, #4]
 80019e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d103      	bne.n	80019fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	1e5a      	subs	r2, r3, #1
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
	...

08001a1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d109      	bne.n	8001a44 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a34:	f383 8811 	msr	BASEPRI, r3
 8001a38:	f3bf 8f6f 	isb	sy
 8001a3c:	f3bf 8f4f 	dsb	sy
 8001a40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001a42:	bf00      	nop

	taskENTER_CRITICAL();
 8001a44:	f002 f8c8 	bl	8003bd8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a50:	68f9      	ldr	r1, [r7, #12]
 8001a52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a54:	fb01 f303 	mul.w	r3, r1, r3
 8001a58:	441a      	add	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a74:	3b01      	subs	r3, #1
 8001a76:	68f9      	ldr	r1, [r7, #12]
 8001a78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a7a:	fb01 f303 	mul.w	r3, r1, r3
 8001a7e:	441a      	add	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	22ff      	movs	r2, #255	; 0xff
 8001a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	22ff      	movs	r2, #255	; 0xff
 8001a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d114      	bne.n	8001ac4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d01a      	beq.n	8001ad8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	3310      	adds	r3, #16
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f001 f9ae 	bl	8002e08 <xTaskRemoveFromEventList>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d012      	beq.n	8001ad8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <xQueueGenericReset+0xcc>)
 8001ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	f3bf 8f4f 	dsb	sy
 8001abe:	f3bf 8f6f 	isb	sy
 8001ac2:	e009      	b.n	8001ad8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	3310      	adds	r3, #16
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fef7 	bl	80018bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	3324      	adds	r3, #36	; 0x24
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fef2 	bl	80018bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001ad8:	f002 f8ac 	bl	8003c34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001adc:	2301      	movs	r3, #1
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	e000ed04 	.word	0xe000ed04

08001aec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08e      	sub	sp, #56	; 0x38
 8001af0:	af02      	add	r7, sp, #8
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d109      	bne.n	8001b14 <xQueueGenericCreateStatic+0x28>
	__asm volatile
 8001b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b04:	f383 8811 	msr	BASEPRI, r3
 8001b08:	f3bf 8f6f 	isb	sy
 8001b0c:	f3bf 8f4f 	dsb	sy
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001b12:	bf00      	nop

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d109      	bne.n	8001b2e <xQueueGenericCreateStatic+0x42>
	__asm volatile
 8001b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b1e:	f383 8811 	msr	BASEPRI, r3
 8001b22:	f3bf 8f6f 	isb	sy
 8001b26:	f3bf 8f4f 	dsb	sy
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001b2c:	bf00      	nop

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <xQueueGenericCreateStatic+0x4e>
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <xQueueGenericCreateStatic+0x52>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <xQueueGenericCreateStatic+0x54>
 8001b3e:	2300      	movs	r3, #0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d109      	bne.n	8001b58 <xQueueGenericCreateStatic+0x6c>
	__asm volatile
 8001b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b48:	f383 8811 	msr	BASEPRI, r3
 8001b4c:	f3bf 8f6f 	isb	sy
 8001b50:	f3bf 8f4f 	dsb	sy
 8001b54:	623b      	str	r3, [r7, #32]
}
 8001b56:	bf00      	nop
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d102      	bne.n	8001b64 <xQueueGenericCreateStatic+0x78>
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <xQueueGenericCreateStatic+0x7c>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <xQueueGenericCreateStatic+0x7e>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d109      	bne.n	8001b82 <xQueueGenericCreateStatic+0x96>
	__asm volatile
 8001b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b72:	f383 8811 	msr	BASEPRI, r3
 8001b76:	f3bf 8f6f 	isb	sy
 8001b7a:	f3bf 8f4f 	dsb	sy
 8001b7e:	61fb      	str	r3, [r7, #28]
}
 8001b80:	bf00      	nop
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001b82:	2350      	movs	r3, #80	; 0x50
 8001b84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2b50      	cmp	r3, #80	; 0x50
 8001b8a:	d009      	beq.n	8001ba0 <xQueueGenericCreateStatic+0xb4>
	__asm volatile
 8001b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b90:	f383 8811 	msr	BASEPRI, r3
 8001b94:	f3bf 8f6f 	isb	sy
 8001b98:	f3bf 8f4f 	dsb	sy
 8001b9c:	61bb      	str	r3, [r7, #24]
}
 8001b9e:	bf00      	nop
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00d      	beq.n	8001bc6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001bb2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	68b9      	ldr	r1, [r7, #8]
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 f805 	bl	8001bd0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3730      	adds	r7, #48	; 0x30
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d103      	bne.n	8001bec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	e002      	b.n	8001bf2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001bfe:	2101      	movs	r1, #1
 8001c00:	69b8      	ldr	r0, [r7, #24]
 8001c02:	f7ff ff0b 	bl	8001a1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	78fa      	ldrb	r2, [r7, #3]
 8001c0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	68f9      	ldr	r1, [r7, #12]
 8001c14:	2073      	movs	r0, #115	; 0x73
 8001c16:	f003 f93b 	bl	8004e90 <SEGGER_SYSVIEW_RecordU32x3>
}
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b090      	sub	sp, #64	; 0x40
 8001c28:	af02      	add	r7, sp, #8
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001c32:	2300      	movs	r3, #0
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d109      	bne.n	8001c54 <xQueueGenericSend+0x30>
	__asm volatile
 8001c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c44:	f383 8811 	msr	BASEPRI, r3
 8001c48:	f3bf 8f6f 	isb	sy
 8001c4c:	f3bf 8f4f 	dsb	sy
 8001c50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001c52:	bf00      	nop
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d103      	bne.n	8001c62 <xQueueGenericSend+0x3e>
 8001c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <xQueueGenericSend+0x42>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <xQueueGenericSend+0x44>
 8001c66:	2300      	movs	r3, #0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d109      	bne.n	8001c80 <xQueueGenericSend+0x5c>
	__asm volatile
 8001c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c70:	f383 8811 	msr	BASEPRI, r3
 8001c74:	f3bf 8f6f 	isb	sy
 8001c78:	f3bf 8f4f 	dsb	sy
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001c7e:	bf00      	nop
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d103      	bne.n	8001c8e <xQueueGenericSend+0x6a>
 8001c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <xQueueGenericSend+0x6e>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <xQueueGenericSend+0x70>
 8001c92:	2300      	movs	r3, #0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d109      	bne.n	8001cac <xQueueGenericSend+0x88>
	__asm volatile
 8001c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c9c:	f383 8811 	msr	BASEPRI, r3
 8001ca0:	f3bf 8f6f 	isb	sy
 8001ca4:	f3bf 8f4f 	dsb	sy
 8001ca8:	623b      	str	r3, [r7, #32]
}
 8001caa:	bf00      	nop
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001cac:	f001 faa4 	bl	80031f8 <xTaskGetSchedulerState>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d102      	bne.n	8001cbc <xQueueGenericSend+0x98>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <xQueueGenericSend+0x9c>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <xQueueGenericSend+0x9e>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <xQueueGenericSend+0xb6>
	__asm volatile
 8001cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cca:	f383 8811 	msr	BASEPRI, r3
 8001cce:	f3bf 8f6f 	isb	sy
 8001cd2:	f3bf 8f4f 	dsb	sy
 8001cd6:	61fb      	str	r3, [r7, #28]
}
 8001cd8:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001cda:	f001 ff7d 	bl	8003bd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d302      	bcc.n	8001cf0 <xQueueGenericSend+0xcc>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d136      	bne.n	8001d5e <xQueueGenericSend+0x13a>
			{
				traceQUEUE_SEND( pxQueue );
 8001cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f003 fe62 	bl	80059bc <SEGGER_SYSVIEW_ShrinkId>
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	460b      	mov	r3, r1
 8001d02:	4601      	mov	r1, r0
 8001d04:	205a      	movs	r0, #90	; 0x5a
 8001d06:	f003 f939 	bl	8004f7c <SEGGER_SYSVIEW_RecordU32x4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d10:	f000 fa62 	bl	80021d8 <prvCopyDataToQueue>
 8001d14:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d010      	beq.n	8001d40 <xQueueGenericSend+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d20:	3324      	adds	r3, #36	; 0x24
 8001d22:	4618      	mov	r0, r3
 8001d24:	f001 f870 	bl	8002e08 <xTaskRemoveFromEventList>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d013      	beq.n	8001d56 <xQueueGenericSend+0x132>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001d2e:	4b4d      	ldr	r3, [pc, #308]	; (8001e64 <xQueueGenericSend+0x240>)
 8001d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	f3bf 8f4f 	dsb	sy
 8001d3a:	f3bf 8f6f 	isb	sy
 8001d3e:	e00a      	b.n	8001d56 <xQueueGenericSend+0x132>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d007      	beq.n	8001d56 <xQueueGenericSend+0x132>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001d46:	4b47      	ldr	r3, [pc, #284]	; (8001e64 <xQueueGenericSend+0x240>)
 8001d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	f3bf 8f4f 	dsb	sy
 8001d52:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001d56:	f001 ff6d 	bl	8003c34 <vPortExitCritical>
				return pdPASS;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e07d      	b.n	8001e5a <xQueueGenericSend+0x236>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d110      	bne.n	8001d86 <xQueueGenericSend+0x162>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001d64:	f001 ff66 	bl	8003c34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8001d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f003 fe26 	bl	80059bc <SEGGER_SYSVIEW_ShrinkId>
 8001d70:	68ba      	ldr	r2, [r7, #8]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4601      	mov	r1, r0
 8001d7c:	205a      	movs	r0, #90	; 0x5a
 8001d7e:	f003 f8fd 	bl	8004f7c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	e069      	b.n	8001e5a <xQueueGenericSend+0x236>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d106      	bne.n	8001d9a <xQueueGenericSend+0x176>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4618      	mov	r0, r3
 8001d92:	f001 f89f 	bl	8002ed4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001d96:	2301      	movs	r3, #1
 8001d98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001d9a:	f001 ff4b 	bl	8003c34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001d9e:	f000 fde1 	bl	8002964 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001da2:	f001 ff19 	bl	8003bd8 <vPortEnterCritical>
 8001da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001dac:	b25b      	sxtb	r3, r3
 8001dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db2:	d103      	bne.n	8001dbc <xQueueGenericSend+0x198>
 8001db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dc2:	b25b      	sxtb	r3, r3
 8001dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc8:	d103      	bne.n	8001dd2 <xQueueGenericSend+0x1ae>
 8001dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001dd2:	f001 ff2f 	bl	8003c34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001dd6:	1d3a      	adds	r2, r7, #4
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	4611      	mov	r1, r2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f001 f88e 	bl	8002f00 <xTaskCheckForTimeOut>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d124      	bne.n	8001e34 <xQueueGenericSend+0x210>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001dea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001dec:	f000 faec 	bl	80023c8 <prvIsQueueFull>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d018      	beq.n	8001e28 <xQueueGenericSend+0x204>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df8:	3310      	adds	r3, #16
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 ffb0 	bl	8002d64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e06:	f000 fa77 	bl	80022f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001e0a:	f000 fdb9 	bl	8002980 <xTaskResumeAll>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f47f af62 	bne.w	8001cda <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8001e16:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <xQueueGenericSend+0x240>)
 8001e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	f3bf 8f4f 	dsb	sy
 8001e22:	f3bf 8f6f 	isb	sy
 8001e26:	e758      	b.n	8001cda <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e2a:	f000 fa65 	bl	80022f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001e2e:	f000 fda7 	bl	8002980 <xTaskResumeAll>
 8001e32:	e752      	b.n	8001cda <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e36:	f000 fa5f 	bl	80022f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001e3a:	f000 fda1 	bl	8002980 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8001e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e40:	4618      	mov	r0, r3
 8001e42:	f003 fdbb 	bl	80059bc <SEGGER_SYSVIEW_ShrinkId>
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4601      	mov	r1, r0
 8001e52:	205a      	movs	r0, #90	; 0x5a
 8001e54:	f003 f892 	bl	8004f7c <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8001e58:	2300      	movs	r3, #0
		}
	}
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3738      	adds	r7, #56	; 0x38
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	e000ed04 	.word	0xe000ed04

08001e68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08e      	sub	sp, #56	; 0x38
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d109      	bne.n	8001e94 <xQueueGenericSendFromISR+0x2c>
	__asm volatile
 8001e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e84:	f383 8811 	msr	BASEPRI, r3
 8001e88:	f3bf 8f6f 	isb	sy
 8001e8c:	f3bf 8f4f 	dsb	sy
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001e92:	bf00      	nop
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d103      	bne.n	8001ea2 <xQueueGenericSendFromISR+0x3a>
 8001e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <xQueueGenericSendFromISR+0x3e>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <xQueueGenericSendFromISR+0x40>
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d109      	bne.n	8001ec0 <xQueueGenericSendFromISR+0x58>
	__asm volatile
 8001eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eb0:	f383 8811 	msr	BASEPRI, r3
 8001eb4:	f3bf 8f6f 	isb	sy
 8001eb8:	f3bf 8f4f 	dsb	sy
 8001ebc:	623b      	str	r3, [r7, #32]
}
 8001ebe:	bf00      	nop
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d103      	bne.n	8001ece <xQueueGenericSendFromISR+0x66>
 8001ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <xQueueGenericSendFromISR+0x6a>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <xQueueGenericSendFromISR+0x6c>
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d109      	bne.n	8001eec <xQueueGenericSendFromISR+0x84>
	__asm volatile
 8001ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001edc:	f383 8811 	msr	BASEPRI, r3
 8001ee0:	f3bf 8f6f 	isb	sy
 8001ee4:	f3bf 8f4f 	dsb	sy
 8001ee8:	61fb      	str	r3, [r7, #28]
}
 8001eea:	bf00      	nop
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001eec:	f001 ff40 	bl	8003d70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001ef0:	f3ef 8211 	mrs	r2, BASEPRI
 8001ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef8:	f383 8811 	msr	BASEPRI, r3
 8001efc:	f3bf 8f6f 	isb	sy
 8001f00:	f3bf 8f4f 	dsb	sy
 8001f04:	61ba      	str	r2, [r7, #24]
 8001f06:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001f08:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d302      	bcc.n	8001f1e <xQueueGenericSendFromISR+0xb6>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d136      	bne.n	8001f8c <xQueueGenericSendFromISR+0x124>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8001f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 fd46 	bl	80059bc <SEGGER_SYSVIEW_ShrinkId>
 8001f30:	4601      	mov	r1, r0
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	461a      	mov	r2, r3
 8001f36:	2060      	movs	r0, #96	; 0x60
 8001f38:	f002 ff50 	bl	8004ddc <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	68b9      	ldr	r1, [r7, #8]
 8001f40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f42:	f000 f949 	bl	80021d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001f46:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4e:	d112      	bne.n	8001f76 <xQueueGenericSendFromISR+0x10e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d016      	beq.n	8001f86 <xQueueGenericSendFromISR+0x11e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5a:	3324      	adds	r3, #36	; 0x24
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 ff53 	bl	8002e08 <xTaskRemoveFromEventList>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00e      	beq.n	8001f86 <xQueueGenericSendFromISR+0x11e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00b      	beq.n	8001f86 <xQueueGenericSendFromISR+0x11e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	e007      	b.n	8001f86 <xQueueGenericSendFromISR+0x11e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001f76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	b25a      	sxtb	r2, r3
 8001f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001f86:	2301      	movs	r3, #1
 8001f88:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001f8a:	e00b      	b.n	8001fa4 <xQueueGenericSendFromISR+0x13c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8001f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f003 fd14 	bl	80059bc <SEGGER_SYSVIEW_ShrinkId>
 8001f94:	4601      	mov	r1, r0
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2060      	movs	r0, #96	; 0x60
 8001f9c:	f002 ff1e 	bl	8004ddc <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8001fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001fae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3738      	adds	r7, #56	; 0x38
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b08f      	sub	sp, #60	; 0x3c
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d109      	bne.n	8001fea <xQueueReceive+0x2e>
	__asm volatile
 8001fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fda:	f383 8811 	msr	BASEPRI, r3
 8001fde:	f3bf 8f6f 	isb	sy
 8001fe2:	f3bf 8f4f 	dsb	sy
 8001fe6:	623b      	str	r3, [r7, #32]
}
 8001fe8:	bf00      	nop

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d103      	bne.n	8001ff8 <xQueueReceive+0x3c>
 8001ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <xQueueReceive+0x40>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <xQueueReceive+0x42>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d109      	bne.n	8002016 <xQueueReceive+0x5a>
	__asm volatile
 8002002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002006:	f383 8811 	msr	BASEPRI, r3
 800200a:	f3bf 8f6f 	isb	sy
 800200e:	f3bf 8f4f 	dsb	sy
 8002012:	61fb      	str	r3, [r7, #28]
}
 8002014:	bf00      	nop

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002016:	f001 f8ef 	bl	80031f8 <xTaskGetSchedulerState>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <xQueueReceive+0x6a>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <xQueueReceive+0x6e>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <xQueueReceive+0x70>
 800202a:	2300      	movs	r3, #0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d109      	bne.n	8002044 <xQueueReceive+0x88>
	__asm volatile
 8002030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002034:	f383 8811 	msr	BASEPRI, r3
 8002038:	f3bf 8f6f 	isb	sy
 800203c:	f3bf 8f4f 	dsb	sy
 8002040:	61bb      	str	r3, [r7, #24]
}
 8002042:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002044:	f001 fdc8 	bl	8003bd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	2b00      	cmp	r3, #0
 8002052:	d02f      	beq.n	80020b4 <xQueueReceive+0xf8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002058:	f000 f928 	bl	80022ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 800205c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205e:	4618      	mov	r0, r3
 8002060:	f003 fcac 	bl	80059bc <SEGGER_SYSVIEW_ShrinkId>
 8002064:	4604      	mov	r4, r0
 8002066:	2000      	movs	r0, #0
 8002068:	f003 fca8 	bl	80059bc <SEGGER_SYSVIEW_ShrinkId>
 800206c:	4602      	mov	r2, r0
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2101      	movs	r1, #1
 8002072:	9100      	str	r1, [sp, #0]
 8002074:	4621      	mov	r1, r4
 8002076:	205c      	movs	r0, #92	; 0x5c
 8002078:	f002 ff80 	bl	8004f7c <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	1e5a      	subs	r2, r3, #1
 8002080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002082:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00f      	beq.n	80020ac <xQueueReceive+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800208c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208e:	3310      	adds	r3, #16
 8002090:	4618      	mov	r0, r3
 8002092:	f000 feb9 	bl	8002e08 <xTaskRemoveFromEventList>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d007      	beq.n	80020ac <xQueueReceive+0xf0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800209c:	4b4d      	ldr	r3, [pc, #308]	; (80021d4 <xQueueReceive+0x218>)
 800209e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	f3bf 8f4f 	dsb	sy
 80020a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80020ac:	f001 fdc2 	bl	8003c34 <vPortExitCritical>
				return pdPASS;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e08a      	b.n	80021ca <xQueueReceive+0x20e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d113      	bne.n	80020e2 <xQueueReceive+0x126>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80020ba:	f001 fdbb 	bl	8003c34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80020be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c0:	4618      	mov	r0, r3
 80020c2:	f003 fc7b 	bl	80059bc <SEGGER_SYSVIEW_ShrinkId>
 80020c6:	4604      	mov	r4, r0
 80020c8:	2000      	movs	r0, #0
 80020ca:	f003 fc77 	bl	80059bc <SEGGER_SYSVIEW_ShrinkId>
 80020ce:	4602      	mov	r2, r0
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2101      	movs	r1, #1
 80020d4:	9100      	str	r1, [sp, #0]
 80020d6:	4621      	mov	r1, r4
 80020d8:	205c      	movs	r0, #92	; 0x5c
 80020da:	f002 ff4f 	bl	8004f7c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 80020de:	2300      	movs	r3, #0
 80020e0:	e073      	b.n	80021ca <xQueueReceive+0x20e>
				}
				else if( xEntryTimeSet == pdFALSE )
 80020e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d106      	bne.n	80020f6 <xQueueReceive+0x13a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80020e8:	f107 0310 	add.w	r3, r7, #16
 80020ec:	4618      	mov	r0, r3
 80020ee:	f000 fef1 	bl	8002ed4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80020f2:	2301      	movs	r3, #1
 80020f4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80020f6:	f001 fd9d 	bl	8003c34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80020fa:	f000 fc33 	bl	8002964 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80020fe:	f001 fd6b 	bl	8003bd8 <vPortEnterCritical>
 8002102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002104:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002108:	b25b      	sxtb	r3, r3
 800210a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210e:	d103      	bne.n	8002118 <xQueueReceive+0x15c>
 8002110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800211e:	b25b      	sxtb	r3, r3
 8002120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002124:	d103      	bne.n	800212e <xQueueReceive+0x172>
 8002126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800212e:	f001 fd81 	bl	8003c34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002132:	1d3a      	adds	r2, r7, #4
 8002134:	f107 0310 	add.w	r3, r7, #16
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f000 fee0 	bl	8002f00 <xTaskCheckForTimeOut>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d124      	bne.n	8002190 <xQueueReceive+0x1d4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002148:	f000 f928 	bl	800239c <prvIsQueueEmpty>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d018      	beq.n	8002184 <xQueueReceive+0x1c8>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002154:	3324      	adds	r3, #36	; 0x24
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	4611      	mov	r1, r2
 800215a:	4618      	mov	r0, r3
 800215c:	f000 fe02 	bl	8002d64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002162:	f000 f8c9 	bl	80022f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002166:	f000 fc0b 	bl	8002980 <xTaskResumeAll>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	f47f af69 	bne.w	8002044 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002172:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <xQueueReceive+0x218>)
 8002174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	f3bf 8f4f 	dsb	sy
 800217e:	f3bf 8f6f 	isb	sy
 8002182:	e75f      	b.n	8002044 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002186:	f000 f8b7 	bl	80022f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800218a:	f000 fbf9 	bl	8002980 <xTaskResumeAll>
 800218e:	e759      	b.n	8002044 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002192:	f000 f8b1 	bl	80022f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002196:	f000 fbf3 	bl	8002980 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800219a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800219c:	f000 f8fe 	bl	800239c <prvIsQueueEmpty>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f43f af4e 	beq.w	8002044 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80021a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021aa:	4618      	mov	r0, r3
 80021ac:	f003 fc06 	bl	80059bc <SEGGER_SYSVIEW_ShrinkId>
 80021b0:	4604      	mov	r4, r0
 80021b2:	2000      	movs	r0, #0
 80021b4:	f003 fc02 	bl	80059bc <SEGGER_SYSVIEW_ShrinkId>
 80021b8:	4602      	mov	r2, r0
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2101      	movs	r1, #1
 80021be:	9100      	str	r1, [sp, #0]
 80021c0:	4621      	mov	r1, r4
 80021c2:	205c      	movs	r0, #92	; 0x5c
 80021c4:	f002 feda 	bl	8004f7c <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 80021c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3734      	adds	r7, #52	; 0x34
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd90      	pop	{r4, r7, pc}
 80021d2:	bf00      	nop
 80021d4:	e000ed04 	.word	0xe000ed04

080021d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10d      	bne.n	8002212 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d14d      	bne.n	800229a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4618      	mov	r0, r3
 8002204:	f001 f816 	bl	8003234 <xTaskPriorityDisinherit>
 8002208:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	e043      	b.n	800229a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d119      	bne.n	800224c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6898      	ldr	r0, [r3, #8]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	461a      	mov	r2, r3
 8002222:	68b9      	ldr	r1, [r7, #8]
 8002224:	f003 fd44 	bl	8005cb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	441a      	add	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	429a      	cmp	r2, r3
 8002240:	d32b      	bcc.n	800229a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	609a      	str	r2, [r3, #8]
 800224a:	e026      	b.n	800229a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	68d8      	ldr	r0, [r3, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	461a      	mov	r2, r3
 8002256:	68b9      	ldr	r1, [r7, #8]
 8002258:	f003 fd2a 	bl	8005cb0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	425b      	negs	r3, r3
 8002266:	441a      	add	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d207      	bcs.n	8002288 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	425b      	negs	r3, r3
 8002282:	441a      	add	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d105      	bne.n	800229a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	3b01      	subs	r3, #1
 8002298:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80022a2:	697b      	ldr	r3, [r7, #20]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d018      	beq.n	80022f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	441a      	add	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d303      	bcc.n	80022e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68d9      	ldr	r1, [r3, #12]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	461a      	mov	r2, r3
 80022ea:	6838      	ldr	r0, [r7, #0]
 80022ec:	f003 fce0 	bl	8005cb0 <memcpy>
	}
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002300:	f001 fc6a 	bl	8003bd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800230a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800230c:	e011      	b.n	8002332 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	2b00      	cmp	r3, #0
 8002314:	d012      	beq.n	800233c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3324      	adds	r3, #36	; 0x24
 800231a:	4618      	mov	r0, r3
 800231c:	f000 fd74 	bl	8002e08 <xTaskRemoveFromEventList>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002326:	f000 fe4b 	bl	8002fc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	3b01      	subs	r3, #1
 800232e:	b2db      	uxtb	r3, r3
 8002330:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002336:	2b00      	cmp	r3, #0
 8002338:	dce9      	bgt.n	800230e <prvUnlockQueue+0x16>
 800233a:	e000      	b.n	800233e <prvUnlockQueue+0x46>
					break;
 800233c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	22ff      	movs	r2, #255	; 0xff
 8002342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002346:	f001 fc75 	bl	8003c34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800234a:	f001 fc45 	bl	8003bd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002354:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002356:	e011      	b.n	800237c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d012      	beq.n	8002386 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3310      	adds	r3, #16
 8002364:	4618      	mov	r0, r3
 8002366:	f000 fd4f 	bl	8002e08 <xTaskRemoveFromEventList>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002370:	f000 fe26 	bl	8002fc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002374:	7bbb      	ldrb	r3, [r7, #14]
 8002376:	3b01      	subs	r3, #1
 8002378:	b2db      	uxtb	r3, r3
 800237a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800237c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002380:	2b00      	cmp	r3, #0
 8002382:	dce9      	bgt.n	8002358 <prvUnlockQueue+0x60>
 8002384:	e000      	b.n	8002388 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002386:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	22ff      	movs	r2, #255	; 0xff
 800238c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002390:	f001 fc50 	bl	8003c34 <vPortExitCritical>
}
 8002394:	bf00      	nop
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80023a4:	f001 fc18 	bl	8003bd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d102      	bne.n	80023b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80023b0:	2301      	movs	r3, #1
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	e001      	b.n	80023ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80023ba:	f001 fc3b 	bl	8003c34 <vPortExitCritical>

	return xReturn;
 80023be:	68fb      	ldr	r3, [r7, #12]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80023d0:	f001 fc02 	bl	8003bd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023dc:	429a      	cmp	r2, r3
 80023de:	d102      	bne.n	80023e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80023e0:	2301      	movs	r3, #1
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	e001      	b.n	80023ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80023ea:	f001 fc23 	bl	8003c34 <vPortExitCritical>

	return xReturn;
 80023ee:	68fb      	ldr	r3, [r7, #12]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	e01e      	b.n	8002446 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002408:	4a13      	ldr	r2, [pc, #76]	; (8002458 <vQueueAddToRegistry+0x60>)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d115      	bne.n	8002440 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002414:	4910      	ldr	r1, [pc, #64]	; (8002458 <vQueueAddToRegistry+0x60>)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800241e:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <vQueueAddToRegistry+0x60>)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4413      	add	r3, r2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4618      	mov	r0, r3
 800242e:	f003 fac5 	bl	80059bc <SEGGER_SYSVIEW_ShrinkId>
 8002432:	4601      	mov	r1, r0
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	2071      	movs	r0, #113	; 0x71
 800243a:	f002 fccf 	bl	8004ddc <SEGGER_SYSVIEW_RecordU32x2>
				break;
 800243e:	e006      	b.n	800244e <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	3301      	adds	r3, #1
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2b07      	cmp	r3, #7
 800244a:	d9dd      	bls.n	8002408 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800244c:	bf00      	nop
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20003754 	.word	0x20003754

0800245c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800246c:	f001 fbb4 	bl	8003bd8 <vPortEnterCritical>
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002476:	b25b      	sxtb	r3, r3
 8002478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247c:	d103      	bne.n	8002486 <vQueueWaitForMessageRestricted+0x2a>
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800248c:	b25b      	sxtb	r3, r3
 800248e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002492:	d103      	bne.n	800249c <vQueueWaitForMessageRestricted+0x40>
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800249c:	f001 fbca 	bl	8003c34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d106      	bne.n	80024b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	3324      	adds	r3, #36	; 0x24
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	68b9      	ldr	r1, [r7, #8]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fc7b 	bl	8002dac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80024b6:	6978      	ldr	r0, [r7, #20]
 80024b8:	f7ff ff1e 	bl	80022f8 <prvUnlockQueue>
	}
 80024bc:	bf00      	nop
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08e      	sub	sp, #56	; 0x38
 80024c8:	af04      	add	r7, sp, #16
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
 80024d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80024d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d109      	bne.n	80024ec <xTaskCreateStatic+0x28>
	__asm volatile
 80024d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024dc:	f383 8811 	msr	BASEPRI, r3
 80024e0:	f3bf 8f6f 	isb	sy
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	623b      	str	r3, [r7, #32]
}
 80024ea:	bf00      	nop
		configASSERT( pxTaskBuffer != NULL );
 80024ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d109      	bne.n	8002506 <xTaskCreateStatic+0x42>
	__asm volatile
 80024f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f6:	f383 8811 	msr	BASEPRI, r3
 80024fa:	f3bf 8f6f 	isb	sy
 80024fe:	f3bf 8f4f 	dsb	sy
 8002502:	61fb      	str	r3, [r7, #28]
}
 8002504:	bf00      	nop
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002506:	235c      	movs	r3, #92	; 0x5c
 8002508:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b5c      	cmp	r3, #92	; 0x5c
 800250e:	d009      	beq.n	8002524 <xTaskCreateStatic+0x60>
	__asm volatile
 8002510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002514:	f383 8811 	msr	BASEPRI, r3
 8002518:	f3bf 8f6f 	isb	sy
 800251c:	f3bf 8f4f 	dsb	sy
 8002520:	61bb      	str	r3, [r7, #24]
}
 8002522:	bf00      	nop
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002526:	2b00      	cmp	r3, #0
 8002528:	d01e      	beq.n	8002568 <xTaskCreateStatic+0xa4>
 800252a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252c:	2b00      	cmp	r3, #0
 800252e:	d01b      	beq.n	8002568 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002538:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	2202      	movs	r2, #2
 800253e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002542:	2300      	movs	r3, #0
 8002544:	9303      	str	r3, [sp, #12]
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	9302      	str	r3, [sp, #8]
 800254a:	f107 0314 	add.w	r3, r7, #20
 800254e:	9301      	str	r3, [sp, #4]
 8002550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 f850 	bl	8002600 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002560:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002562:	f000 f8d3 	bl	800270c <prvAddNewTaskToReadyList>
 8002566:	e001      	b.n	800256c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800256c:	697b      	ldr	r3, [r7, #20]
	}
 800256e:	4618      	mov	r0, r3
 8002570:	3728      	adds	r7, #40	; 0x28
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002576:	b580      	push	{r7, lr}
 8002578:	b08c      	sub	sp, #48	; 0x30
 800257a:	af04      	add	r7, sp, #16
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	603b      	str	r3, [r7, #0]
 8002582:	4613      	mov	r3, r2
 8002584:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4618      	mov	r0, r3
 800258c:	f001 fc2c 	bl	8003de8 <pvPortMalloc>
 8002590:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00e      	beq.n	80025b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002598:	205c      	movs	r0, #92	; 0x5c
 800259a:	f001 fc25 	bl	8003de8 <pvPortMalloc>
 800259e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	631a      	str	r2, [r3, #48]	; 0x30
 80025ac:	e005      	b.n	80025ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80025ae:	6978      	ldr	r0, [r7, #20]
 80025b0:	f001 fcdc 	bl	8003f6c <vPortFree>
 80025b4:	e001      	b.n	80025ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d017      	beq.n	80025f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80025c8:	88fa      	ldrh	r2, [r7, #6]
 80025ca:	2300      	movs	r3, #0
 80025cc:	9303      	str	r3, [sp, #12]
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	9302      	str	r3, [sp, #8]
 80025d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d4:	9301      	str	r3, [sp, #4]
 80025d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68b9      	ldr	r1, [r7, #8]
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 f80e 	bl	8002600 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80025e4:	69f8      	ldr	r0, [r7, #28]
 80025e6:	f000 f891 	bl	800270c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80025ea:	2301      	movs	r3, #1
 80025ec:	61bb      	str	r3, [r7, #24]
 80025ee:	e002      	b.n	80025f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80025f0:	f04f 33ff 	mov.w	r3, #4294967295
 80025f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80025f6:	69bb      	ldr	r3, [r7, #24]
	}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3720      	adds	r7, #32
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
 800260c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002610:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	461a      	mov	r2, r3
 8002618:	21a5      	movs	r1, #165	; 0xa5
 800261a:	f003 fb57 	bl	8005ccc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800261e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002628:	3b01      	subs	r3, #1
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	f023 0307 	bic.w	r3, r3, #7
 8002636:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	2b00      	cmp	r3, #0
 8002640:	d009      	beq.n	8002656 <prvInitialiseNewTask+0x56>
	__asm volatile
 8002642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002646:	f383 8811 	msr	BASEPRI, r3
 800264a:	f3bf 8f6f 	isb	sy
 800264e:	f3bf 8f4f 	dsb	sy
 8002652:	617b      	str	r3, [r7, #20]
}
 8002654:	bf00      	nop
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
 800265a:	e012      	b.n	8002682 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	4413      	add	r3, r2
 8002662:	7819      	ldrb	r1, [r3, #0]
 8002664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	4413      	add	r3, r2
 800266a:	3334      	adds	r3, #52	; 0x34
 800266c:	460a      	mov	r2, r1
 800266e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	4413      	add	r3, r2
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d006      	beq.n	800268a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	3301      	adds	r3, #1
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	2b0f      	cmp	r3, #15
 8002686:	d9e9      	bls.n	800265c <prvInitialiseNewTask+0x5c>
 8002688:	e000      	b.n	800268c <prvInitialiseNewTask+0x8c>
		{
			break;
 800268a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800268c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002696:	2b37      	cmp	r3, #55	; 0x37
 8002698:	d901      	bls.n	800269e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800269a:	2337      	movs	r3, #55	; 0x37
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800269e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026a2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80026a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026a8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80026aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ac:	2200      	movs	r2, #0
 80026ae:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80026b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b2:	3304      	adds	r3, #4
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff f920 	bl	80018fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80026ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026bc:	3318      	adds	r3, #24
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff f91b 	bl	80018fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80026c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80026d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80026d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026d8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80026da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026dc:	2200      	movs	r2, #0
 80026de:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80026e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	68f9      	ldr	r1, [r7, #12]
 80026ec:	69b8      	ldr	r0, [r7, #24]
 80026ee:	f001 f983 	bl	80039f8 <pxPortInitialiseStack>
 80026f2:	4602      	mov	r2, r0
 80026f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80026f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80026fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002702:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002704:	bf00      	nop
 8002706:	3720      	adds	r7, #32
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800270c:	b5b0      	push	{r4, r5, r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af02      	add	r7, sp, #8
 8002712:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002714:	f001 fa60 	bl	8003bd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002718:	4b3c      	ldr	r3, [pc, #240]	; (800280c <prvAddNewTaskToReadyList+0x100>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	3301      	adds	r3, #1
 800271e:	4a3b      	ldr	r2, [pc, #236]	; (800280c <prvAddNewTaskToReadyList+0x100>)
 8002720:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002722:	4b3b      	ldr	r3, [pc, #236]	; (8002810 <prvAddNewTaskToReadyList+0x104>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800272a:	4a39      	ldr	r2, [pc, #228]	; (8002810 <prvAddNewTaskToReadyList+0x104>)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002730:	4b36      	ldr	r3, [pc, #216]	; (800280c <prvAddNewTaskToReadyList+0x100>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d110      	bne.n	800275a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002738:	f000 fc66 	bl	8003008 <prvInitialiseTaskLists>
 800273c:	e00d      	b.n	800275a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800273e:	4b35      	ldr	r3, [pc, #212]	; (8002814 <prvAddNewTaskToReadyList+0x108>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002746:	4b32      	ldr	r3, [pc, #200]	; (8002810 <prvAddNewTaskToReadyList+0x104>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002750:	429a      	cmp	r2, r3
 8002752:	d802      	bhi.n	800275a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002754:	4a2e      	ldr	r2, [pc, #184]	; (8002810 <prvAddNewTaskToReadyList+0x104>)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800275a:	4b2f      	ldr	r3, [pc, #188]	; (8002818 <prvAddNewTaskToReadyList+0x10c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	3301      	adds	r3, #1
 8002760:	4a2d      	ldr	r2, [pc, #180]	; (8002818 <prvAddNewTaskToReadyList+0x10c>)
 8002762:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002764:	4b2c      	ldr	r3, [pc, #176]	; (8002818 <prvAddNewTaskToReadyList+0x10c>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d016      	beq.n	80027a0 <prvAddNewTaskToReadyList+0x94>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4618      	mov	r0, r3
 8002776:	f002 fff5 	bl	8005764 <SEGGER_SYSVIEW_OnTaskCreate>
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	461d      	mov	r5, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	461c      	mov	r4, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	1ae3      	subs	r3, r4, r3
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	462b      	mov	r3, r5
 800279c:	f001 fdb6 	bl	800430c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f003 f866 	bl	8005874 <SEGGER_SYSVIEW_OnTaskStartReady>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ac:	4b1b      	ldr	r3, [pc, #108]	; (800281c <prvAddNewTaskToReadyList+0x110>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d903      	bls.n	80027bc <prvAddNewTaskToReadyList+0xb0>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b8:	4a18      	ldr	r2, [pc, #96]	; (800281c <prvAddNewTaskToReadyList+0x110>)
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4a15      	ldr	r2, [pc, #84]	; (8002820 <prvAddNewTaskToReadyList+0x114>)
 80027ca:	441a      	add	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3304      	adds	r3, #4
 80027d0:	4619      	mov	r1, r3
 80027d2:	4610      	mov	r0, r2
 80027d4:	f7ff f89d 	bl	8001912 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80027d8:	f001 fa2c 	bl	8003c34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80027dc:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <prvAddNewTaskToReadyList+0x108>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00e      	beq.n	8002802 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80027e4:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <prvAddNewTaskToReadyList+0x104>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d207      	bcs.n	8002802 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80027f2:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <prvAddNewTaskToReadyList+0x118>)
 80027f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	f3bf 8f4f 	dsb	sy
 80027fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bdb0      	pop	{r4, r5, r7, pc}
 800280a:	bf00      	nop
 800280c:	20000bbc 	.word	0x20000bbc
 8002810:	200006e8 	.word	0x200006e8
 8002814:	20000bc8 	.word	0x20000bc8
 8002818:	20000bd8 	.word	0x20000bd8
 800281c:	20000bc4 	.word	0x20000bc4
 8002820:	200006ec 	.word	0x200006ec
 8002824:	e000ed04 	.word	0xe000ed04

08002828 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d01a      	beq.n	8002870 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <vTaskDelay+0x68>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d009      	beq.n	8002856 <vTaskDelay+0x2e>
	__asm volatile
 8002842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002846:	f383 8811 	msr	BASEPRI, r3
 800284a:	f3bf 8f6f 	isb	sy
 800284e:	f3bf 8f4f 	dsb	sy
 8002852:	60bb      	str	r3, [r7, #8]
}
 8002854:	bf00      	nop
			vTaskSuspendAll();
 8002856:	f000 f885 	bl	8002964 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	2023      	movs	r0, #35	; 0x23
 800285e:	f002 fa81 	bl	8004d64 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002862:	2100      	movs	r1, #0
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 fd55 	bl	8003314 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800286a:	f000 f889 	bl	8002980 <xTaskResumeAll>
 800286e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d107      	bne.n	8002886 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8002876:	4b07      	ldr	r3, [pc, #28]	; (8002894 <vTaskDelay+0x6c>)
 8002878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000be4 	.word	0x20000be4
 8002894:	e000ed04 	.word	0xe000ed04

08002898 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08a      	sub	sp, #40	; 0x28
 800289c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80028a6:	463a      	mov	r2, r7
 80028a8:	1d39      	adds	r1, r7, #4
 80028aa:	f107 0308 	add.w	r3, r7, #8
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe ffd2 	bl	8001858 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80028b4:	6839      	ldr	r1, [r7, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	9202      	str	r2, [sp, #8]
 80028bc:	9301      	str	r3, [sp, #4]
 80028be:	2300      	movs	r3, #0
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	2300      	movs	r3, #0
 80028c4:	460a      	mov	r2, r1
 80028c6:	4921      	ldr	r1, [pc, #132]	; (800294c <vTaskStartScheduler+0xb4>)
 80028c8:	4821      	ldr	r0, [pc, #132]	; (8002950 <vTaskStartScheduler+0xb8>)
 80028ca:	f7ff fdfb 	bl	80024c4 <xTaskCreateStatic>
 80028ce:	4603      	mov	r3, r0
 80028d0:	4a20      	ldr	r2, [pc, #128]	; (8002954 <vTaskStartScheduler+0xbc>)
 80028d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80028d4:	4b1f      	ldr	r3, [pc, #124]	; (8002954 <vTaskStartScheduler+0xbc>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80028dc:	2301      	movs	r3, #1
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	e001      	b.n	80028e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d102      	bne.n	80028f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80028ec:	f000 fd78 	bl	80033e0 <xTimerCreateTimerTask>
 80028f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d116      	bne.n	8002926 <vTaskStartScheduler+0x8e>
	__asm volatile
 80028f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fc:	f383 8811 	msr	BASEPRI, r3
 8002900:	f3bf 8f6f 	isb	sy
 8002904:	f3bf 8f4f 	dsb	sy
 8002908:	613b      	str	r3, [r7, #16]
}
 800290a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800290c:	4b12      	ldr	r3, [pc, #72]	; (8002958 <vTaskStartScheduler+0xc0>)
 800290e:	f04f 32ff 	mov.w	r2, #4294967295
 8002912:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002914:	4b11      	ldr	r3, [pc, #68]	; (800295c <vTaskStartScheduler+0xc4>)
 8002916:	2201      	movs	r2, #1
 8002918:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800291a:	4b11      	ldr	r3, [pc, #68]	; (8002960 <vTaskStartScheduler+0xc8>)
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002920:	f001 f8ea 	bl	8003af8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002924:	e00d      	b.n	8002942 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292c:	d109      	bne.n	8002942 <vTaskStartScheduler+0xaa>
	__asm volatile
 800292e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002932:	f383 8811 	msr	BASEPRI, r3
 8002936:	f3bf 8f6f 	isb	sy
 800293a:	f3bf 8f4f 	dsb	sy
 800293e:	60fb      	str	r3, [r7, #12]
}
 8002940:	bf00      	nop
}
 8002942:	bf00      	nop
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	08005d0c 	.word	0x08005d0c
 8002950:	08002fd9 	.word	0x08002fd9
 8002954:	20000be0 	.word	0x20000be0
 8002958:	20000bdc 	.word	0x20000bdc
 800295c:	20000bc8 	.word	0x20000bc8
 8002960:	20000bc0 	.word	0x20000bc0

08002964 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002968:	4b04      	ldr	r3, [pc, #16]	; (800297c <vTaskSuspendAll+0x18>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	3301      	adds	r3, #1
 800296e:	4a03      	ldr	r2, [pc, #12]	; (800297c <vTaskSuspendAll+0x18>)
 8002970:	6013      	str	r3, [r2, #0]
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	20000be4 	.word	0x20000be4

08002980 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800298e:	4b43      	ldr	r3, [pc, #268]	; (8002a9c <xTaskResumeAll+0x11c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <xTaskResumeAll+0x2a>
	__asm volatile
 8002996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299a:	f383 8811 	msr	BASEPRI, r3
 800299e:	f3bf 8f6f 	isb	sy
 80029a2:	f3bf 8f4f 	dsb	sy
 80029a6:	603b      	str	r3, [r7, #0]
}
 80029a8:	bf00      	nop
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80029aa:	f001 f915 	bl	8003bd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80029ae:	4b3b      	ldr	r3, [pc, #236]	; (8002a9c <xTaskResumeAll+0x11c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	4a39      	ldr	r2, [pc, #228]	; (8002a9c <xTaskResumeAll+0x11c>)
 80029b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029b8:	4b38      	ldr	r3, [pc, #224]	; (8002a9c <xTaskResumeAll+0x11c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d166      	bne.n	8002a8e <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80029c0:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <xTaskResumeAll+0x120>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d062      	beq.n	8002a8e <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029c8:	e033      	b.n	8002a32 <xTaskResumeAll+0xb2>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80029ca:	4b36      	ldr	r3, [pc, #216]	; (8002aa4 <xTaskResumeAll+0x124>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	3318      	adds	r3, #24
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fe fff6 	bl	80019c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	3304      	adds	r3, #4
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fe fff1 	bl	80019c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f002 ff43 	bl	8005874 <SEGGER_SYSVIEW_OnTaskStartReady>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f2:	4b2d      	ldr	r3, [pc, #180]	; (8002aa8 <xTaskResumeAll+0x128>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d903      	bls.n	8002a02 <xTaskResumeAll+0x82>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fe:	4a2a      	ldr	r2, [pc, #168]	; (8002aa8 <xTaskResumeAll+0x128>)
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4a27      	ldr	r2, [pc, #156]	; (8002aac <xTaskResumeAll+0x12c>)
 8002a10:	441a      	add	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	3304      	adds	r3, #4
 8002a16:	4619      	mov	r1, r3
 8002a18:	4610      	mov	r0, r2
 8002a1a:	f7fe ff7a 	bl	8001912 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a22:	4b23      	ldr	r3, [pc, #140]	; (8002ab0 <xTaskResumeAll+0x130>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d302      	bcc.n	8002a32 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8002a2c:	4b21      	ldr	r3, [pc, #132]	; (8002ab4 <xTaskResumeAll+0x134>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a32:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <xTaskResumeAll+0x124>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1c7      	bne.n	80029ca <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002a40:	f000 fbb6 	bl	80031b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002a44:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <xTaskResumeAll+0x138>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d010      	beq.n	8002a72 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002a50:	f000 f856 	bl	8002b00 <xTaskIncrementTick>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8002a5a:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <xTaskResumeAll+0x134>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1f1      	bne.n	8002a50 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8002a6c:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <xTaskResumeAll+0x138>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002a72:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <xTaskResumeAll+0x134>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002a7e:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <xTaskResumeAll+0x13c>)
 8002a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	f3bf 8f4f 	dsb	sy
 8002a8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002a8e:	f001 f8d1 	bl	8003c34 <vPortExitCritical>

	return xAlreadyYielded;
 8002a92:	68bb      	ldr	r3, [r7, #8]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	20000be4 	.word	0x20000be4
 8002aa0:	20000bbc 	.word	0x20000bbc
 8002aa4:	20000b7c 	.word	0x20000b7c
 8002aa8:	20000bc4 	.word	0x20000bc4
 8002aac:	200006ec 	.word	0x200006ec
 8002ab0:	200006e8 	.word	0x200006e8
 8002ab4:	20000bd0 	.word	0x20000bd0
 8002ab8:	20000bcc 	.word	0x20000bcc
 8002abc:	e000ed04 	.word	0xe000ed04

08002ac0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002ac6:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <xTaskGetTickCount+0x18>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002acc:	687b      	ldr	r3, [r7, #4]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	20000bc0 	.word	0x20000bc0

08002adc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ae2:	f001 f945 	bl	8003d70 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8002aea:	4b04      	ldr	r3, [pc, #16]	; (8002afc <xTaskGetTickCountFromISR+0x20>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002af0:	683b      	ldr	r3, [r7, #0]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000bc0 	.word	0x20000bc0

08002b00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b0a:	4b53      	ldr	r3, [pc, #332]	; (8002c58 <xTaskIncrementTick+0x158>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f040 8091 	bne.w	8002c36 <xTaskIncrementTick+0x136>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b14:	4b51      	ldr	r3, [pc, #324]	; (8002c5c <xTaskIncrementTick+0x15c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002b1c:	4a4f      	ldr	r2, [pc, #316]	; (8002c5c <xTaskIncrementTick+0x15c>)
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d11f      	bne.n	8002b68 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002b28:	4b4d      	ldr	r3, [pc, #308]	; (8002c60 <xTaskIncrementTick+0x160>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <xTaskIncrementTick+0x46>
	__asm volatile
 8002b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b36:	f383 8811 	msr	BASEPRI, r3
 8002b3a:	f3bf 8f6f 	isb	sy
 8002b3e:	f3bf 8f4f 	dsb	sy
 8002b42:	603b      	str	r3, [r7, #0]
}
 8002b44:	bf00      	nop
 8002b46:	4b46      	ldr	r3, [pc, #280]	; (8002c60 <xTaskIncrementTick+0x160>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	4b45      	ldr	r3, [pc, #276]	; (8002c64 <xTaskIncrementTick+0x164>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a43      	ldr	r2, [pc, #268]	; (8002c60 <xTaskIncrementTick+0x160>)
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	4a43      	ldr	r2, [pc, #268]	; (8002c64 <xTaskIncrementTick+0x164>)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	4b43      	ldr	r3, [pc, #268]	; (8002c68 <xTaskIncrementTick+0x168>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	4a41      	ldr	r2, [pc, #260]	; (8002c68 <xTaskIncrementTick+0x168>)
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	f000 fb24 	bl	80031b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002b68:	4b40      	ldr	r3, [pc, #256]	; (8002c6c <xTaskIncrementTick+0x16c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d352      	bcc.n	8002c18 <xTaskIncrementTick+0x118>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b72:	4b3b      	ldr	r3, [pc, #236]	; (8002c60 <xTaskIncrementTick+0x160>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <xTaskIncrementTick+0x80>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <xTaskIncrementTick+0x82>
 8002b80:	2300      	movs	r3, #0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d004      	beq.n	8002b90 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b86:	4b39      	ldr	r3, [pc, #228]	; (8002c6c <xTaskIncrementTick+0x16c>)
 8002b88:	f04f 32ff 	mov.w	r2, #4294967295
 8002b8c:	601a      	str	r2, [r3, #0]
					break;
 8002b8e:	e043      	b.n	8002c18 <xTaskIncrementTick+0x118>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b90:	4b33      	ldr	r3, [pc, #204]	; (8002c60 <xTaskIncrementTick+0x160>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d203      	bcs.n	8002bb0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002ba8:	4a30      	ldr	r2, [pc, #192]	; (8002c6c <xTaskIncrementTick+0x16c>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6013      	str	r3, [r2, #0]
						break;
 8002bae:	e033      	b.n	8002c18 <xTaskIncrementTick+0x118>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fe ff07 	bl	80019c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d004      	beq.n	8002bcc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	3318      	adds	r3, #24
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fe fefe 	bl	80019c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f002 fe50 	bl	8005874 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd8:	4b25      	ldr	r3, [pc, #148]	; (8002c70 <xTaskIncrementTick+0x170>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d903      	bls.n	8002be8 <xTaskIncrementTick+0xe8>
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	4a22      	ldr	r2, [pc, #136]	; (8002c70 <xTaskIncrementTick+0x170>)
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4a1f      	ldr	r2, [pc, #124]	; (8002c74 <xTaskIncrementTick+0x174>)
 8002bf6:	441a      	add	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	f7fe fe87 	bl	8001912 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c08:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <xTaskIncrementTick+0x178>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d3af      	bcc.n	8002b72 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002c12:	2301      	movs	r3, #1
 8002c14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c16:	e7ac      	b.n	8002b72 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002c18:	4b17      	ldr	r3, [pc, #92]	; (8002c78 <xTaskIncrementTick+0x178>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c1e:	4915      	ldr	r1, [pc, #84]	; (8002c74 <xTaskIncrementTick+0x174>)
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d907      	bls.n	8002c40 <xTaskIncrementTick+0x140>
			{
				xSwitchRequired = pdTRUE;
 8002c30:	2301      	movs	r3, #1
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	e004      	b.n	8002c40 <xTaskIncrementTick+0x140>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002c36:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <xTaskIncrementTick+0x17c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	4a0f      	ldr	r2, [pc, #60]	; (8002c7c <xTaskIncrementTick+0x17c>)
 8002c3e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002c40:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <xTaskIncrementTick+0x180>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <xTaskIncrementTick+0x14c>
		{
			xSwitchRequired = pdTRUE;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002c4c:	697b      	ldr	r3, [r7, #20]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000be4 	.word	0x20000be4
 8002c5c:	20000bc0 	.word	0x20000bc0
 8002c60:	20000b74 	.word	0x20000b74
 8002c64:	20000b78 	.word	0x20000b78
 8002c68:	20000bd4 	.word	0x20000bd4
 8002c6c:	20000bdc 	.word	0x20000bdc
 8002c70:	20000bc4 	.word	0x20000bc4
 8002c74:	200006ec 	.word	0x200006ec
 8002c78:	200006e8 	.word	0x200006e8
 8002c7c:	20000bcc 	.word	0x20000bcc
 8002c80:	20000bd0 	.word	0x20000bd0

08002c84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c8a:	4b30      	ldr	r3, [pc, #192]	; (8002d4c <vTaskSwitchContext+0xc8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002c92:	4b2f      	ldr	r3, [pc, #188]	; (8002d50 <vTaskSwitchContext+0xcc>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002c98:	e053      	b.n	8002d42 <vTaskSwitchContext+0xbe>
		xYieldPending = pdFALSE;
 8002c9a:	4b2d      	ldr	r3, [pc, #180]	; (8002d50 <vTaskSwitchContext+0xcc>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002ca0:	4b2c      	ldr	r3, [pc, #176]	; (8002d54 <vTaskSwitchContext+0xd0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	e00f      	b.n	8002cc8 <vTaskSwitchContext+0x44>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <vTaskSwitchContext+0x3e>
	__asm volatile
 8002cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb2:	f383 8811 	msr	BASEPRI, r3
 8002cb6:	f3bf 8f6f 	isb	sy
 8002cba:	f3bf 8f4f 	dsb	sy
 8002cbe:	607b      	str	r3, [r7, #4]
}
 8002cc0:	bf00      	nop
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	4923      	ldr	r1, [pc, #140]	; (8002d58 <vTaskSwitchContext+0xd4>)
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0e5      	beq.n	8002ca8 <vTaskSwitchContext+0x24>
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4a1c      	ldr	r2, [pc, #112]	; (8002d58 <vTaskSwitchContext+0xd4>)
 8002ce8:	4413      	add	r3, r2
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	3308      	adds	r3, #8
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d104      	bne.n	8002d0c <vTaskSwitchContext+0x88>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	605a      	str	r2, [r3, #4]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	4a12      	ldr	r2, [pc, #72]	; (8002d5c <vTaskSwitchContext+0xd8>)
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	4a0f      	ldr	r2, [pc, #60]	; (8002d54 <vTaskSwitchContext+0xd0>)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8002d1c:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <vTaskSwitchContext+0xd8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3334      	adds	r3, #52	; 0x34
 8002d22:	2205      	movs	r2, #5
 8002d24:	490e      	ldr	r1, [pc, #56]	; (8002d60 <vTaskSwitchContext+0xdc>)
 8002d26:	4618      	mov	r0, r3
 8002d28:	f002 ffb4 	bl	8005c94 <memcmp>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <vTaskSwitchContext+0xba>
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <vTaskSwitchContext+0xd8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f002 fd58 	bl	80057ec <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002d3c:	e001      	b.n	8002d42 <vTaskSwitchContext+0xbe>
		traceTASK_SWITCHED_IN();
 8002d3e:	f002 fcf5 	bl	800572c <SEGGER_SYSVIEW_OnIdle>
}
 8002d42:	bf00      	nop
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000be4 	.word	0x20000be4
 8002d50:	20000bd0 	.word	0x20000bd0
 8002d54:	20000bc4 	.word	0x20000bc4
 8002d58:	200006ec 	.word	0x200006ec
 8002d5c:	200006e8 	.word	0x200006e8
 8002d60:	08005d0c 	.word	0x08005d0c

08002d64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d109      	bne.n	8002d88 <vTaskPlaceOnEventList+0x24>
	__asm volatile
 8002d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d78:	f383 8811 	msr	BASEPRI, r3
 8002d7c:	f3bf 8f6f 	isb	sy
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	60fb      	str	r3, [r7, #12]
}
 8002d86:	bf00      	nop

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d88:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <vTaskPlaceOnEventList+0x44>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3318      	adds	r3, #24
 8002d8e:	4619      	mov	r1, r3
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7fe fde1 	bl	8001958 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d96:	2101      	movs	r1, #1
 8002d98:	6838      	ldr	r0, [r7, #0]
 8002d9a:	f000 fabb 	bl	8003314 <prvAddCurrentTaskToDelayedList>
}
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	200006e8 	.word	0x200006e8

08002dac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <vTaskPlaceOnEventListRestricted+0x26>
	__asm volatile
 8002dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc2:	f383 8811 	msr	BASEPRI, r3
 8002dc6:	f3bf 8f6f 	isb	sy
 8002dca:	f3bf 8f4f 	dsb	sy
 8002dce:	617b      	str	r3, [r7, #20]
}
 8002dd0:	bf00      	nop

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <vTaskPlaceOnEventListRestricted+0x58>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	3318      	adds	r3, #24
 8002dd8:	4619      	mov	r1, r3
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f7fe fd99 	bl	8001912 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8002de6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002dec:	2024      	movs	r0, #36	; 0x24
 8002dee:	f001 ff9b 	bl	8004d28 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	68b8      	ldr	r0, [r7, #8]
 8002df6:	f000 fa8d 	bl	8003314 <prvAddCurrentTaskToDelayedList>
	}
 8002dfa:	bf00      	nop
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	200006e8 	.word	0x200006e8

08002e08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d109      	bne.n	8002e32 <xTaskRemoveFromEventList+0x2a>
	__asm volatile
 8002e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e22:	f383 8811 	msr	BASEPRI, r3
 8002e26:	f3bf 8f6f 	isb	sy
 8002e2a:	f3bf 8f4f 	dsb	sy
 8002e2e:	60fb      	str	r3, [r7, #12]
}
 8002e30:	bf00      	nop
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	3318      	adds	r3, #24
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe fdc6 	bl	80019c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e3c:	4b1f      	ldr	r3, [pc, #124]	; (8002ebc <xTaskRemoveFromEventList+0xb4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d121      	bne.n	8002e88 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	3304      	adds	r3, #4
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fe fdbd 	bl	80019c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f002 fd0f 	bl	8005874 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5a:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <xTaskRemoveFromEventList+0xb8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d903      	bls.n	8002e6a <xTaskRemoveFromEventList+0x62>
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	4a16      	ldr	r2, [pc, #88]	; (8002ec0 <xTaskRemoveFromEventList+0xb8>)
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4a13      	ldr	r2, [pc, #76]	; (8002ec4 <xTaskRemoveFromEventList+0xbc>)
 8002e78:	441a      	add	r2, r3
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4610      	mov	r0, r2
 8002e82:	f7fe fd46 	bl	8001912 <vListInsertEnd>
 8002e86:	e005      	b.n	8002e94 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	3318      	adds	r3, #24
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	480e      	ldr	r0, [pc, #56]	; (8002ec8 <xTaskRemoveFromEventList+0xc0>)
 8002e90:	f7fe fd3f 	bl	8001912 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e98:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <xTaskRemoveFromEventList+0xc4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d905      	bls.n	8002eae <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002ea6:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <xTaskRemoveFromEventList+0xc8>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	e001      	b.n	8002eb2 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002eb2:	697b      	ldr	r3, [r7, #20]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	20000be4 	.word	0x20000be4
 8002ec0:	20000bc4 	.word	0x20000bc4
 8002ec4:	200006ec 	.word	0x200006ec
 8002ec8:	20000b7c 	.word	0x20000b7c
 8002ecc:	200006e8 	.word	0x200006e8
 8002ed0:	20000bd0 	.word	0x20000bd0

08002ed4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002edc:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <vTaskInternalSetTimeOutState+0x24>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <vTaskInternalSetTimeOutState+0x28>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	605a      	str	r2, [r3, #4]
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000bd4 	.word	0x20000bd4
 8002efc:	20000bc0 	.word	0x20000bc0

08002f00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d109      	bne.n	8002f24 <xTaskCheckForTimeOut+0x24>
	__asm volatile
 8002f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	613b      	str	r3, [r7, #16]
}
 8002f22:	bf00      	nop
	configASSERT( pxTicksToWait );
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d109      	bne.n	8002f3e <xTaskCheckForTimeOut+0x3e>
	__asm volatile
 8002f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	60fb      	str	r3, [r7, #12]
}
 8002f3c:	bf00      	nop

	taskENTER_CRITICAL();
 8002f3e:	f000 fe4b 	bl	8003bd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002f42:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <xTaskCheckForTimeOut+0xb8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5a:	d102      	bne.n	8002f62 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61fb      	str	r3, [r7, #28]
 8002f60:	e023      	b.n	8002faa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <xTaskCheckForTimeOut+0xbc>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d007      	beq.n	8002f7e <xTaskCheckForTimeOut+0x7e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d302      	bcc.n	8002f7e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	61fb      	str	r3, [r7, #28]
 8002f7c:	e015      	b.n	8002faa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d20b      	bcs.n	8002fa0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	1ad2      	subs	r2, r2, r3
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff ff9d 	bl	8002ed4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
 8002f9e:	e004      	b.n	8002faa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002faa:	f000 fe43 	bl	8003c34 <vPortExitCritical>

	return xReturn;
 8002fae:	69fb      	ldr	r3, [r7, #28]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3720      	adds	r7, #32
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	20000bc0 	.word	0x20000bc0
 8002fbc:	20000bd4 	.word	0x20000bd4

08002fc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <vTaskMissedYield+0x14>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]
}
 8002fca:	bf00      	nop
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20000bd0 	.word	0x20000bd0

08002fd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002fe0:	f000 f852 	bl	8003088 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002fe4:	4b06      	ldr	r3, [pc, #24]	; (8003000 <prvIdleTask+0x28>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d9f9      	bls.n	8002fe0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002fec:	4b05      	ldr	r3, [pc, #20]	; (8003004 <prvIdleTask+0x2c>)
 8002fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002ffc:	e7f0      	b.n	8002fe0 <prvIdleTask+0x8>
 8002ffe:	bf00      	nop
 8003000:	200006ec 	.word	0x200006ec
 8003004:	e000ed04 	.word	0xe000ed04

08003008 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800300e:	2300      	movs	r3, #0
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	e00c      	b.n	800302e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4a12      	ldr	r2, [pc, #72]	; (8003068 <prvInitialiseTaskLists+0x60>)
 8003020:	4413      	add	r3, r2
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe fc4a 	bl	80018bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3301      	adds	r3, #1
 800302c:	607b      	str	r3, [r7, #4]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b37      	cmp	r3, #55	; 0x37
 8003032:	d9ef      	bls.n	8003014 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003034:	480d      	ldr	r0, [pc, #52]	; (800306c <prvInitialiseTaskLists+0x64>)
 8003036:	f7fe fc41 	bl	80018bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800303a:	480d      	ldr	r0, [pc, #52]	; (8003070 <prvInitialiseTaskLists+0x68>)
 800303c:	f7fe fc3e 	bl	80018bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003040:	480c      	ldr	r0, [pc, #48]	; (8003074 <prvInitialiseTaskLists+0x6c>)
 8003042:	f7fe fc3b 	bl	80018bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003046:	480c      	ldr	r0, [pc, #48]	; (8003078 <prvInitialiseTaskLists+0x70>)
 8003048:	f7fe fc38 	bl	80018bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800304c:	480b      	ldr	r0, [pc, #44]	; (800307c <prvInitialiseTaskLists+0x74>)
 800304e:	f7fe fc35 	bl	80018bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003052:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <prvInitialiseTaskLists+0x78>)
 8003054:	4a05      	ldr	r2, [pc, #20]	; (800306c <prvInitialiseTaskLists+0x64>)
 8003056:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003058:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <prvInitialiseTaskLists+0x7c>)
 800305a:	4a05      	ldr	r2, [pc, #20]	; (8003070 <prvInitialiseTaskLists+0x68>)
 800305c:	601a      	str	r2, [r3, #0]
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	200006ec 	.word	0x200006ec
 800306c:	20000b4c 	.word	0x20000b4c
 8003070:	20000b60 	.word	0x20000b60
 8003074:	20000b7c 	.word	0x20000b7c
 8003078:	20000b90 	.word	0x20000b90
 800307c:	20000ba8 	.word	0x20000ba8
 8003080:	20000b74 	.word	0x20000b74
 8003084:	20000b78 	.word	0x20000b78

08003088 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800308e:	e019      	b.n	80030c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003090:	f000 fda2 	bl	8003bd8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003094:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <prvCheckTasksWaitingTermination+0x50>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3304      	adds	r3, #4
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fe fc91 	bl	80019c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80030a6:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <prvCheckTasksWaitingTermination+0x54>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	4a0b      	ldr	r2, [pc, #44]	; (80030dc <prvCheckTasksWaitingTermination+0x54>)
 80030ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <prvCheckTasksWaitingTermination+0x58>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3b01      	subs	r3, #1
 80030b6:	4a0a      	ldr	r2, [pc, #40]	; (80030e0 <prvCheckTasksWaitingTermination+0x58>)
 80030b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80030ba:	f000 fdbb 	bl	8003c34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f848 	bl	8003154 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030c4:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <prvCheckTasksWaitingTermination+0x58>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1e1      	bne.n	8003090 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80030cc:	bf00      	nop
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20000b90 	.word	0x20000b90
 80030dc:	20000bbc 	.word	0x20000bbc
 80030e0:	20000ba4 	.word	0x20000ba4

080030e4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80030f0:	e005      	b.n	80030fe <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3301      	adds	r3, #1
 80030f6:	607b      	str	r3, [r7, #4]
			ulCount++;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	3301      	adds	r3, #1
 80030fc:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2ba5      	cmp	r3, #165	; 0xa5
 8003104:	d0f5      	beq.n	80030f2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	089b      	lsrs	r3, r3, #2
 800310a:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	b29b      	uxth	r3, r3
	}
 8003110:	4618      	mov	r0, r3
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr
	...

0800311c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d102      	bne.n	8003130 <uxTaskGetStackHighWaterMark+0x14>
 800312a:	4b09      	ldr	r3, [pc, #36]	; (8003150 <uxTaskGetStackHighWaterMark+0x34>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	e000      	b.n	8003132 <uxTaskGetStackHighWaterMark+0x16>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800313a:	6938      	ldr	r0, [r7, #16]
 800313c:	f7ff ffd2 	bl	80030e4 <prvTaskCheckFreeStackSpace>
 8003140:	4603      	mov	r3, r0
 8003142:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8003144:	68fb      	ldr	r3, [r7, #12]
	}
 8003146:	4618      	mov	r0, r3
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	200006e8 	.word	0x200006e8

08003154 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003162:	2b00      	cmp	r3, #0
 8003164:	d108      	bne.n	8003178 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fefe 	bl	8003f6c <vPortFree>
				vPortFree( pxTCB );
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fefb 	bl	8003f6c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003176:	e017      	b.n	80031a8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800317e:	2b01      	cmp	r3, #1
 8003180:	d103      	bne.n	800318a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fef2 	bl	8003f6c <vPortFree>
	}
 8003188:	e00e      	b.n	80031a8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003190:	2b02      	cmp	r3, #2
 8003192:	d009      	beq.n	80031a8 <prvDeleteTCB+0x54>
	__asm volatile
 8003194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003198:	f383 8811 	msr	BASEPRI, r3
 800319c:	f3bf 8f6f 	isb	sy
 80031a0:	f3bf 8f4f 	dsb	sy
 80031a4:	60fb      	str	r3, [r7, #12]
}
 80031a6:	bf00      	nop
	}
 80031a8:	bf00      	nop
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031b6:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <prvResetNextTaskUnblockTime+0x40>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <prvResetNextTaskUnblockTime+0x14>
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <prvResetNextTaskUnblockTime+0x16>
 80031c4:	2300      	movs	r3, #0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d004      	beq.n	80031d4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80031ca:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <prvResetNextTaskUnblockTime+0x44>)
 80031cc:	f04f 32ff 	mov.w	r2, #4294967295
 80031d0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80031d2:	e008      	b.n	80031e6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <prvResetNextTaskUnblockTime+0x40>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	4a04      	ldr	r2, [pc, #16]	; (80031f4 <prvResetNextTaskUnblockTime+0x44>)
 80031e4:	6013      	str	r3, [r2, #0]
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr
 80031f0:	20000b74 	.word	0x20000b74
 80031f4:	20000bdc 	.word	0x20000bdc

080031f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80031fe:	4b0b      	ldr	r3, [pc, #44]	; (800322c <xTaskGetSchedulerState+0x34>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d102      	bne.n	800320c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003206:	2301      	movs	r3, #1
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	e008      	b.n	800321e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800320c:	4b08      	ldr	r3, [pc, #32]	; (8003230 <xTaskGetSchedulerState+0x38>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d102      	bne.n	800321a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003214:	2302      	movs	r3, #2
 8003216:	607b      	str	r3, [r7, #4]
 8003218:	e001      	b.n	800321e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800321a:	2300      	movs	r3, #0
 800321c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800321e:	687b      	ldr	r3, [r7, #4]
	}
 8003220:	4618      	mov	r0, r3
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	20000bc8 	.word	0x20000bc8
 8003230:	20000be4 	.word	0x20000be4

08003234 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d059      	beq.n	80032fe <xTaskPriorityDisinherit+0xca>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800324a:	4b2f      	ldr	r3, [pc, #188]	; (8003308 <xTaskPriorityDisinherit+0xd4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	429a      	cmp	r2, r3
 8003252:	d009      	beq.n	8003268 <xTaskPriorityDisinherit+0x34>
	__asm volatile
 8003254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003258:	f383 8811 	msr	BASEPRI, r3
 800325c:	f3bf 8f6f 	isb	sy
 8003260:	f3bf 8f4f 	dsb	sy
 8003264:	60fb      	str	r3, [r7, #12]
}
 8003266:	bf00      	nop
			configASSERT( pxTCB->uxMutexesHeld );
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326c:	2b00      	cmp	r3, #0
 800326e:	d109      	bne.n	8003284 <xTaskPriorityDisinherit+0x50>
	__asm volatile
 8003270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003274:	f383 8811 	msr	BASEPRI, r3
 8003278:	f3bf 8f6f 	isb	sy
 800327c:	f3bf 8f4f 	dsb	sy
 8003280:	60bb      	str	r3, [r7, #8]
}
 8003282:	bf00      	nop
			( pxTCB->uxMutexesHeld )--;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003288:	1e5a      	subs	r2, r3, #1
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003296:	429a      	cmp	r2, r3
 8003298:	d031      	beq.n	80032fe <xTaskPriorityDisinherit+0xca>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d12d      	bne.n	80032fe <xTaskPriorityDisinherit+0xca>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	3304      	adds	r3, #4
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe fb8e 	bl	80019c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4619      	mov	r1, r3
 80032b0:	204a      	movs	r0, #74	; 0x4a
 80032b2:	f001 fd57 	bl	8004d64 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ce:	4b0f      	ldr	r3, [pc, #60]	; (800330c <xTaskPriorityDisinherit+0xd8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d903      	bls.n	80032de <xTaskPriorityDisinherit+0xaa>
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	4a0c      	ldr	r2, [pc, #48]	; (800330c <xTaskPriorityDisinherit+0xd8>)
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4a09      	ldr	r2, [pc, #36]	; (8003310 <xTaskPriorityDisinherit+0xdc>)
 80032ec:	441a      	add	r2, r3
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	3304      	adds	r3, #4
 80032f2:	4619      	mov	r1, r3
 80032f4:	4610      	mov	r0, r2
 80032f6:	f7fe fb0c 	bl	8001912 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80032fa:	2301      	movs	r3, #1
 80032fc:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80032fe:	697b      	ldr	r3, [r7, #20]
	}
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	200006e8 	.word	0x200006e8
 800330c:	20000bc4 	.word	0x20000bc4
 8003310:	200006ec 	.word	0x200006ec

08003314 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800331e:	4b2a      	ldr	r3, [pc, #168]	; (80033c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003324:	4b29      	ldr	r3, [pc, #164]	; (80033cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	3304      	adds	r3, #4
 800332a:	4618      	mov	r0, r3
 800332c:	f7fe fb4c 	bl	80019c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003336:	d110      	bne.n	800335a <prvAddCurrentTaskToDelayedList+0x46>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00d      	beq.n	800335a <prvAddCurrentTaskToDelayedList+0x46>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800333e:	4b23      	ldr	r3, [pc, #140]	; (80033cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	211b      	movs	r1, #27
 8003344:	4618      	mov	r0, r3
 8003346:	f002 fad9 	bl	80058fc <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800334a:	4b20      	ldr	r3, [pc, #128]	; (80033cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3304      	adds	r3, #4
 8003350:	4619      	mov	r1, r3
 8003352:	481f      	ldr	r0, [pc, #124]	; (80033d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003354:	f7fe fadd 	bl	8001912 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003358:	e032      	b.n	80033c0 <prvAddCurrentTaskToDelayedList+0xac>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4413      	add	r3, r2
 8003360:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003362:	4b1a      	ldr	r3, [pc, #104]	; (80033cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	429a      	cmp	r2, r3
 8003370:	d20f      	bcs.n	8003392 <prvAddCurrentTaskToDelayedList+0x7e>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003372:	4b16      	ldr	r3, [pc, #88]	; (80033cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2104      	movs	r1, #4
 8003378:	4618      	mov	r0, r3
 800337a:	f002 fabf 	bl	80058fc <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800337e:	4b15      	ldr	r3, [pc, #84]	; (80033d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	4b12      	ldr	r3, [pc, #72]	; (80033cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3304      	adds	r3, #4
 8003388:	4619      	mov	r1, r3
 800338a:	4610      	mov	r0, r2
 800338c:	f7fe fae4 	bl	8001958 <vListInsert>
}
 8003390:	e016      	b.n	80033c0 <prvAddCurrentTaskToDelayedList+0xac>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8003392:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2104      	movs	r1, #4
 8003398:	4618      	mov	r0, r3
 800339a:	f002 faaf 	bl	80058fc <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800339e:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <prvAddCurrentTaskToDelayedList+0xb8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	3304      	adds	r3, #4
 80033a8:	4619      	mov	r1, r3
 80033aa:	4610      	mov	r0, r2
 80033ac:	f7fe fad4 	bl	8001958 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033b0:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d202      	bcs.n	80033c0 <prvAddCurrentTaskToDelayedList+0xac>
					xNextTaskUnblockTime = xTimeToWake;
 80033ba:	4a08      	ldr	r2, [pc, #32]	; (80033dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	6013      	str	r3, [r2, #0]
}
 80033c0:	bf00      	nop
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20000bc0 	.word	0x20000bc0
 80033cc:	200006e8 	.word	0x200006e8
 80033d0:	20000ba8 	.word	0x20000ba8
 80033d4:	20000b78 	.word	0x20000b78
 80033d8:	20000b74 	.word	0x20000b74
 80033dc:	20000bdc 	.word	0x20000bdc

080033e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08a      	sub	sp, #40	; 0x28
 80033e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80033ea:	f000 fac5 	bl	8003978 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80033ee:	4b1c      	ldr	r3, [pc, #112]	; (8003460 <xTimerCreateTimerTask+0x80>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d021      	beq.n	800343a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80033fe:	1d3a      	adds	r2, r7, #4
 8003400:	f107 0108 	add.w	r1, r7, #8
 8003404:	f107 030c 	add.w	r3, r7, #12
 8003408:	4618      	mov	r0, r3
 800340a:	f7fe fa3d 	bl	8001888 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	9202      	str	r2, [sp, #8]
 8003416:	9301      	str	r3, [sp, #4]
 8003418:	2302      	movs	r3, #2
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	2300      	movs	r3, #0
 800341e:	460a      	mov	r2, r1
 8003420:	4910      	ldr	r1, [pc, #64]	; (8003464 <xTimerCreateTimerTask+0x84>)
 8003422:	4811      	ldr	r0, [pc, #68]	; (8003468 <xTimerCreateTimerTask+0x88>)
 8003424:	f7ff f84e 	bl	80024c4 <xTaskCreateStatic>
 8003428:	4603      	mov	r3, r0
 800342a:	4a10      	ldr	r2, [pc, #64]	; (800346c <xTimerCreateTimerTask+0x8c>)
 800342c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800342e:	4b0f      	ldr	r3, [pc, #60]	; (800346c <xTimerCreateTimerTask+0x8c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003436:	2301      	movs	r3, #1
 8003438:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d109      	bne.n	8003454 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8003440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003444:	f383 8811 	msr	BASEPRI, r3
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	613b      	str	r3, [r7, #16]
}
 8003452:	bf00      	nop
	return xReturn;
 8003454:	697b      	ldr	r3, [r7, #20]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000c18 	.word	0x20000c18
 8003464:	08005d14 	.word	0x08005d14
 8003468:	08003589 	.word	0x08003589
 800346c:	20000c1c 	.word	0x20000c1c

08003470 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08a      	sub	sp, #40	; 0x28
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
 800347c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800347e:	2300      	movs	r3, #0
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d109      	bne.n	800349c <xTimerGenericCommand+0x2c>
	__asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	623b      	str	r3, [r7, #32]
}
 800349a:	bf00      	nop

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800349c:	4b19      	ldr	r3, [pc, #100]	; (8003504 <xTimerGenericCommand+0x94>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d02a      	beq.n	80034fa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b05      	cmp	r3, #5
 80034b4:	dc18      	bgt.n	80034e8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80034b6:	f7ff fe9f 	bl	80031f8 <xTaskGetSchedulerState>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d109      	bne.n	80034d4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80034c0:	4b10      	ldr	r3, [pc, #64]	; (8003504 <xTimerGenericCommand+0x94>)
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	f107 0110 	add.w	r1, r7, #16
 80034c8:	2300      	movs	r3, #0
 80034ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034cc:	f7fe fbaa 	bl	8001c24 <xQueueGenericSend>
 80034d0:	6278      	str	r0, [r7, #36]	; 0x24
 80034d2:	e012      	b.n	80034fa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <xTimerGenericCommand+0x94>)
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	f107 0110 	add.w	r1, r7, #16
 80034dc:	2300      	movs	r3, #0
 80034de:	2200      	movs	r2, #0
 80034e0:	f7fe fba0 	bl	8001c24 <xQueueGenericSend>
 80034e4:	6278      	str	r0, [r7, #36]	; 0x24
 80034e6:	e008      	b.n	80034fa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80034e8:	4b06      	ldr	r3, [pc, #24]	; (8003504 <xTimerGenericCommand+0x94>)
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	f107 0110 	add.w	r1, r7, #16
 80034f0:	2300      	movs	r3, #0
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	f7fe fcb8 	bl	8001e68 <xQueueGenericSendFromISR>
 80034f8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3728      	adds	r7, #40	; 0x28
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	20000c18 	.word	0x20000c18

08003508 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af02      	add	r7, sp, #8
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003512:	4b1c      	ldr	r3, [pc, #112]	; (8003584 <prvProcessExpiredTimer+0x7c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	3304      	adds	r3, #4
 8003520:	4618      	mov	r0, r3
 8003522:	f7fe fa51 	bl	80019c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d121      	bne.n	8003572 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	699a      	ldr	r2, [r3, #24]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	18d1      	adds	r1, r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	6978      	ldr	r0, [r7, #20]
 800353c:	f000 f8c8 	bl	80036d0 <prvInsertTimerInActiveList>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d015      	beq.n	8003572 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003546:	2300      	movs	r3, #0
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2300      	movs	r3, #0
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	2100      	movs	r1, #0
 8003550:	6978      	ldr	r0, [r7, #20]
 8003552:	f7ff ff8d 	bl	8003470 <xTimerGenericCommand>
 8003556:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d109      	bne.n	8003572 <prvProcessExpiredTimer+0x6a>
	__asm volatile
 800355e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003562:	f383 8811 	msr	BASEPRI, r3
 8003566:	f3bf 8f6f 	isb	sy
 800356a:	f3bf 8f4f 	dsb	sy
 800356e:	60fb      	str	r3, [r7, #12]
}
 8003570:	bf00      	nop
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	6978      	ldr	r0, [r7, #20]
 8003578:	4798      	blx	r3
}
 800357a:	bf00      	nop
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20000c10 	.word	0x20000c10

08003588 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003590:	f107 0308 	add.w	r3, r7, #8
 8003594:	4618      	mov	r0, r3
 8003596:	f000 f857 	bl	8003648 <prvGetNextExpireTime>
 800359a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	4619      	mov	r1, r3
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f803 	bl	80035ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80035a6:	f000 f8d5 	bl	8003754 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035aa:	e7f1      	b.n	8003590 <prvTimerTask+0x8>

080035ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80035b6:	f7ff f9d5 	bl	8002964 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80035ba:	f107 0308 	add.w	r3, r7, #8
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 f866 	bl	8003690 <prvSampleTimeNow>
 80035c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d130      	bne.n	800362e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10a      	bne.n	80035e8 <prvProcessTimerOrBlockTask+0x3c>
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d806      	bhi.n	80035e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80035da:	f7ff f9d1 	bl	8002980 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80035de:	68f9      	ldr	r1, [r7, #12]
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff ff91 	bl	8003508 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80035e6:	e024      	b.n	8003632 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d008      	beq.n	8003600 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80035ee:	4b13      	ldr	r3, [pc, #76]	; (800363c <prvProcessTimerOrBlockTask+0x90>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	bf0c      	ite	eq
 80035f8:	2301      	moveq	r3, #1
 80035fa:	2300      	movne	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003600:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <prvProcessTimerOrBlockTask+0x94>)
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	4619      	mov	r1, r3
 800360e:	f7fe ff25 	bl	800245c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003612:	f7ff f9b5 	bl	8002980 <xTaskResumeAll>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10a      	bne.n	8003632 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800361c:	4b09      	ldr	r3, [pc, #36]	; (8003644 <prvProcessTimerOrBlockTask+0x98>)
 800361e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	f3bf 8f6f 	isb	sy
}
 800362c:	e001      	b.n	8003632 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800362e:	f7ff f9a7 	bl	8002980 <xTaskResumeAll>
}
 8003632:	bf00      	nop
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	20000c14 	.word	0x20000c14
 8003640:	20000c18 	.word	0x20000c18
 8003644:	e000ed04 	.word	0xe000ed04

08003648 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003650:	4b0e      	ldr	r3, [pc, #56]	; (800368c <prvGetNextExpireTime+0x44>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	bf0c      	ite	eq
 800365a:	2301      	moveq	r3, #1
 800365c:	2300      	movne	r3, #0
 800365e:	b2db      	uxtb	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d105      	bne.n	800367a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800366e:	4b07      	ldr	r3, [pc, #28]	; (800368c <prvGetNextExpireTime+0x44>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	e001      	b.n	800367e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800367e:	68fb      	ldr	r3, [r7, #12]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	bc80      	pop	{r7}
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	20000c10 	.word	0x20000c10

08003690 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003698:	f7ff fa12 	bl	8002ac0 <xTaskGetTickCount>
 800369c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800369e:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <prvSampleTimeNow+0x3c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d205      	bcs.n	80036b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80036a8:	f000 f906 	bl	80038b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	e002      	b.n	80036ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80036ba:	4a04      	ldr	r2, [pc, #16]	; (80036cc <prvSampleTimeNow+0x3c>)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80036c0:	68fb      	ldr	r3, [r7, #12]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000c20 	.word	0x20000c20

080036d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d812      	bhi.n	800371c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	1ad2      	subs	r2, r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	429a      	cmp	r2, r3
 8003702:	d302      	bcc.n	800370a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003704:	2301      	movs	r3, #1
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	e01b      	b.n	8003742 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800370a:	4b10      	ldr	r3, [pc, #64]	; (800374c <prvInsertTimerInActiveList+0x7c>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	3304      	adds	r3, #4
 8003712:	4619      	mov	r1, r3
 8003714:	4610      	mov	r0, r2
 8003716:	f7fe f91f 	bl	8001958 <vListInsert>
 800371a:	e012      	b.n	8003742 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d206      	bcs.n	8003732 <prvInsertTimerInActiveList+0x62>
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d302      	bcc.n	8003732 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800372c:	2301      	movs	r3, #1
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	e007      	b.n	8003742 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003732:	4b07      	ldr	r3, [pc, #28]	; (8003750 <prvInsertTimerInActiveList+0x80>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	3304      	adds	r3, #4
 800373a:	4619      	mov	r1, r3
 800373c:	4610      	mov	r0, r2
 800373e:	f7fe f90b 	bl	8001958 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003742:	697b      	ldr	r3, [r7, #20]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20000c14 	.word	0x20000c14
 8003750:	20000c10 	.word	0x20000c10

08003754 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08e      	sub	sp, #56	; 0x38
 8003758:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800375a:	e09a      	b.n	8003892 <prvProcessReceivedCommands+0x13e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	da17      	bge.n	8003792 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003762:	1d3b      	adds	r3, r7, #4
 8003764:	3304      	adds	r3, #4
 8003766:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376a:	2b00      	cmp	r3, #0
 800376c:	d109      	bne.n	8003782 <prvProcessReceivedCommands+0x2e>
	__asm volatile
 800376e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	61fb      	str	r3, [r7, #28]
}
 8003780:	bf00      	nop

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003788:	6850      	ldr	r0, [r2, #4]
 800378a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800378c:	6892      	ldr	r2, [r2, #8]
 800378e:	4611      	mov	r1, r2
 8003790:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	db7b      	blt.n	8003890 <prvProcessReceivedCommands+0x13c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800379c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d004      	beq.n	80037ae <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a6:	3304      	adds	r3, #4
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fe f90d 	bl	80019c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80037ae:	463b      	mov	r3, r7
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff ff6d 	bl	8003690 <prvSampleTimeNow>
 80037b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b09      	cmp	r3, #9
 80037bc:	d869      	bhi.n	8003892 <prvProcessReceivedCommands+0x13e>
 80037be:	a201      	add	r2, pc, #4	; (adr r2, 80037c4 <prvProcessReceivedCommands+0x70>)
 80037c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c4:	080037ed 	.word	0x080037ed
 80037c8:	080037ed 	.word	0x080037ed
 80037cc:	080037ed 	.word	0x080037ed
 80037d0:	08003893 	.word	0x08003893
 80037d4:	08003849 	.word	0x08003849
 80037d8:	0800387f 	.word	0x0800387f
 80037dc:	080037ed 	.word	0x080037ed
 80037e0:	080037ed 	.word	0x080037ed
 80037e4:	08003893 	.word	0x08003893
 80037e8:	08003849 	.word	0x08003849
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	18d1      	adds	r1, r2, r3
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037fa:	f7ff ff69 	bl	80036d0 <prvInsertTimerInActiveList>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d046      	beq.n	8003892 <prvProcessReceivedCommands+0x13e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800380a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800380c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d13e      	bne.n	8003892 <prvProcessReceivedCommands+0x13e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	441a      	add	r2, r3
 800381c:	2300      	movs	r3, #0
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	2300      	movs	r3, #0
 8003822:	2100      	movs	r1, #0
 8003824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003826:	f7ff fe23 	bl	8003470 <xTimerGenericCommand>
 800382a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d12f      	bne.n	8003892 <prvProcessReceivedCommands+0x13e>
	__asm volatile
 8003832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003836:	f383 8811 	msr	BASEPRI, r3
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	61bb      	str	r3, [r7, #24]
}
 8003844:	bf00      	nop
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 8003846:	e024      	b.n	8003892 <prvProcessReceivedCommands+0x13e>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <prvProcessReceivedCommands+0x116>
	__asm volatile
 8003856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385a:	f383 8811 	msr	BASEPRI, r3
 800385e:	f3bf 8f6f 	isb	sy
 8003862:	f3bf 8f4f 	dsb	sy
 8003866:	617b      	str	r3, [r7, #20]
}
 8003868:	bf00      	nop
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800386a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386c:	699a      	ldr	r2, [r3, #24]
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	18d1      	adds	r1, r2, r3
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003876:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003878:	f7ff ff2a 	bl	80036d0 <prvInsertTimerInActiveList>
					break;
 800387c:	e009      	b.n	8003892 <prvProcessReceivedCommands+0x13e>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003880:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003884:	2b00      	cmp	r3, #0
 8003886:	d104      	bne.n	8003892 <prvProcessReceivedCommands+0x13e>
						{
							vPortFree( pxTimer );
 8003888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800388a:	f000 fb6f 	bl	8003f6c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800388e:	e000      	b.n	8003892 <prvProcessReceivedCommands+0x13e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003890:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003892:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <prvProcessReceivedCommands+0x160>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	1d39      	adds	r1, r7, #4
 8003898:	2200      	movs	r2, #0
 800389a:	4618      	mov	r0, r3
 800389c:	f7fe fb8e 	bl	8001fbc <xQueueReceive>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f47f af5a 	bne.w	800375c <prvProcessReceivedCommands+0x8>
	}
}
 80038a8:	bf00      	nop
 80038aa:	bf00      	nop
 80038ac:	3730      	adds	r7, #48	; 0x30
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20000c18 	.word	0x20000c18

080038b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80038be:	e044      	b.n	800394a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038c0:	4b2b      	ldr	r3, [pc, #172]	; (8003970 <prvSwitchTimerLists+0xb8>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038ca:	4b29      	ldr	r3, [pc, #164]	; (8003970 <prvSwitchTimerLists+0xb8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	3304      	adds	r3, #4
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fe f875 	bl	80019c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d12d      	bne.n	800394a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4413      	add	r3, r2
 80038f6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d90e      	bls.n	800391e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800390c:	4b18      	ldr	r3, [pc, #96]	; (8003970 <prvSwitchTimerLists+0xb8>)
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	3304      	adds	r3, #4
 8003914:	4619      	mov	r1, r3
 8003916:	4610      	mov	r0, r2
 8003918:	f7fe f81e 	bl	8001958 <vListInsert>
 800391c:	e015      	b.n	800394a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800391e:	2300      	movs	r3, #0
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	2300      	movs	r3, #0
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	2100      	movs	r1, #0
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f7ff fda1 	bl	8003470 <xTimerGenericCommand>
 800392e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d109      	bne.n	800394a <prvSwitchTimerLists+0x92>
	__asm volatile
 8003936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393a:	f383 8811 	msr	BASEPRI, r3
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	603b      	str	r3, [r7, #0]
}
 8003948:	bf00      	nop
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800394a:	4b09      	ldr	r3, [pc, #36]	; (8003970 <prvSwitchTimerLists+0xb8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1b5      	bne.n	80038c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003954:	4b06      	ldr	r3, [pc, #24]	; (8003970 <prvSwitchTimerLists+0xb8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <prvSwitchTimerLists+0xbc>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a04      	ldr	r2, [pc, #16]	; (8003970 <prvSwitchTimerLists+0xb8>)
 8003960:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003962:	4a04      	ldr	r2, [pc, #16]	; (8003974 <prvSwitchTimerLists+0xbc>)
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	6013      	str	r3, [r2, #0]
}
 8003968:	bf00      	nop
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	20000c10 	.word	0x20000c10
 8003974:	20000c14 	.word	0x20000c14

08003978 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800397e:	f000 f92b 	bl	8003bd8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003982:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <prvCheckForValidListAndQueue+0x60>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d120      	bne.n	80039cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800398a:	4814      	ldr	r0, [pc, #80]	; (80039dc <prvCheckForValidListAndQueue+0x64>)
 800398c:	f7fd ff96 	bl	80018bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003990:	4813      	ldr	r0, [pc, #76]	; (80039e0 <prvCheckForValidListAndQueue+0x68>)
 8003992:	f7fd ff93 	bl	80018bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003996:	4b13      	ldr	r3, [pc, #76]	; (80039e4 <prvCheckForValidListAndQueue+0x6c>)
 8003998:	4a10      	ldr	r2, [pc, #64]	; (80039dc <prvCheckForValidListAndQueue+0x64>)
 800399a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800399c:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <prvCheckForValidListAndQueue+0x70>)
 800399e:	4a10      	ldr	r2, [pc, #64]	; (80039e0 <prvCheckForValidListAndQueue+0x68>)
 80039a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80039a2:	2300      	movs	r3, #0
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	4b11      	ldr	r3, [pc, #68]	; (80039ec <prvCheckForValidListAndQueue+0x74>)
 80039a8:	4a11      	ldr	r2, [pc, #68]	; (80039f0 <prvCheckForValidListAndQueue+0x78>)
 80039aa:	2110      	movs	r1, #16
 80039ac:	200a      	movs	r0, #10
 80039ae:	f7fe f89d 	bl	8001aec <xQueueGenericCreateStatic>
 80039b2:	4603      	mov	r3, r0
 80039b4:	4a08      	ldr	r2, [pc, #32]	; (80039d8 <prvCheckForValidListAndQueue+0x60>)
 80039b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80039b8:	4b07      	ldr	r3, [pc, #28]	; (80039d8 <prvCheckForValidListAndQueue+0x60>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80039c0:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <prvCheckForValidListAndQueue+0x60>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	490b      	ldr	r1, [pc, #44]	; (80039f4 <prvCheckForValidListAndQueue+0x7c>)
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe fd16 	bl	80023f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039cc:	f000 f932 	bl	8003c34 <vPortExitCritical>
}
 80039d0:	bf00      	nop
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000c18 	.word	0x20000c18
 80039dc:	20000be8 	.word	0x20000be8
 80039e0:	20000bfc 	.word	0x20000bfc
 80039e4:	20000c10 	.word	0x20000c10
 80039e8:	20000c14 	.word	0x20000c14
 80039ec:	20000cc4 	.word	0x20000cc4
 80039f0:	20000c24 	.word	0x20000c24
 80039f4:	08005d1c 	.word	0x08005d1c

080039f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3b04      	subs	r3, #4
 8003a08:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	3b04      	subs	r3, #4
 8003a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f023 0201 	bic.w	r2, r3, #1
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	3b04      	subs	r3, #4
 8003a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003a28:	4a08      	ldr	r2, [pc, #32]	; (8003a4c <pxPortInitialiseStack+0x54>)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	3b14      	subs	r3, #20
 8003a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3b20      	subs	r3, #32
 8003a3e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003a40:	68fb      	ldr	r3, [r7, #12]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	08003a51 	.word	0x08003a51

08003a50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003a5a:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <prvTaskExitError+0x50>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a62:	d009      	beq.n	8003a78 <prvTaskExitError+0x28>
	__asm volatile
 8003a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	60fb      	str	r3, [r7, #12]
}
 8003a76:	bf00      	nop
	__asm volatile
 8003a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7c:	f383 8811 	msr	BASEPRI, r3
 8003a80:	f3bf 8f6f 	isb	sy
 8003a84:	f3bf 8f4f 	dsb	sy
 8003a88:	60bb      	str	r3, [r7, #8]
}
 8003a8a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003a8c:	bf00      	nop
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0fc      	beq.n	8003a8e <prvTaskExitError+0x3e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr
 8003aa0:	2000000c 	.word	0x2000000c
	...

08003ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ab0:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <pxCurrentTCBConst2>)
 8003ab2:	6819      	ldr	r1, [r3, #0]
 8003ab4:	6808      	ldr	r0, [r1, #0]
 8003ab6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003aba:	f380 8809 	msr	PSP, r0
 8003abe:	f3bf 8f6f 	isb	sy
 8003ac2:	f04f 0000 	mov.w	r0, #0
 8003ac6:	f380 8811 	msr	BASEPRI, r0
 8003aca:	f04e 0e0d 	orr.w	lr, lr, #13
 8003ace:	4770      	bx	lr

08003ad0 <pxCurrentTCBConst2>:
 8003ad0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop

08003ad8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003ad8:	4806      	ldr	r0, [pc, #24]	; (8003af4 <prvPortStartFirstTask+0x1c>)
 8003ada:	6800      	ldr	r0, [r0, #0]
 8003adc:	6800      	ldr	r0, [r0, #0]
 8003ade:	f380 8808 	msr	MSP, r0
 8003ae2:	b662      	cpsie	i
 8003ae4:	b661      	cpsie	f
 8003ae6:	f3bf 8f4f 	dsb	sy
 8003aea:	f3bf 8f6f 	isb	sy
 8003aee:	df00      	svc	0
 8003af0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003af2:	bf00      	nop
 8003af4:	e000ed08 	.word	0xe000ed08

08003af8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003afe:	4b31      	ldr	r3, [pc, #196]	; (8003bc4 <xPortStartScheduler+0xcc>)
 8003b00:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	22ff      	movs	r2, #255	; 0xff
 8003b0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	4b29      	ldr	r3, [pc, #164]	; (8003bc8 <xPortStartScheduler+0xd0>)
 8003b24:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b26:	4b29      	ldr	r3, [pc, #164]	; (8003bcc <xPortStartScheduler+0xd4>)
 8003b28:	2207      	movs	r2, #7
 8003b2a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b2c:	e009      	b.n	8003b42 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003b2e:	4b27      	ldr	r3, [pc, #156]	; (8003bcc <xPortStartScheduler+0xd4>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	4a25      	ldr	r2, [pc, #148]	; (8003bcc <xPortStartScheduler+0xd4>)
 8003b36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003b38:	78fb      	ldrb	r3, [r7, #3]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b42:	78fb      	ldrb	r3, [r7, #3]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4a:	2b80      	cmp	r3, #128	; 0x80
 8003b4c:	d0ef      	beq.n	8003b2e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003b4e:	4b1f      	ldr	r3, [pc, #124]	; (8003bcc <xPortStartScheduler+0xd4>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f1c3 0307 	rsb	r3, r3, #7
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d009      	beq.n	8003b6e <xPortStartScheduler+0x76>
	__asm volatile
 8003b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5e:	f383 8811 	msr	BASEPRI, r3
 8003b62:	f3bf 8f6f 	isb	sy
 8003b66:	f3bf 8f4f 	dsb	sy
 8003b6a:	60bb      	str	r3, [r7, #8]
}
 8003b6c:	bf00      	nop
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003b6e:	4b17      	ldr	r3, [pc, #92]	; (8003bcc <xPortStartScheduler+0xd4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	021b      	lsls	r3, r3, #8
 8003b74:	4a15      	ldr	r2, [pc, #84]	; (8003bcc <xPortStartScheduler+0xd4>)
 8003b76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003b78:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <xPortStartScheduler+0xd4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b80:	4a12      	ldr	r2, [pc, #72]	; (8003bcc <xPortStartScheduler+0xd4>)
 8003b82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003b8c:	4b10      	ldr	r3, [pc, #64]	; (8003bd0 <xPortStartScheduler+0xd8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a0f      	ldr	r2, [pc, #60]	; (8003bd0 <xPortStartScheduler+0xd8>)
 8003b92:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003b98:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <xPortStartScheduler+0xd8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a0c      	ldr	r2, [pc, #48]	; (8003bd0 <xPortStartScheduler+0xd8>)
 8003b9e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ba2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ba4:	f000 f8c2 	bl	8003d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003ba8:	4b0a      	ldr	r3, [pc, #40]	; (8003bd4 <xPortStartScheduler+0xdc>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003bae:	f7ff ff93 	bl	8003ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003bb2:	f7ff f867 	bl	8002c84 <vTaskSwitchContext>
	prvTaskExitError();
 8003bb6:	f7ff ff4b 	bl	8003a50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	e000e400 	.word	0xe000e400
 8003bc8:	20000d14 	.word	0x20000d14
 8003bcc:	20000d18 	.word	0x20000d18
 8003bd0:	e000ed20 	.word	0xe000ed20
 8003bd4:	2000000c 	.word	0x2000000c

08003bd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	607b      	str	r3, [r7, #4]
}
 8003bf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003bf2:	4b0e      	ldr	r3, [pc, #56]	; (8003c2c <vPortEnterCritical+0x54>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	4a0c      	ldr	r2, [pc, #48]	; (8003c2c <vPortEnterCritical+0x54>)
 8003bfa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <vPortEnterCritical+0x54>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d10e      	bne.n	8003c22 <vPortEnterCritical+0x4a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003c04:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <vPortEnterCritical+0x58>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d009      	beq.n	8003c22 <vPortEnterCritical+0x4a>
	__asm volatile
 8003c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c12:	f383 8811 	msr	BASEPRI, r3
 8003c16:	f3bf 8f6f 	isb	sy
 8003c1a:	f3bf 8f4f 	dsb	sy
 8003c1e:	603b      	str	r3, [r7, #0]
}
 8003c20:	bf00      	nop
	}
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr
 8003c2c:	2000000c 	.word	0x2000000c
 8003c30:	e000ed04 	.word	0xe000ed04

08003c34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003c3a:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <vPortExitCritical+0x4c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d109      	bne.n	8003c56 <vPortExitCritical+0x22>
	__asm volatile
 8003c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c46:	f383 8811 	msr	BASEPRI, r3
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	607b      	str	r3, [r7, #4]
}
 8003c54:	bf00      	nop
	uxCriticalNesting--;
 8003c56:	4b0a      	ldr	r3, [pc, #40]	; (8003c80 <vPortExitCritical+0x4c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	4a08      	ldr	r2, [pc, #32]	; (8003c80 <vPortExitCritical+0x4c>)
 8003c5e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003c60:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <vPortExitCritical+0x4c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d105      	bne.n	8003c74 <vPortExitCritical+0x40>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	f383 8811 	msr	BASEPRI, r3
}
 8003c72:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	2000000c 	.word	0x2000000c
	...

08003c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003c90:	f3ef 8009 	mrs	r0, PSP
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <pxCurrentTCBConst>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ca0:	6010      	str	r0, [r2, #0]
 8003ca2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003ca6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003caa:	f380 8811 	msr	BASEPRI, r0
 8003cae:	f7fe ffe9 	bl	8002c84 <vTaskSwitchContext>
 8003cb2:	f04f 0000 	mov.w	r0, #0
 8003cb6:	f380 8811 	msr	BASEPRI, r0
 8003cba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003cbe:	6819      	ldr	r1, [r3, #0]
 8003cc0:	6808      	ldr	r0, [r1, #0]
 8003cc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003cc6:	f380 8809 	msr	PSP, r0
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	4770      	bx	lr

08003cd0 <pxCurrentTCBConst>:
 8003cd0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003cd4:	bf00      	nop
 8003cd6:	bf00      	nop

08003cd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8003cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce2:	f383 8811 	msr	BASEPRI, r3
 8003ce6:	f3bf 8f6f 	isb	sy
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	607b      	str	r3, [r7, #4]
}
 8003cf0:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8003cf2:	f001 fca1 	bl	8005638 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003cf6:	f7fe ff03 	bl	8002b00 <xTaskIncrementTick>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d006      	beq.n	8003d0e <SysTick_Handler+0x36>
		{
      traceISR_EXIT_TO_SCHEDULER();
 8003d00:	f001 fcf8 	bl	80056f4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d04:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <SysTick_Handler+0x50>)
 8003d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	e001      	b.n	8003d12 <SysTick_Handler+0x3a>
		}
		else
		{
			traceISR_EXIT();
 8003d0e:	f001 fcd5 	bl	80056bc <SEGGER_SYSVIEW_RecordExitISR>
 8003d12:	2300      	movs	r3, #0
 8003d14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	f383 8811 	msr	BASEPRI, r3
}
 8003d1c:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	e000ed04 	.word	0xe000ed04

08003d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003d30:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <vPortSetupTimerInterrupt+0x30>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003d36:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <vPortSetupTimerInterrupt+0x34>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003d3c:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <vPortSetupTimerInterrupt+0x38>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a09      	ldr	r2, [pc, #36]	; (8003d68 <vPortSetupTimerInterrupt+0x3c>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	099b      	lsrs	r3, r3, #6
 8003d48:	4a08      	ldr	r2, [pc, #32]	; (8003d6c <vPortSetupTimerInterrupt+0x40>)
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003d4e:	4b03      	ldr	r3, [pc, #12]	; (8003d5c <vPortSetupTimerInterrupt+0x30>)
 8003d50:	2207      	movs	r2, #7
 8003d52:	601a      	str	r2, [r3, #0]
}
 8003d54:	bf00      	nop
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr
 8003d5c:	e000e010 	.word	0xe000e010
 8003d60:	e000e018 	.word	0xe000e018
 8003d64:	20000000 	.word	0x20000000
 8003d68:	10624dd3 	.word	0x10624dd3
 8003d6c:	e000e014 	.word	0xe000e014

08003d70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003d76:	f3ef 8305 	mrs	r3, IPSR
 8003d7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b0f      	cmp	r3, #15
 8003d80:	d913      	bls.n	8003daa <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003d82:	4a15      	ldr	r2, [pc, #84]	; (8003dd8 <vPortValidateInterruptPriority+0x68>)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4413      	add	r3, r2
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003d8c:	4b13      	ldr	r3, [pc, #76]	; (8003ddc <vPortValidateInterruptPriority+0x6c>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	7afa      	ldrb	r2, [r7, #11]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d209      	bcs.n	8003daa <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9a:	f383 8811 	msr	BASEPRI, r3
 8003d9e:	f3bf 8f6f 	isb	sy
 8003da2:	f3bf 8f4f 	dsb	sy
 8003da6:	607b      	str	r3, [r7, #4]
}
 8003da8:	bf00      	nop
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003daa:	4b0d      	ldr	r3, [pc, #52]	; (8003de0 <vPortValidateInterruptPriority+0x70>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003db2:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <vPortValidateInterruptPriority+0x74>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d909      	bls.n	8003dce <vPortValidateInterruptPriority+0x5e>
	__asm volatile
 8003dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbe:	f383 8811 	msr	BASEPRI, r3
 8003dc2:	f3bf 8f6f 	isb	sy
 8003dc6:	f3bf 8f4f 	dsb	sy
 8003dca:	603b      	str	r3, [r7, #0]
}
 8003dcc:	bf00      	nop
	}
 8003dce:	bf00      	nop
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr
 8003dd8:	e000e3f0 	.word	0xe000e3f0
 8003ddc:	20000d14 	.word	0x20000d14
 8003de0:	e000ed0c 	.word	0xe000ed0c
 8003de4:	20000d18 	.word	0x20000d18

08003de8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08a      	sub	sp, #40	; 0x28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003df4:	f7fe fdb6 	bl	8002964 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003df8:	4b57      	ldr	r3, [pc, #348]	; (8003f58 <pvPortMalloc+0x170>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003e00:	f000 f90c 	bl	800401c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e04:	4b55      	ldr	r3, [pc, #340]	; (8003f5c <pvPortMalloc+0x174>)
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f040 808c 	bne.w	8003f2a <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d01c      	beq.n	8003e52 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003e18:	2208      	movs	r2, #8
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d013      	beq.n	8003e52 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f023 0307 	bic.w	r3, r3, #7
 8003e30:	3308      	adds	r3, #8
 8003e32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d009      	beq.n	8003e52 <pvPortMalloc+0x6a>
	__asm volatile
 8003e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	617b      	str	r3, [r7, #20]
}
 8003e50:	bf00      	nop
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d068      	beq.n	8003f2a <pvPortMalloc+0x142>
 8003e58:	4b41      	ldr	r3, [pc, #260]	; (8003f60 <pvPortMalloc+0x178>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d863      	bhi.n	8003f2a <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003e62:	4b40      	ldr	r3, [pc, #256]	; (8003f64 <pvPortMalloc+0x17c>)
 8003e64:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003e66:	4b3f      	ldr	r3, [pc, #252]	; (8003f64 <pvPortMalloc+0x17c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e6c:	e004      	b.n	8003e78 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d903      	bls.n	8003e8a <pvPortMalloc+0xa2>
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f1      	bne.n	8003e6e <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003e8a:	4b33      	ldr	r3, [pc, #204]	; (8003f58 <pvPortMalloc+0x170>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d04a      	beq.n	8003f2a <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2208      	movs	r2, #8
 8003e9a:	4413      	add	r3, r2
 8003e9c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	1ad2      	subs	r2, r2, r3
 8003eae:	2308      	movs	r3, #8
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d91e      	bls.n	8003ef4 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4413      	add	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d009      	beq.n	8003edc <pvPortMalloc+0xf4>
	__asm volatile
 8003ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ecc:	f383 8811 	msr	BASEPRI, r3
 8003ed0:	f3bf 8f6f 	isb	sy
 8003ed4:	f3bf 8f4f 	dsb	sy
 8003ed8:	613b      	str	r3, [r7, #16]
}
 8003eda:	bf00      	nop

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	1ad2      	subs	r2, r2, r3
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003eee:	69b8      	ldr	r0, [r7, #24]
 8003ef0:	f000 f8f6 	bl	80040e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003ef4:	4b1a      	ldr	r3, [pc, #104]	; (8003f60 <pvPortMalloc+0x178>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	4a18      	ldr	r2, [pc, #96]	; (8003f60 <pvPortMalloc+0x178>)
 8003f00:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f02:	4b17      	ldr	r3, [pc, #92]	; (8003f60 <pvPortMalloc+0x178>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4b18      	ldr	r3, [pc, #96]	; (8003f68 <pvPortMalloc+0x180>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d203      	bcs.n	8003f16 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f0e:	4b14      	ldr	r3, [pc, #80]	; (8003f60 <pvPortMalloc+0x178>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a15      	ldr	r2, [pc, #84]	; (8003f68 <pvPortMalloc+0x180>)
 8003f14:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	4b10      	ldr	r3, [pc, #64]	; (8003f5c <pvPortMalloc+0x174>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003f2a:	f7fe fd29 	bl	8002980 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d009      	beq.n	8003f4c <pvPortMalloc+0x164>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	60fb      	str	r3, [r7, #12]
}
 8003f4a:	bf00      	nop
	return pvReturn;
 8003f4c:	69fb      	ldr	r3, [r7, #28]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3728      	adds	r7, #40	; 0x28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	20001924 	.word	0x20001924
 8003f5c:	20001930 	.word	0x20001930
 8003f60:	20001928 	.word	0x20001928
 8003f64:	2000191c 	.word	0x2000191c
 8003f68:	2000192c 	.word	0x2000192c

08003f6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d046      	beq.n	800400c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003f7e:	2308      	movs	r3, #8
 8003f80:	425b      	negs	r3, r3
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4413      	add	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	4b20      	ldr	r3, [pc, #128]	; (8004014 <vPortFree+0xa8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4013      	ands	r3, r2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <vPortFree+0x42>
	__asm volatile
 8003f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9e:	f383 8811 	msr	BASEPRI, r3
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	60fb      	str	r3, [r7, #12]
}
 8003fac:	bf00      	nop
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <vPortFree+0x5e>
	__asm volatile
 8003fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fba:	f383 8811 	msr	BASEPRI, r3
 8003fbe:	f3bf 8f6f 	isb	sy
 8003fc2:	f3bf 8f4f 	dsb	sy
 8003fc6:	60bb      	str	r3, [r7, #8]
}
 8003fc8:	bf00      	nop

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	4b11      	ldr	r3, [pc, #68]	; (8004014 <vPortFree+0xa8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d019      	beq.n	800400c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d115      	bne.n	800400c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <vPortFree+0xa8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	401a      	ands	r2, r3
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003ff0:	f7fe fcb8 	bl	8002964 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	4b07      	ldr	r3, [pc, #28]	; (8004018 <vPortFree+0xac>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	4a06      	ldr	r2, [pc, #24]	; (8004018 <vPortFree+0xac>)
 8004000:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004002:	6938      	ldr	r0, [r7, #16]
 8004004:	f000 f86c 	bl	80040e0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004008:	f7fe fcba 	bl	8002980 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800400c:	bf00      	nop
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20001930 	.word	0x20001930
 8004018:	20001928 	.word	0x20001928

0800401c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004022:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004026:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004028:	4b27      	ldr	r3, [pc, #156]	; (80040c8 <prvHeapInit+0xac>)
 800402a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00c      	beq.n	8004050 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	3307      	adds	r3, #7
 800403a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0307 	bic.w	r3, r3, #7
 8004042:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	4a1f      	ldr	r2, [pc, #124]	; (80040c8 <prvHeapInit+0xac>)
 800404c:	4413      	add	r3, r2
 800404e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004054:	4a1d      	ldr	r2, [pc, #116]	; (80040cc <prvHeapInit+0xb0>)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800405a:	4b1c      	ldr	r3, [pc, #112]	; (80040cc <prvHeapInit+0xb0>)
 800405c:	2200      	movs	r2, #0
 800405e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	4413      	add	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004068:	2208      	movs	r2, #8
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1a9b      	subs	r3, r3, r2
 800406e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0307 	bic.w	r3, r3, #7
 8004076:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4a15      	ldr	r2, [pc, #84]	; (80040d0 <prvHeapInit+0xb4>)
 800407c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800407e:	4b14      	ldr	r3, [pc, #80]	; (80040d0 <prvHeapInit+0xb4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2200      	movs	r2, #0
 8004084:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004086:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <prvHeapInit+0xb4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	1ad2      	subs	r2, r2, r3
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800409c:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <prvHeapInit+0xb4>)
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	4a0a      	ldr	r2, [pc, #40]	; (80040d4 <prvHeapInit+0xb8>)
 80040aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	4a09      	ldr	r2, [pc, #36]	; (80040d8 <prvHeapInit+0xbc>)
 80040b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80040b4:	4b09      	ldr	r3, [pc, #36]	; (80040dc <prvHeapInit+0xc0>)
 80040b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80040ba:	601a      	str	r2, [r3, #0]
}
 80040bc:	bf00      	nop
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	20000d1c 	.word	0x20000d1c
 80040cc:	2000191c 	.word	0x2000191c
 80040d0:	20001924 	.word	0x20001924
 80040d4:	2000192c 	.word	0x2000192c
 80040d8:	20001928 	.word	0x20001928
 80040dc:	20001930 	.word	0x20001930

080040e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80040e8:	4b27      	ldr	r3, [pc, #156]	; (8004188 <prvInsertBlockIntoFreeList+0xa8>)
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	e002      	b.n	80040f4 <prvInsertBlockIntoFreeList+0x14>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d8f7      	bhi.n	80040ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	4413      	add	r3, r2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	429a      	cmp	r2, r3
 800410e:	d108      	bne.n	8004122 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	441a      	add	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	441a      	add	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d118      	bne.n	8004168 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	4b14      	ldr	r3, [pc, #80]	; (800418c <prvInsertBlockIntoFreeList+0xac>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d00d      	beq.n	800415e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	441a      	add	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	e008      	b.n	8004170 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800415e:	4b0b      	ldr	r3, [pc, #44]	; (800418c <prvInsertBlockIntoFreeList+0xac>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	e003      	b.n	8004170 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	429a      	cmp	r2, r3
 8004176:	d002      	beq.n	800417e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800417e:	bf00      	nop
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr
 8004188:	2000191c 	.word	0x2000191c
 800418c:	20001924 	.word	0x20001924

08004190 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004194:	4803      	ldr	r0, [pc, #12]	; (80041a4 <_cbSendSystemDesc+0x14>)
 8004196:	f001 f9f9 	bl	800558c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800419a:	4803      	ldr	r0, [pc, #12]	; (80041a8 <_cbSendSystemDesc+0x18>)
 800419c:	f001 f9f6 	bl	800558c <SEGGER_SYSVIEW_SendSysDesc>
}
 80041a0:	bf00      	nop
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	08005d24 	.word	0x08005d24
 80041a8:	08005d60 	.word	0x08005d60

080041ac <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80041b0:	4b06      	ldr	r3, [pc, #24]	; (80041cc <SEGGER_SYSVIEW_Conf+0x20>)
 80041b2:	6818      	ldr	r0, [r3, #0]
 80041b4:	4b05      	ldr	r3, [pc, #20]	; (80041cc <SEGGER_SYSVIEW_Conf+0x20>)
 80041b6:	6819      	ldr	r1, [r3, #0]
 80041b8:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <SEGGER_SYSVIEW_Conf+0x24>)
 80041ba:	4a06      	ldr	r2, [pc, #24]	; (80041d4 <SEGGER_SYSVIEW_Conf+0x28>)
 80041bc:	f000 fd68 	bl	8004c90 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80041c0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80041c4:	f000 fda2 	bl	8004d0c <SEGGER_SYSVIEW_SetRAMBase>
}
 80041c8:	bf00      	nop
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	20000000 	.word	0x20000000
 80041d0:	08004191 	.word	0x08004191
 80041d4:	08005e00 	.word	0x08005e00

080041d8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80041d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041da:	b085      	sub	sp, #20
 80041dc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80041de:	2300      	movs	r3, #0
 80041e0:	607b      	str	r3, [r7, #4]
 80041e2:	e048      	b.n	8004276 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 80041e4:	4929      	ldr	r1, [pc, #164]	; (800428c <_cbSendTaskList+0xb4>)
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	4613      	mov	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fe ff91 	bl	800311c <uxTaskGetStackHighWaterMark>
 80041fa:	4601      	mov	r1, r0
 80041fc:	4823      	ldr	r0, [pc, #140]	; (800428c <_cbSendTaskList+0xb4>)
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4403      	add	r3, r0
 800420a:	3310      	adds	r3, #16
 800420c:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800420e:	491f      	ldr	r1, [pc, #124]	; (800428c <_cbSendTaskList+0xb4>)
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	6818      	ldr	r0, [r3, #0]
 800421e:	491b      	ldr	r1, [pc, #108]	; (800428c <_cbSendTaskList+0xb4>)
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	4613      	mov	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	440b      	add	r3, r1
 800422c:	3304      	adds	r3, #4
 800422e:	6819      	ldr	r1, [r3, #0]
 8004230:	4c16      	ldr	r4, [pc, #88]	; (800428c <_cbSendTaskList+0xb4>)
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	4613      	mov	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4423      	add	r3, r4
 800423e:	3308      	adds	r3, #8
 8004240:	681c      	ldr	r4, [r3, #0]
 8004242:	4d12      	ldr	r5, [pc, #72]	; (800428c <_cbSendTaskList+0xb4>)
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	442b      	add	r3, r5
 8004250:	330c      	adds	r3, #12
 8004252:	681d      	ldr	r5, [r3, #0]
 8004254:	4e0d      	ldr	r6, [pc, #52]	; (800428c <_cbSendTaskList+0xb4>)
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	4613      	mov	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4433      	add	r3, r6
 8004262:	3310      	adds	r3, #16
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	462b      	mov	r3, r5
 800426a:	4622      	mov	r2, r4
 800426c:	f000 f8b6 	bl	80043dc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3301      	adds	r3, #1
 8004274:	607b      	str	r3, [r7, #4]
 8004276:	4b06      	ldr	r3, [pc, #24]	; (8004290 <_cbSendTaskList+0xb8>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	429a      	cmp	r2, r3
 800427e:	d3b1      	bcc.n	80041e4 <_cbSendTaskList+0xc>
  }
}
 8004280:	bf00      	nop
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800428a:	bf00      	nop
 800428c:	20001934 	.word	0x20001934
 8004290:	200019d4 	.word	0x200019d4

08004294 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004294:	b5b0      	push	{r4, r5, r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800429a:	f7fe fc1f 	bl	8002adc <xTaskGetTickCountFromISR>
 800429e:	4603      	mov	r3, r0
 80042a0:	461a      	mov	r2, r3
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80042aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	f04f 0400 	mov.w	r4, #0
 80042b6:	f04f 0500 	mov.w	r5, #0
 80042ba:	015d      	lsls	r5, r3, #5
 80042bc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80042c0:	0154      	lsls	r4, r2, #5
 80042c2:	4622      	mov	r2, r4
 80042c4:	462b      	mov	r3, r5
 80042c6:	1a12      	subs	r2, r2, r0
 80042c8:	eb63 0301 	sbc.w	r3, r3, r1
 80042cc:	f04f 0400 	mov.w	r4, #0
 80042d0:	f04f 0500 	mov.w	r5, #0
 80042d4:	009d      	lsls	r5, r3, #2
 80042d6:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 80042da:	0094      	lsls	r4, r2, #2
 80042dc:	4622      	mov	r2, r4
 80042de:	462b      	mov	r3, r5
 80042e0:	1812      	adds	r2, r2, r0
 80042e2:	eb41 0303 	adc.w	r3, r1, r3
 80042e6:	f04f 0000 	mov.w	r0, #0
 80042ea:	f04f 0100 	mov.w	r1, #0
 80042ee:	00d9      	lsls	r1, r3, #3
 80042f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042f4:	00d0      	lsls	r0, r2, #3
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 80042fe:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004302:	4610      	mov	r0, r2
 8004304:	4619      	mov	r1, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bdb0      	pop	{r4, r5, r7, pc}

0800430c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af02      	add	r7, sp, #8
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
 8004318:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800431a:	2205      	movs	r2, #5
 800431c:	492b      	ldr	r1, [pc, #172]	; (80043cc <SYSVIEW_AddTask+0xc0>)
 800431e:	68b8      	ldr	r0, [r7, #8]
 8004320:	f001 fcb8 	bl	8005c94 <memcmp>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d04b      	beq.n	80043c2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800432a:	4b29      	ldr	r3, [pc, #164]	; (80043d0 <SYSVIEW_AddTask+0xc4>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b07      	cmp	r3, #7
 8004330:	d903      	bls.n	800433a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004332:	4828      	ldr	r0, [pc, #160]	; (80043d4 <SYSVIEW_AddTask+0xc8>)
 8004334:	f001 fc2e 	bl	8005b94 <SEGGER_SYSVIEW_Warn>
    return;
 8004338:	e044      	b.n	80043c4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800433a:	4b25      	ldr	r3, [pc, #148]	; (80043d0 <SYSVIEW_AddTask+0xc4>)
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	4926      	ldr	r1, [pc, #152]	; (80043d8 <SYSVIEW_AddTask+0xcc>)
 8004340:	4613      	mov	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800434e:	4b20      	ldr	r3, [pc, #128]	; (80043d0 <SYSVIEW_AddTask+0xc4>)
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	4921      	ldr	r1, [pc, #132]	; (80043d8 <SYSVIEW_AddTask+0xcc>)
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	3304      	adds	r3, #4
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004364:	4b1a      	ldr	r3, [pc, #104]	; (80043d0 <SYSVIEW_AddTask+0xc4>)
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	491b      	ldr	r1, [pc, #108]	; (80043d8 <SYSVIEW_AddTask+0xcc>)
 800436a:	4613      	mov	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	440b      	add	r3, r1
 8004374:	3308      	adds	r3, #8
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800437a:	4b15      	ldr	r3, [pc, #84]	; (80043d0 <SYSVIEW_AddTask+0xc4>)
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	4916      	ldr	r1, [pc, #88]	; (80043d8 <SYSVIEW_AddTask+0xcc>)
 8004380:	4613      	mov	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	330c      	adds	r3, #12
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004390:	4b0f      	ldr	r3, [pc, #60]	; (80043d0 <SYSVIEW_AddTask+0xc4>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	4910      	ldr	r1, [pc, #64]	; (80043d8 <SYSVIEW_AddTask+0xcc>)
 8004396:	4613      	mov	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	440b      	add	r3, r1
 80043a0:	3310      	adds	r3, #16
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80043a6:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <SYSVIEW_AddTask+0xc4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3301      	adds	r3, #1
 80043ac:	4a08      	ldr	r2, [pc, #32]	; (80043d0 <SYSVIEW_AddTask+0xc4>)
 80043ae:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	68b9      	ldr	r1, [r7, #8]
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f80e 	bl	80043dc <SYSVIEW_SendTaskInfo>
 80043c0:	e000      	b.n	80043c4 <SYSVIEW_AddTask+0xb8>
    return;
 80043c2:	bf00      	nop

}
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	08005d70 	.word	0x08005d70
 80043d0:	200019d4 	.word	0x200019d4
 80043d4:	08005d78 	.word	0x08005d78
 80043d8:	20001934 	.word	0x20001934

080043dc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08a      	sub	sp, #40	; 0x28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80043ea:	f107 0314 	add.w	r3, r7, #20
 80043ee:	2214      	movs	r2, #20
 80043f0:	2100      	movs	r1, #0
 80043f2:	4618      	mov	r0, r3
 80043f4:	f001 fc6a 	bl	8005ccc <memset>
  TaskInfo.TaskID     = TaskID;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800440c:	f107 0314 	add.w	r3, r7, #20
 8004410:	4618      	mov	r0, r3
 8004412:	f000 ffc1 	bl	8005398 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004416:	bf00      	nop
 8004418:	3728      	adds	r7, #40	; 0x28
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
	...

08004420 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8004426:	4b21      	ldr	r3, [pc, #132]	; (80044ac <_DoInit+0x8c>)
 8004428:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2203      	movs	r2, #3
 800442e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2203      	movs	r2, #3
 8004434:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a1d      	ldr	r2, [pc, #116]	; (80044b0 <_DoInit+0x90>)
 800443a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a1d      	ldr	r2, [pc, #116]	; (80044b4 <_DoInit+0x94>)
 8004440:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004448:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a14      	ldr	r2, [pc, #80]	; (80044b0 <_DoInit+0x90>)
 8004460:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a14      	ldr	r2, [pc, #80]	; (80044b8 <_DoInit+0x98>)
 8004466:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2210      	movs	r2, #16
 800446c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3307      	adds	r3, #7
 8004484:	4a0d      	ldr	r2, [pc, #52]	; (80044bc <_DoInit+0x9c>)
 8004486:	6810      	ldr	r0, [r2, #0]
 8004488:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a0c      	ldr	r2, [pc, #48]	; (80044c0 <_DoInit+0xa0>)
 800448e:	6810      	ldr	r0, [r2, #0]
 8004490:	6018      	str	r0, [r3, #0]
 8004492:	8891      	ldrh	r1, [r2, #4]
 8004494:	7992      	ldrb	r2, [r2, #6]
 8004496:	8099      	strh	r1, [r3, #4]
 8004498:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	719a      	strb	r2, [r3, #6]
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	20003794 	.word	0x20003794
 80044b0:	08005dc8 	.word	0x08005dc8
 80044b4:	200019d8 	.word	0x200019d8
 80044b8:	20001dd8 	.word	0x20001dd8
 80044bc:	08005dd4 	.word	0x08005dd4
 80044c0:	08005dd8 	.word	0x08005dd8

080044c4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08a      	sub	sp, #40	; 0x28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 80044d0:	4b3c      	ldr	r3, [pc, #240]	; (80045c4 <SEGGER_RTT_ReadNoLock+0x100>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <SEGGER_RTT_ReadNoLock+0x18>
 80044d8:	f7ff ffa2 	bl	8004420 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	4613      	mov	r3, r2
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	4413      	add	r3, r2
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	3360      	adds	r3, #96	; 0x60
 80044e8:	4a36      	ldr	r2, [pc, #216]	; (80045c4 <SEGGER_RTT_ReadNoLock+0x100>)
 80044ea:	4413      	add	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 80044fe:	2300      	movs	r3, #0
 8004500:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004502:	6a3a      	ldr	r2, [r7, #32]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	429a      	cmp	r2, r3
 8004508:	d92a      	bls.n	8004560 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4293      	cmp	r3, r2
 800451a:	bf28      	it	cs
 800451c:	4613      	movcs	r3, r2
 800451e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	4413      	add	r3, r2
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	4619      	mov	r1, r3
 800452c:	69f8      	ldr	r0, [r7, #28]
 800452e:	f001 fbbf 	bl	8005cb0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	4413      	add	r3, r2
 8004538:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800453a:	69fa      	ldr	r2, [r7, #28]
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4413      	add	r3, r2
 8004540:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800454a:	6a3a      	ldr	r2, [r7, #32]
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4413      	add	r3, r2
 8004550:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	6a3a      	ldr	r2, [r7, #32]
 8004558:	429a      	cmp	r2, r3
 800455a:	d101      	bne.n	8004560 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 800455c:	2300      	movs	r3, #0
 800455e:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4293      	cmp	r3, r2
 800456e:	bf28      	it	cs
 8004570:	4613      	movcs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d018      	beq.n	80045ac <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	4413      	add	r3, r2
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4619      	mov	r1, r3
 8004586:	69f8      	ldr	r0, [r7, #28]
 8004588:	f001 fb92 	bl	8005cb0 <memcpy>
    NumBytesRead += NumBytesRem;
 800458c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	4413      	add	r3, r2
 8004592:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	4413      	add	r3, r2
 800459a:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80045a4:	6a3a      	ldr	r2, [r7, #32]
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4413      	add	r3, r2
 80045aa:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	6a3a      	ldr	r2, [r7, #32]
 80045b6:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3728      	adds	r7, #40	; 0x28
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20003794 	.word	0x20003794

080045c8 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08a      	sub	sp, #40	; 0x28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	4613      	mov	r3, r2
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	4413      	add	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	4a3f      	ldr	r2, [pc, #252]	; (80046e4 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 80045e6:	4413      	add	r3, r2
 80045e8:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 80045f6:	69fa      	ldr	r2, [r7, #28]
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d854      	bhi.n	80046a8 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	689a      	ldr	r2, [r3, #8]
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	429a      	cmp	r2, r3
 8004610:	d30f      	bcc.n	8004632 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	4413      	add	r3, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800461e:	4618      	mov	r0, r3
 8004620:	f001 fb46 	bl	8005cb0 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	441a      	add	r2, r3
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 800462e:	2301      	movs	r3, #1
 8004630:	e054      	b.n	80046dc <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	4413      	add	r3, r2
 8004638:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	429a      	cmp	r2, r3
 8004640:	d34b      	bcc.n	80046da <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	429a      	cmp	r2, r3
 8004652:	d90e      	bls.n	8004672 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	4413      	add	r3, r2
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004660:	4618      	mov	r0, r3
 8004662:	f001 fb25 	bl	8005cb0 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	441a      	add	r2, r3
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	60da      	str	r2, [r3, #12]
 8004670:	e018      	b.n	80046a4 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	4413      	add	r3, r2
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800467e:	4618      	mov	r0, r3
 8004680:	f001 fb16 	bl	8005cb0 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	6858      	ldr	r0, [r3, #4]
 8004688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	18d1      	adds	r1, r2, r3
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	461a      	mov	r2, r3
 8004696:	f001 fb0b 	bl	8005cb0 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad2      	subs	r2, r2, r3
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e019      	b.n	80046dc <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 80046a8:	69fa      	ldr	r2, [r7, #28]
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	3b01      	subs	r3, #1
 80046b0:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d30f      	bcc.n	80046da <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	4413      	add	r3, r2
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046c6:	4618      	mov	r0, r3
 80046c8:	f001 faf2 	bl	8005cb0 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	441a      	add	r2, r3
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3728      	adds	r7, #40	; 0x28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	20003794 	.word	0x20003794

080046e8 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80046f6:	4b30      	ldr	r3, [pc, #192]	; (80047b8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 80046fe:	f7ff fe8f 	bl	8004420 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8004702:	4b2d      	ldr	r3, [pc, #180]	; (80047b8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	461a      	mov	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4293      	cmp	r3, r2
 800470c:	d24c      	bcs.n	80047a8 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800470e:	f3ef 8311 	mrs	r3, BASEPRI
 8004712:	f04f 0120 	mov.w	r1, #32
 8004716:	f381 8811 	msr	BASEPRI, r1
 800471a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d032      	beq.n	8004788 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8004722:	4925      	ldr	r1, [pc, #148]	; (80047b8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	4613      	mov	r3, r2
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	4413      	add	r3, r2
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	440b      	add	r3, r1
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004736:	4920      	ldr	r1, [pc, #128]	; (80047b8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	4613      	mov	r3, r2
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	4413      	add	r3, r2
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	440b      	add	r3, r1
 8004746:	3304      	adds	r3, #4
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800474c:	491a      	ldr	r1, [pc, #104]	; (80047b8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	4613      	mov	r3, r2
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	4413      	add	r3, r2
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	440b      	add	r3, r1
 800475a:	3320      	adds	r3, #32
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8004760:	4915      	ldr	r1, [pc, #84]	; (80047b8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	4613      	mov	r3, r2
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	4413      	add	r3, r2
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	440b      	add	r3, r1
 800476e:	3328      	adds	r3, #40	; 0x28
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8004774:	4910      	ldr	r1, [pc, #64]	; (80047b8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4613      	mov	r3, r2
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	4413      	add	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	440b      	add	r3, r1
 8004782:	3324      	adds	r3, #36	; 0x24
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8004788:	490b      	ldr	r1, [pc, #44]	; (80047b8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4613      	mov	r3, r2
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	4413      	add	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	440b      	add	r3, r1
 8004796:	332c      	adds	r3, #44	; 0x2c
 8004798:	6a3a      	ldr	r2, [r7, #32]
 800479a:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80047a2:	2300      	movs	r3, #0
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	e002      	b.n	80047ae <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 80047a8:	f04f 33ff 	mov.w	r3, #4294967295
 80047ac:	617b      	str	r3, [r7, #20]
  }
  return r;
 80047ae:	697b      	ldr	r3, [r7, #20]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	20003794 	.word	0x20003794

080047bc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
 80047c8:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80047ca:	4b30      	ldr	r3, [pc, #192]	; (800488c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 80047d2:	f7ff fe25 	bl	8004420 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 80047d6:	4b2d      	ldr	r3, [pc, #180]	; (800488c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	461a      	mov	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4293      	cmp	r3, r2
 80047e0:	d24b      	bcs.n	800487a <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 80047e2:	f3ef 8311 	mrs	r3, BASEPRI
 80047e6:	f04f 0120 	mov.w	r1, #32
 80047ea:	f381 8811 	msr	BASEPRI, r1
 80047ee:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d031      	beq.n	800485a <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 80047f6:	4925      	ldr	r1, [pc, #148]	; (800488c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	4613      	mov	r3, r2
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	4413      	add	r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	440b      	add	r3, r1
 8004804:	3360      	adds	r3, #96	; 0x60
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800480a:	4920      	ldr	r1, [pc, #128]	; (800488c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	4613      	mov	r3, r2
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	4413      	add	r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	440b      	add	r3, r1
 8004818:	3364      	adds	r3, #100	; 0x64
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800481e:	491b      	ldr	r1, [pc, #108]	; (800488c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	4613      	mov	r3, r2
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	4413      	add	r3, r2
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	440b      	add	r3, r1
 800482c:	3368      	adds	r3, #104	; 0x68
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8004832:	4916      	ldr	r1, [pc, #88]	; (800488c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	4613      	mov	r3, r2
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	4413      	add	r3, r2
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	440b      	add	r3, r1
 8004840:	3370      	adds	r3, #112	; 0x70
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8004846:	4911      	ldr	r1, [pc, #68]	; (800488c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	4613      	mov	r3, r2
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	4413      	add	r3, r2
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	440b      	add	r3, r1
 8004854:	336c      	adds	r3, #108	; 0x6c
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 800485a:	490c      	ldr	r1, [pc, #48]	; (800488c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4613      	mov	r3, r2
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	4413      	add	r3, r2
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	440b      	add	r3, r1
 8004868:	3374      	adds	r3, #116	; 0x74
 800486a:	6a3a      	ldr	r2, [r7, #32]
 800486c:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004874:	2300      	movs	r3, #0
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	e002      	b.n	8004880 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 800487a:	f04f 33ff 	mov.w	r3, #4294967295
 800487e:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004880:	697b      	ldr	r3, [r7, #20]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	20003794 	.word	0x20003794

08004890 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800489c:	2300      	movs	r3, #0
 800489e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80048a0:	e002      	b.n	80048a8 <_EncodeStr+0x18>
    Len++;
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	3301      	adds	r3, #1
 80048a6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	4413      	add	r3, r2
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1f6      	bne.n	80048a2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d901      	bls.n	80048c0 <_EncodeStr+0x30>
    Len = Limit;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	2bfe      	cmp	r3, #254	; 0xfe
 80048c4:	d806      	bhi.n	80048d4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	60fa      	str	r2, [r7, #12]
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	701a      	strb	r2, [r3, #0]
 80048d2:	e011      	b.n	80048f8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	60fa      	str	r2, [r7, #12]
 80048da:	22ff      	movs	r2, #255	; 0xff
 80048dc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	60fa      	str	r2, [r7, #12]
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	0a19      	lsrs	r1, r3, #8
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	60fa      	str	r2, [r7, #12]
 80048f4:	b2ca      	uxtb	r2, r1
 80048f6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80048fc:	e00a      	b.n	8004914 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	1c53      	adds	r3, r2, #1
 8004902:	60bb      	str	r3, [r7, #8]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	1c59      	adds	r1, r3, #1
 8004908:	60f9      	str	r1, [r7, #12]
 800490a:	7812      	ldrb	r2, [r2, #0]
 800490c:	701a      	strb	r2, [r3, #0]
    n++;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	3301      	adds	r3, #1
 8004912:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	429a      	cmp	r2, r3
 800491a:	d3f0      	bcc.n	80048fe <_EncodeStr+0x6e>
  }
  return pPayload;
 800491c:	68fb      	ldr	r3, [r7, #12]
}
 800491e:	4618      	mov	r0, r3
 8004920:	371c      	adds	r7, #28
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr

08004928 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3304      	adds	r3, #4
}
 8004934:	4618      	mov	r0, r3
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	bc80      	pop	{r7}
 800493c:	4770      	bx	lr
	...

08004940 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004946:	1cfb      	adds	r3, r7, #3
 8004948:	2201      	movs	r2, #1
 800494a:	4619      	mov	r1, r3
 800494c:	2001      	movs	r0, #1
 800494e:	f7ff fdb9 	bl	80044c4 <SEGGER_RTT_ReadNoLock>
 8004952:	4603      	mov	r3, r0
 8004954:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	dd4c      	ble.n	80049f6 <_HandleIncomingPacket+0xb6>
    switch (Cmd) {
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	2b07      	cmp	r3, #7
 8004960:	dc16      	bgt.n	8004990 <_HandleIncomingPacket+0x50>
 8004962:	2b00      	cmp	r3, #0
 8004964:	dd3c      	ble.n	80049e0 <_HandleIncomingPacket+0xa0>
 8004966:	3b01      	subs	r3, #1
 8004968:	2b06      	cmp	r3, #6
 800496a:	d839      	bhi.n	80049e0 <_HandleIncomingPacket+0xa0>
 800496c:	a201      	add	r2, pc, #4	; (adr r2, 8004974 <_HandleIncomingPacket+0x34>)
 800496e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004972:	bf00      	nop
 8004974:	08004997 	.word	0x08004997
 8004978:	0800499d 	.word	0x0800499d
 800497c:	080049a3 	.word	0x080049a3
 8004980:	080049a9 	.word	0x080049a9
 8004984:	080049af 	.word	0x080049af
 8004988:	080049b5 	.word	0x080049b5
 800498c:	080049bb 	.word	0x080049bb
 8004990:	2b80      	cmp	r3, #128	; 0x80
 8004992:	d015      	beq.n	80049c0 <_HandleIncomingPacket+0x80>
 8004994:	e024      	b.n	80049e0 <_HandleIncomingPacket+0xa0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004996:	f000 fb83 	bl	80050a0 <SEGGER_SYSVIEW_Start>
      break;
 800499a:	e031      	b.n	8004a00 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800499c:	f000 fc3c 	bl	8005218 <SEGGER_SYSVIEW_Stop>
      break;
 80049a0:	e02e      	b.n	8004a00 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80049a2:	f000 fe17 	bl	80055d4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80049a6:	e02b      	b.n	8004a00 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80049a8:	f000 fddc 	bl	8005564 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80049ac:	e028      	b.n	8004a00 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80049ae:	f000 fc59 	bl	8005264 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80049b2:	e025      	b.n	8004a00 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80049b4:	f001 f8b0 	bl	8005b18 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80049b8:	e022      	b.n	8004a00 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80049ba:	f001 f88f 	bl	8005adc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80049be:	e01f      	b.n	8004a00 <_HandleIncomingPacket+0xc0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80049c0:	1cfb      	adds	r3, r7, #3
 80049c2:	2201      	movs	r2, #1
 80049c4:	4619      	mov	r1, r3
 80049c6:	2001      	movs	r0, #1
 80049c8:	f7ff fd7c 	bl	80044c4 <SEGGER_RTT_ReadNoLock>
 80049cc:	4603      	mov	r3, r0
 80049ce:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	dd11      	ble.n	80049fa <_HandleIncomingPacket+0xba>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80049d6:	78fb      	ldrb	r3, [r7, #3]
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 ffff 	bl	80059dc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80049de:	e00c      	b.n	80049fa <_HandleIncomingPacket+0xba>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	b25b      	sxtb	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	da0a      	bge.n	80049fe <_HandleIncomingPacket+0xbe>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80049e8:	1cfb      	adds	r3, r7, #3
 80049ea:	2201      	movs	r2, #1
 80049ec:	4619      	mov	r1, r3
 80049ee:	2001      	movs	r0, #1
 80049f0:	f7ff fd68 	bl	80044c4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80049f4:	e003      	b.n	80049fe <_HandleIncomingPacket+0xbe>
    }
  }
 80049f6:	bf00      	nop
 80049f8:	e002      	b.n	8004a00 <_HandleIncomingPacket+0xc0>
      break;
 80049fa:	bf00      	nop
 80049fc:	e000      	b.n	8004a00 <_HandleIncomingPacket+0xc0>
      break;
 80049fe:	bf00      	nop
}
 8004a00:	bf00      	nop
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08c      	sub	sp, #48	; 0x30
 8004a0c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004a0e:	2301      	movs	r3, #1
 8004a10:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004a12:	1d3b      	adds	r3, r7, #4
 8004a14:	3301      	adds	r3, #1
 8004a16:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a1c:	4b30      	ldr	r3, [pc, #192]	; (8004ae0 <_TrySendOverflowPacket+0xd8>)
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a22:	e00b      	b.n	8004a3c <_TrySendOverflowPacket+0x34>
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2a:	1c59      	adds	r1, r3, #1
 8004a2c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004a2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a38:	09db      	lsrs	r3, r3, #7
 8004a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	2b7f      	cmp	r3, #127	; 0x7f
 8004a40:	d8f0      	bhi.n	8004a24 <_TrySendOverflowPacket+0x1c>
 8004a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	701a      	strb	r2, [r3, #0]
 8004a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a50:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004a52:	4b24      	ldr	r3, [pc, #144]	; (8004ae4 <_TrySendOverflowPacket+0xdc>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004a58:	4b21      	ldr	r3, [pc, #132]	; (8004ae0 <_TrySendOverflowPacket+0xd8>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	623b      	str	r3, [r7, #32]
 8004a6a:	e00b      	b.n	8004a84 <_TrySendOverflowPacket+0x7c>
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	1c59      	adds	r1, r3, #1
 8004a74:	6279      	str	r1, [r7, #36]	; 0x24
 8004a76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	09db      	lsrs	r3, r3, #7
 8004a82:	623b      	str	r3, [r7, #32]
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	2b7f      	cmp	r3, #127	; 0x7f
 8004a88:	d8f0      	bhi.n	8004a6c <_TrySendOverflowPacket+0x64>
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	627a      	str	r2, [r7, #36]	; 0x24
 8004a90:	6a3a      	ldr	r2, [r7, #32]
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004a9a:	1d3b      	adds	r3, r7, #4
 8004a9c:	69fa      	ldr	r2, [r7, #28]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	1d3b      	adds	r3, r7, #4
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	2001      	movs	r0, #1
 8004aa8:	f7ff fd8e 	bl	80045c8 <SEGGER_RTT_WriteSkipNoLock>
 8004aac:	4603      	mov	r3, r0
 8004aae:	613b      	str	r3, [r7, #16]
  if (Status) {
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d009      	beq.n	8004aca <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004ab6:	4a0a      	ldr	r2, [pc, #40]	; (8004ae0 <_TrySendOverflowPacket+0xd8>)
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004abc:	4b08      	ldr	r3, [pc, #32]	; (8004ae0 <_TrySendOverflowPacket+0xd8>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <_TrySendOverflowPacket+0xd8>)
 8004ac6:	701a      	strb	r2, [r3, #0]
 8004ac8:	e004      	b.n	8004ad4 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004aca:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <_TrySendOverflowPacket+0xd8>)
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	4a03      	ldr	r2, [pc, #12]	; (8004ae0 <_TrySendOverflowPacket+0xd8>)
 8004ad2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004ad4:	693b      	ldr	r3, [r7, #16]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3730      	adds	r7, #48	; 0x30
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	200035f0 	.word	0x200035f0
 8004ae4:	e0001004 	.word	0xe0001004

08004ae8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08a      	sub	sp, #40	; 0x28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004af4:	4b63      	ldr	r3, [pc, #396]	; (8004c84 <_SendPacket+0x19c>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d010      	beq.n	8004b1e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004afc:	4b61      	ldr	r3, [pc, #388]	; (8004c84 <_SendPacket+0x19c>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 80a1 	beq.w	8004c48 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004b06:	4b5f      	ldr	r3, [pc, #380]	; (8004c84 <_SendPacket+0x19c>)
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d109      	bne.n	8004b22 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004b0e:	f7ff ff7b 	bl	8004a08 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004b12:	4b5c      	ldr	r3, [pc, #368]	; (8004c84 <_SendPacket+0x19c>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	f040 8098 	bne.w	8004c4c <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8004b1c:	e001      	b.n	8004b22 <_SendPacket+0x3a>
    goto Send;
 8004b1e:	bf00      	nop
 8004b20:	e000      	b.n	8004b24 <_SendPacket+0x3c>
Send:
 8004b22:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b1f      	cmp	r3, #31
 8004b28:	d809      	bhi.n	8004b3e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004b2a:	4b56      	ldr	r3, [pc, #344]	; (8004c84 <_SendPacket+0x19c>)
 8004b2c:	69da      	ldr	r2, [r3, #28]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	fa22 f303 	lsr.w	r3, r2, r3
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f040 8089 	bne.w	8004c50 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b17      	cmp	r3, #23
 8004b42:	d807      	bhi.n	8004b54 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3b01      	subs	r3, #1
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	701a      	strb	r2, [r3, #0]
 8004b52:	e03d      	b.n	8004bd0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	2b7f      	cmp	r3, #127	; 0x7f
 8004b60:	d912      	bls.n	8004b88 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	09da      	lsrs	r2, r3, #7
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	b2d2      	uxtb	r2, r2
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	3a01      	subs	r2, #1
 8004b7a:	60fa      	str	r2, [r7, #12]
 8004b7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	701a      	strb	r2, [r3, #0]
 8004b86:	e006      	b.n	8004b96 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b7f      	cmp	r3, #127	; 0x7f
 8004b9a:	d912      	bls.n	8004bc2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	09da      	lsrs	r2, r3, #7
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	60fb      	str	r3, [r7, #12]
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	3a01      	subs	r2, #1
 8004bb4:	60fa      	str	r2, [r7, #12]
 8004bb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	701a      	strb	r2, [r3, #0]
 8004bc0:	e006      	b.n	8004bd0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004bd0:	4b2d      	ldr	r3, [pc, #180]	; (8004c88 <_SendPacket+0x1a0>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004bd6:	4b2b      	ldr	r3, [pc, #172]	; (8004c84 <_SendPacket+0x19c>)
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	623b      	str	r3, [r7, #32]
 8004be8:	e00b      	b.n	8004c02 <_SendPacket+0x11a>
 8004bea:	6a3b      	ldr	r3, [r7, #32]
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	1c59      	adds	r1, r3, #1
 8004bf2:	6279      	str	r1, [r7, #36]	; 0x24
 8004bf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bf8:	b2d2      	uxtb	r2, r2
 8004bfa:	701a      	strb	r2, [r3, #0]
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	09db      	lsrs	r3, r3, #7
 8004c00:	623b      	str	r3, [r7, #32]
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	2b7f      	cmp	r3, #127	; 0x7f
 8004c06:	d8f0      	bhi.n	8004bea <_SendPacket+0x102>
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	627a      	str	r2, [r7, #36]	; 0x24
 8004c0e:	6a3a      	ldr	r2, [r7, #32]
 8004c10:	b2d2      	uxtb	r2, r2
 8004c12:	701a      	strb	r2, [r3, #0]
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	461a      	mov	r2, r3
 8004c20:	68f9      	ldr	r1, [r7, #12]
 8004c22:	2001      	movs	r0, #1
 8004c24:	f7ff fcd0 	bl	80045c8 <SEGGER_RTT_WriteSkipNoLock>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	613b      	str	r3, [r7, #16]
  if (Status) {
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004c32:	4a14      	ldr	r2, [pc, #80]	; (8004c84 <_SendPacket+0x19c>)
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	60d3      	str	r3, [r2, #12]
 8004c38:	e00b      	b.n	8004c52 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004c3a:	4b12      	ldr	r3, [pc, #72]	; (8004c84 <_SendPacket+0x19c>)
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	4b10      	ldr	r3, [pc, #64]	; (8004c84 <_SendPacket+0x19c>)
 8004c44:	701a      	strb	r2, [r3, #0]
 8004c46:	e004      	b.n	8004c52 <_SendPacket+0x16a>
    goto SendDone;
 8004c48:	bf00      	nop
 8004c4a:	e002      	b.n	8004c52 <_SendPacket+0x16a>
      goto SendDone;
 8004c4c:	bf00      	nop
 8004c4e:	e000      	b.n	8004c52 <_SendPacket+0x16a>
      goto SendDone;
 8004c50:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004c52:	4b0e      	ldr	r3, [pc, #56]	; (8004c8c <_SendPacket+0x1a4>)
 8004c54:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004c58:	4b0c      	ldr	r3, [pc, #48]	; (8004c8c <_SendPacket+0x1a4>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d00b      	beq.n	8004c7a <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004c62:	4b08      	ldr	r3, [pc, #32]	; (8004c84 <_SendPacket+0x19c>)
 8004c64:	789b      	ldrb	r3, [r3, #2]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d107      	bne.n	8004c7a <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004c6a:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <_SendPacket+0x19c>)
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004c70:	f7ff fe66 	bl	8004940 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004c74:	4b03      	ldr	r3, [pc, #12]	; (8004c84 <_SendPacket+0x19c>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004c7a:	bf00      	nop
 8004c7c:	3728      	adds	r7, #40	; 0x28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	200035f0 	.word	0x200035f0
 8004c88:	e0001004 	.word	0xe0001004
 8004c8c:	20003794 	.word	0x20003794

08004c90 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af02      	add	r7, sp, #8
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004ca6:	4a14      	ldr	r2, [pc, #80]	; (8004cf8 <SEGGER_SYSVIEW_Init+0x68>)
 8004ca8:	4914      	ldr	r1, [pc, #80]	; (8004cfc <SEGGER_SYSVIEW_Init+0x6c>)
 8004caa:	2001      	movs	r0, #1
 8004cac:	f7ff fd1c 	bl	80046e8 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	2308      	movs	r3, #8
 8004cb6:	4a12      	ldr	r2, [pc, #72]	; (8004d00 <SEGGER_SYSVIEW_Init+0x70>)
 8004cb8:	4910      	ldr	r1, [pc, #64]	; (8004cfc <SEGGER_SYSVIEW_Init+0x6c>)
 8004cba:	2001      	movs	r0, #1
 8004cbc:	f7ff fd7e 	bl	80047bc <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004cc0:	4b10      	ldr	r3, [pc, #64]	; (8004d04 <SEGGER_SYSVIEW_Init+0x74>)
 8004cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc6:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004cc8:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <SEGGER_SYSVIEW_Init+0x78>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a0d      	ldr	r2, [pc, #52]	; (8004d04 <SEGGER_SYSVIEW_Init+0x74>)
 8004cce:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004cd0:	4a0c      	ldr	r2, [pc, #48]	; (8004d04 <SEGGER_SYSVIEW_Init+0x74>)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004cd6:	4a0b      	ldr	r2, [pc, #44]	; (8004d04 <SEGGER_SYSVIEW_Init+0x74>)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004cdc:	4a09      	ldr	r2, [pc, #36]	; (8004d04 <SEGGER_SYSVIEW_Init+0x74>)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004ce2:	4a08      	ldr	r2, [pc, #32]	; (8004d04 <SEGGER_SYSVIEW_Init+0x74>)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004ce8:	4b06      	ldr	r3, [pc, #24]	; (8004d04 <SEGGER_SYSVIEW_Init+0x74>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004cee:	bf00      	nop
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	20001de8 	.word	0x20001de8
 8004cfc:	08005de0 	.word	0x08005de0
 8004d00:	200035e8 	.word	0x200035e8
 8004d04:	200035f0 	.word	0x200035f0
 8004d08:	e0001004 	.word	0xe0001004

08004d0c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004d14:	4a03      	ldr	r2, [pc, #12]	; (8004d24 <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6113      	str	r3, [r2, #16]
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bc80      	pop	{r7}
 8004d22:	4770      	bx	lr
 8004d24:	200035f0 	.word	0x200035f0

08004d28 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d30:	f3ef 8311 	mrs	r3, BASEPRI
 8004d34:	f04f 0120 	mov.w	r1, #32
 8004d38:	f381 8811 	msr	BASEPRI, r1
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	4808      	ldr	r0, [pc, #32]	; (8004d60 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004d40:	f7ff fdf2 	bl	8004928 <_PreparePacket>
 8004d44:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	68b9      	ldr	r1, [r7, #8]
 8004d4a:	68b8      	ldr	r0, [r7, #8]
 8004d4c:	f7ff fecc 	bl	8004ae8 <_SendPacket>
  RECORD_END();
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f383 8811 	msr	BASEPRI, r3
}
 8004d56:	bf00      	nop
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	20003620 	.word	0x20003620

08004d64 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d6e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d72:	f04f 0120 	mov.w	r1, #32
 8004d76:	f381 8811 	msr	BASEPRI, r1
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	4816      	ldr	r0, [pc, #88]	; (8004dd8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004d7e:	f7ff fdd3 	bl	8004928 <_PreparePacket>
 8004d82:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	61fb      	str	r3, [r7, #28]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	61bb      	str	r3, [r7, #24]
 8004d90:	e00b      	b.n	8004daa <SEGGER_SYSVIEW_RecordU32+0x46>
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	1c59      	adds	r1, r3, #1
 8004d9a:	61f9      	str	r1, [r7, #28]
 8004d9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004da0:	b2d2      	uxtb	r2, r2
 8004da2:	701a      	strb	r2, [r3, #0]
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	09db      	lsrs	r3, r3, #7
 8004da8:	61bb      	str	r3, [r7, #24]
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	2b7f      	cmp	r3, #127	; 0x7f
 8004dae:	d8f0      	bhi.n	8004d92 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	61fa      	str	r2, [r7, #28]
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	701a      	strb	r2, [r3, #0]
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	68f9      	ldr	r1, [r7, #12]
 8004dc4:	6938      	ldr	r0, [r7, #16]
 8004dc6:	f7ff fe8f 	bl	8004ae8 <_SendPacket>
  RECORD_END();
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f383 8811 	msr	BASEPRI, r3
}
 8004dd0:	bf00      	nop
 8004dd2:	3720      	adds	r7, #32
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	20003620 	.word	0x20003620

08004ddc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08c      	sub	sp, #48	; 0x30
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004de8:	f3ef 8311 	mrs	r3, BASEPRI
 8004dec:	f04f 0120 	mov.w	r1, #32
 8004df0:	f381 8811 	msr	BASEPRI, r1
 8004df4:	61fb      	str	r3, [r7, #28]
 8004df6:	4825      	ldr	r0, [pc, #148]	; (8004e8c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004df8:	f7ff fd96 	bl	8004928 <_PreparePacket>
 8004dfc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e0a:	e00b      	b.n	8004e24 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e12:	1c59      	adds	r1, r3, #1
 8004e14:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	09db      	lsrs	r3, r3, #7
 8004e22:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	2b7f      	cmp	r3, #127	; 0x7f
 8004e28:	d8f0      	bhi.n	8004e0c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e38:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	623b      	str	r3, [r7, #32]
 8004e42:	e00b      	b.n	8004e5c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	1c59      	adds	r1, r3, #1
 8004e4c:	6279      	str	r1, [r7, #36]	; 0x24
 8004e4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	09db      	lsrs	r3, r3, #7
 8004e5a:	623b      	str	r3, [r7, #32]
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e60:	d8f0      	bhi.n	8004e44 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	627a      	str	r2, [r7, #36]	; 0x24
 8004e68:	6a3a      	ldr	r2, [r7, #32]
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	701a      	strb	r2, [r3, #0]
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	6979      	ldr	r1, [r7, #20]
 8004e76:	69b8      	ldr	r0, [r7, #24]
 8004e78:	f7ff fe36 	bl	8004ae8 <_SendPacket>
  RECORD_END();
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	f383 8811 	msr	BASEPRI, r3
}
 8004e82:	bf00      	nop
 8004e84:	3730      	adds	r7, #48	; 0x30
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20003620 	.word	0x20003620

08004e90 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08e      	sub	sp, #56	; 0x38
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e9e:	f3ef 8311 	mrs	r3, BASEPRI
 8004ea2:	f04f 0120 	mov.w	r1, #32
 8004ea6:	f381 8811 	msr	BASEPRI, r1
 8004eaa:	61fb      	str	r3, [r7, #28]
 8004eac:	4832      	ldr	r0, [pc, #200]	; (8004f78 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004eae:	f7ff fd3b 	bl	8004928 <_PreparePacket>
 8004eb2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	637b      	str	r3, [r7, #52]	; 0x34
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	633b      	str	r3, [r7, #48]	; 0x30
 8004ec0:	e00b      	b.n	8004eda <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec8:	1c59      	adds	r1, r3, #1
 8004eca:	6379      	str	r1, [r7, #52]	; 0x34
 8004ecc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	701a      	strb	r2, [r3, #0]
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed6:	09db      	lsrs	r3, r3, #7
 8004ed8:	633b      	str	r3, [r7, #48]	; 0x30
 8004eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004edc:	2b7f      	cmp	r3, #127	; 0x7f
 8004ede:	d8f0      	bhi.n	8004ec2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	637a      	str	r2, [r7, #52]	; 0x34
 8004ee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	701a      	strb	r2, [r3, #0]
 8004eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ef8:	e00b      	b.n	8004f12 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f00:	1c59      	adds	r1, r3, #1
 8004f02:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]
 8004f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0e:	09db      	lsrs	r3, r3, #7
 8004f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	2b7f      	cmp	r3, #127	; 0x7f
 8004f16:	d8f0      	bhi.n	8004efa <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f20:	b2d2      	uxtb	r2, r2
 8004f22:	701a      	strb	r2, [r3, #0]
 8004f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f26:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	623b      	str	r3, [r7, #32]
 8004f30:	e00b      	b.n	8004f4a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	1c59      	adds	r1, r3, #1
 8004f3a:	6279      	str	r1, [r7, #36]	; 0x24
 8004f3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	701a      	strb	r2, [r3, #0]
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	09db      	lsrs	r3, r3, #7
 8004f48:	623b      	str	r3, [r7, #32]
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f4e:	d8f0      	bhi.n	8004f32 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	627a      	str	r2, [r7, #36]	; 0x24
 8004f56:	6a3a      	ldr	r2, [r7, #32]
 8004f58:	b2d2      	uxtb	r2, r2
 8004f5a:	701a      	strb	r2, [r3, #0]
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	6979      	ldr	r1, [r7, #20]
 8004f64:	69b8      	ldr	r0, [r7, #24]
 8004f66:	f7ff fdbf 	bl	8004ae8 <_SendPacket>
  RECORD_END();
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	f383 8811 	msr	BASEPRI, r3
}
 8004f70:	bf00      	nop
 8004f72:	3738      	adds	r7, #56	; 0x38
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	20003620 	.word	0x20003620

08004f7c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b090      	sub	sp, #64	; 0x40
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f8a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f8e:	f04f 0120 	mov.w	r1, #32
 8004f92:	f381 8811 	msr	BASEPRI, r1
 8004f96:	61fb      	str	r3, [r7, #28]
 8004f98:	4840      	ldr	r0, [pc, #256]	; (800509c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004f9a:	f7ff fcc5 	bl	8004928 <_PreparePacket>
 8004f9e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fac:	e00b      	b.n	8004fc6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb4:	1c59      	adds	r1, r3, #1
 8004fb6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004fb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fbc:	b2d2      	uxtb	r2, r2
 8004fbe:	701a      	strb	r2, [r3, #0]
 8004fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc2:	09db      	lsrs	r3, r3, #7
 8004fc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc8:	2b7f      	cmp	r3, #127	; 0x7f
 8004fca:	d8f0      	bhi.n	8004fae <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004fd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fd4:	b2d2      	uxtb	r2, r2
 8004fd6:	701a      	strb	r2, [r3, #0]
 8004fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fda:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	637b      	str	r3, [r7, #52]	; 0x34
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	633b      	str	r3, [r7, #48]	; 0x30
 8004fe4:	e00b      	b.n	8004ffe <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fec:	1c59      	adds	r1, r3, #1
 8004fee:	6379      	str	r1, [r7, #52]	; 0x34
 8004ff0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	701a      	strb	r2, [r3, #0]
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffa:	09db      	lsrs	r3, r3, #7
 8004ffc:	633b      	str	r3, [r7, #48]	; 0x30
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005000:	2b7f      	cmp	r3, #127	; 0x7f
 8005002:	d8f0      	bhi.n	8004fe6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	637a      	str	r2, [r7, #52]	; 0x34
 800500a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800500c:	b2d2      	uxtb	r2, r2
 800500e:	701a      	strb	r2, [r3, #0]
 8005010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005012:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	62bb      	str	r3, [r7, #40]	; 0x28
 800501c:	e00b      	b.n	8005036 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005020:	b2da      	uxtb	r2, r3
 8005022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005024:	1c59      	adds	r1, r3, #1
 8005026:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005028:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	701a      	strb	r2, [r3, #0]
 8005030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005032:	09db      	lsrs	r3, r3, #7
 8005034:	62bb      	str	r3, [r7, #40]	; 0x28
 8005036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005038:	2b7f      	cmp	r3, #127	; 0x7f
 800503a:	d8f0      	bhi.n	800501e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800503c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005044:	b2d2      	uxtb	r2, r2
 8005046:	701a      	strb	r2, [r3, #0]
 8005048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	627b      	str	r3, [r7, #36]	; 0x24
 8005050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005052:	623b      	str	r3, [r7, #32]
 8005054:	e00b      	b.n	800506e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	b2da      	uxtb	r2, r3
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	1c59      	adds	r1, r3, #1
 800505e:	6279      	str	r1, [r7, #36]	; 0x24
 8005060:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	701a      	strb	r2, [r3, #0]
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	09db      	lsrs	r3, r3, #7
 800506c:	623b      	str	r3, [r7, #32]
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	2b7f      	cmp	r3, #127	; 0x7f
 8005072:	d8f0      	bhi.n	8005056 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	627a      	str	r2, [r7, #36]	; 0x24
 800507a:	6a3a      	ldr	r2, [r7, #32]
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	701a      	strb	r2, [r3, #0]
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	6979      	ldr	r1, [r7, #20]
 8005088:	69b8      	ldr	r0, [r7, #24]
 800508a:	f7ff fd2d 	bl	8004ae8 <_SendPacket>
  RECORD_END();
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	f383 8811 	msr	BASEPRI, r3
}
 8005094:	bf00      	nop
 8005096:	3740      	adds	r7, #64	; 0x40
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	20003620 	.word	0x20003620

080050a0 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08c      	sub	sp, #48	; 0x30
 80050a4:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 80050a6:	4b59      	ldr	r3, [pc, #356]	; (800520c <SEGGER_SYSVIEW_Start+0x16c>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f040 80aa 	bne.w	8005204 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 80050b0:	4b56      	ldr	r3, [pc, #344]	; (800520c <SEGGER_SYSVIEW_Start+0x16c>)
 80050b2:	2201      	movs	r2, #1
 80050b4:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80050b6:	f3ef 8311 	mrs	r3, BASEPRI
 80050ba:	f04f 0120 	mov.w	r1, #32
 80050be:	f381 8811 	msr	BASEPRI, r1
 80050c2:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80050c4:	220a      	movs	r2, #10
 80050c6:	4952      	ldr	r1, [pc, #328]	; (8005210 <SEGGER_SYSVIEW_Start+0x170>)
 80050c8:	2001      	movs	r0, #1
 80050ca:	f7ff fa7d 	bl	80045c8 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80050d4:	200a      	movs	r0, #10
 80050d6:	f7ff fe27 	bl	8004d28 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80050da:	f3ef 8311 	mrs	r3, BASEPRI
 80050de:	f04f 0120 	mov.w	r1, #32
 80050e2:	f381 8811 	msr	BASEPRI, r1
 80050e6:	60bb      	str	r3, [r7, #8]
 80050e8:	484a      	ldr	r0, [pc, #296]	; (8005214 <SEGGER_SYSVIEW_Start+0x174>)
 80050ea:	f7ff fc1d 	bl	8004928 <_PreparePacket>
 80050ee:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050f8:	4b44      	ldr	r3, [pc, #272]	; (800520c <SEGGER_SYSVIEW_Start+0x16c>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80050fe:	e00b      	b.n	8005118 <SEGGER_SYSVIEW_Start+0x78>
 8005100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005102:	b2da      	uxtb	r2, r3
 8005104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005106:	1c59      	adds	r1, r3, #1
 8005108:	62f9      	str	r1, [r7, #44]	; 0x2c
 800510a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]
 8005112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005114:	09db      	lsrs	r3, r3, #7
 8005116:	62bb      	str	r3, [r7, #40]	; 0x28
 8005118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511a:	2b7f      	cmp	r3, #127	; 0x7f
 800511c:	d8f0      	bhi.n	8005100 <SEGGER_SYSVIEW_Start+0x60>
 800511e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	701a      	strb	r2, [r3, #0]
 800512a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
 8005132:	4b36      	ldr	r3, [pc, #216]	; (800520c <SEGGER_SYSVIEW_Start+0x16c>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	623b      	str	r3, [r7, #32]
 8005138:	e00b      	b.n	8005152 <SEGGER_SYSVIEW_Start+0xb2>
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	b2da      	uxtb	r2, r3
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	1c59      	adds	r1, r3, #1
 8005142:	6279      	str	r1, [r7, #36]	; 0x24
 8005144:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	701a      	strb	r2, [r3, #0]
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	09db      	lsrs	r3, r3, #7
 8005150:	623b      	str	r3, [r7, #32]
 8005152:	6a3b      	ldr	r3, [r7, #32]
 8005154:	2b7f      	cmp	r3, #127	; 0x7f
 8005156:	d8f0      	bhi.n	800513a <SEGGER_SYSVIEW_Start+0x9a>
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	627a      	str	r2, [r7, #36]	; 0x24
 800515e:	6a3a      	ldr	r2, [r7, #32]
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	701a      	strb	r2, [r3, #0]
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	61fb      	str	r3, [r7, #28]
 800516c:	4b27      	ldr	r3, [pc, #156]	; (800520c <SEGGER_SYSVIEW_Start+0x16c>)
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	61bb      	str	r3, [r7, #24]
 8005172:	e00b      	b.n	800518c <SEGGER_SYSVIEW_Start+0xec>
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	b2da      	uxtb	r2, r3
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	1c59      	adds	r1, r3, #1
 800517c:	61f9      	str	r1, [r7, #28]
 800517e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	09db      	lsrs	r3, r3, #7
 800518a:	61bb      	str	r3, [r7, #24]
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	2b7f      	cmp	r3, #127	; 0x7f
 8005190:	d8f0      	bhi.n	8005174 <SEGGER_SYSVIEW_Start+0xd4>
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	61fa      	str	r2, [r7, #28]
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	b2d2      	uxtb	r2, r2
 800519c:	701a      	strb	r2, [r3, #0]
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	2302      	movs	r3, #2
 80051a8:	613b      	str	r3, [r7, #16]
 80051aa:	e00b      	b.n	80051c4 <SEGGER_SYSVIEW_Start+0x124>
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	1c59      	adds	r1, r3, #1
 80051b4:	6179      	str	r1, [r7, #20]
 80051b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	09db      	lsrs	r3, r3, #7
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	2b7f      	cmp	r3, #127	; 0x7f
 80051c8:	d8f0      	bhi.n	80051ac <SEGGER_SYSVIEW_Start+0x10c>
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	617a      	str	r2, [r7, #20]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80051da:	2218      	movs	r2, #24
 80051dc:	6839      	ldr	r1, [r7, #0]
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7ff fc82 	bl	8004ae8 <_SendPacket>
      RECORD_END();
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80051ea:	4b08      	ldr	r3, [pc, #32]	; (800520c <SEGGER_SYSVIEW_Start+0x16c>)
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 80051f2:	4b06      	ldr	r3, [pc, #24]	; (800520c <SEGGER_SYSVIEW_Start+0x16c>)
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80051f8:	f000 f9ec 	bl	80055d4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80051fc:	f000 f9b2 	bl	8005564 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005200:	f000 fc8a 	bl	8005b18 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8005204:	bf00      	nop
 8005206:	3730      	adds	r7, #48	; 0x30
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	200035f0 	.word	0x200035f0
 8005210:	08005e08 	.word	0x08005e08
 8005214:	20003620 	.word	0x20003620

08005218 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800521e:	f3ef 8311 	mrs	r3, BASEPRI
 8005222:	f04f 0120 	mov.w	r1, #32
 8005226:	f381 8811 	msr	BASEPRI, r1
 800522a:	607b      	str	r3, [r7, #4]
 800522c:	480b      	ldr	r0, [pc, #44]	; (800525c <SEGGER_SYSVIEW_Stop+0x44>)
 800522e:	f7ff fb7b 	bl	8004928 <_PreparePacket>
 8005232:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005234:	4b0a      	ldr	r3, [pc, #40]	; (8005260 <SEGGER_SYSVIEW_Stop+0x48>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d007      	beq.n	800524c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800523c:	220b      	movs	r2, #11
 800523e:	6839      	ldr	r1, [r7, #0]
 8005240:	6838      	ldr	r0, [r7, #0]
 8005242:	f7ff fc51 	bl	8004ae8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005246:	4b06      	ldr	r3, [pc, #24]	; (8005260 <SEGGER_SYSVIEW_Stop+0x48>)
 8005248:	2200      	movs	r2, #0
 800524a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f383 8811 	msr	BASEPRI, r3
}
 8005252:	bf00      	nop
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20003620 	.word	0x20003620
 8005260:	200035f0 	.word	0x200035f0

08005264 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005264:	b580      	push	{r7, lr}
 8005266:	b08c      	sub	sp, #48	; 0x30
 8005268:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800526a:	f3ef 8311 	mrs	r3, BASEPRI
 800526e:	f04f 0120 	mov.w	r1, #32
 8005272:	f381 8811 	msr	BASEPRI, r1
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	4845      	ldr	r0, [pc, #276]	; (8005390 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800527a:	f7ff fb55 	bl	8004928 <_PreparePacket>
 800527e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005288:	4b42      	ldr	r3, [pc, #264]	; (8005394 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	62bb      	str	r3, [r7, #40]	; 0x28
 800528e:	e00b      	b.n	80052a8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005292:	b2da      	uxtb	r2, r3
 8005294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005296:	1c59      	adds	r1, r3, #1
 8005298:	62f9      	str	r1, [r7, #44]	; 0x2c
 800529a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a4:	09db      	lsrs	r3, r3, #7
 80052a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	2b7f      	cmp	r3, #127	; 0x7f
 80052ac:	d8f0      	bhi.n	8005290 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80052ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052bc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
 80052c2:	4b34      	ldr	r3, [pc, #208]	; (8005394 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	623b      	str	r3, [r7, #32]
 80052c8:	e00b      	b.n	80052e2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	1c59      	adds	r1, r3, #1
 80052d2:	6279      	str	r1, [r7, #36]	; 0x24
 80052d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	701a      	strb	r2, [r3, #0]
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	09db      	lsrs	r3, r3, #7
 80052e0:	623b      	str	r3, [r7, #32]
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	2b7f      	cmp	r3, #127	; 0x7f
 80052e6:	d8f0      	bhi.n	80052ca <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	627a      	str	r2, [r7, #36]	; 0x24
 80052ee:	6a3a      	ldr	r2, [r7, #32]
 80052f0:	b2d2      	uxtb	r2, r2
 80052f2:	701a      	strb	r2, [r3, #0]
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	61fb      	str	r3, [r7, #28]
 80052fc:	4b25      	ldr	r3, [pc, #148]	; (8005394 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	61bb      	str	r3, [r7, #24]
 8005302:	e00b      	b.n	800531c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	b2da      	uxtb	r2, r3
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	1c59      	adds	r1, r3, #1
 800530c:	61f9      	str	r1, [r7, #28]
 800530e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	701a      	strb	r2, [r3, #0]
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	09db      	lsrs	r3, r3, #7
 800531a:	61bb      	str	r3, [r7, #24]
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	2b7f      	cmp	r3, #127	; 0x7f
 8005320:	d8f0      	bhi.n	8005304 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	61fa      	str	r2, [r7, #28]
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	2302      	movs	r3, #2
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	e00b      	b.n	8005354 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	b2da      	uxtb	r2, r3
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	1c59      	adds	r1, r3, #1
 8005344:	6179      	str	r1, [r7, #20]
 8005346:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800534a:	b2d2      	uxtb	r2, r2
 800534c:	701a      	strb	r2, [r3, #0]
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	09db      	lsrs	r3, r3, #7
 8005352:	613b      	str	r3, [r7, #16]
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	2b7f      	cmp	r3, #127	; 0x7f
 8005358:	d8f0      	bhi.n	800533c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	617a      	str	r2, [r7, #20]
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	701a      	strb	r2, [r3, #0]
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800536a:	2218      	movs	r2, #24
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	68b8      	ldr	r0, [r7, #8]
 8005370:	f7ff fbba 	bl	8004ae8 <_SendPacket>
  RECORD_END();
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800537a:	4b06      	ldr	r3, [pc, #24]	; (8005394 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005382:	4b04      	ldr	r3, [pc, #16]	; (8005394 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	4798      	blx	r3
  }
}
 8005388:	bf00      	nop
 800538a:	3730      	adds	r7, #48	; 0x30
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	20003620 	.word	0x20003620
 8005394:	200035f0 	.word	0x200035f0

08005398 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005398:	b580      	push	{r7, lr}
 800539a:	b092      	sub	sp, #72	; 0x48
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80053a0:	f3ef 8311 	mrs	r3, BASEPRI
 80053a4:	f04f 0120 	mov.w	r1, #32
 80053a8:	f381 8811 	msr	BASEPRI, r1
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	486b      	ldr	r0, [pc, #428]	; (800555c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80053b0:	f7ff faba 	bl	8004928 <_PreparePacket>
 80053b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	647b      	str	r3, [r7, #68]	; 0x44
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	4b67      	ldr	r3, [pc, #412]	; (8005560 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	089b      	lsrs	r3, r3, #2
 80053ca:	643b      	str	r3, [r7, #64]	; 0x40
 80053cc:	e00b      	b.n	80053e6 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 80053ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053d4:	1c59      	adds	r1, r3, #1
 80053d6:	6479      	str	r1, [r7, #68]	; 0x44
 80053d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	701a      	strb	r2, [r3, #0]
 80053e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e2:	09db      	lsrs	r3, r3, #7
 80053e4:	643b      	str	r3, [r7, #64]	; 0x40
 80053e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e8:	2b7f      	cmp	r3, #127	; 0x7f
 80053ea:	d8f0      	bhi.n	80053ce <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 80053ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	647a      	str	r2, [r7, #68]	; 0x44
 80053f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053f4:	b2d2      	uxtb	r2, r2
 80053f6:	701a      	strb	r2, [r3, #0]
 80053f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053fa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	63bb      	str	r3, [r7, #56]	; 0x38
 8005406:	e00b      	b.n	8005420 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8005408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540a:	b2da      	uxtb	r2, r3
 800540c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800540e:	1c59      	adds	r1, r3, #1
 8005410:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005412:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	701a      	strb	r2, [r3, #0]
 800541a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541c:	09db      	lsrs	r3, r3, #7
 800541e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005422:	2b7f      	cmp	r3, #127	; 0x7f
 8005424:	d8f0      	bhi.n	8005408 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8005426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800542c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	701a      	strb	r2, [r3, #0]
 8005432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005434:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2220      	movs	r2, #32
 800543c:	4619      	mov	r1, r3
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f7ff fa26 	bl	8004890 <_EncodeStr>
 8005444:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005446:	2209      	movs	r2, #9
 8005448:	68f9      	ldr	r1, [r7, #12]
 800544a:	6938      	ldr	r0, [r7, #16]
 800544c:	f7ff fb4c 	bl	8004ae8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	637b      	str	r3, [r7, #52]	; 0x34
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	4b40      	ldr	r3, [pc, #256]	; (8005560 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	089b      	lsrs	r3, r3, #2
 8005464:	633b      	str	r3, [r7, #48]	; 0x30
 8005466:	e00b      	b.n	8005480 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8005468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546a:	b2da      	uxtb	r2, r3
 800546c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546e:	1c59      	adds	r1, r3, #1
 8005470:	6379      	str	r1, [r7, #52]	; 0x34
 8005472:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	701a      	strb	r2, [r3, #0]
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	09db      	lsrs	r3, r3, #7
 800547e:	633b      	str	r3, [r7, #48]	; 0x30
 8005480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005482:	2b7f      	cmp	r3, #127	; 0x7f
 8005484:	d8f0      	bhi.n	8005468 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8005486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005488:	1c5a      	adds	r2, r3, #1
 800548a:	637a      	str	r2, [r7, #52]	; 0x34
 800548c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	701a      	strb	r2, [r3, #0]
 8005492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005494:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	62bb      	str	r3, [r7, #40]	; 0x28
 80054a0:	e00b      	b.n	80054ba <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 80054a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a8:	1c59      	adds	r1, r3, #1
 80054aa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80054ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054b0:	b2d2      	uxtb	r2, r2
 80054b2:	701a      	strb	r2, [r3, #0]
 80054b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b6:	09db      	lsrs	r3, r3, #7
 80054b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80054ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054bc:	2b7f      	cmp	r3, #127	; 0x7f
 80054be:	d8f0      	bhi.n	80054a2 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 80054c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	701a      	strb	r2, [r3, #0]
 80054cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	627b      	str	r3, [r7, #36]	; 0x24
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	623b      	str	r3, [r7, #32]
 80054da:	e00b      	b.n	80054f4 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	1c59      	adds	r1, r3, #1
 80054e4:	6279      	str	r1, [r7, #36]	; 0x24
 80054e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	701a      	strb	r2, [r3, #0]
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	09db      	lsrs	r3, r3, #7
 80054f2:	623b      	str	r3, [r7, #32]
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	2b7f      	cmp	r3, #127	; 0x7f
 80054f8:	d8f0      	bhi.n	80054dc <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	627a      	str	r2, [r7, #36]	; 0x24
 8005500:	6a3a      	ldr	r2, [r7, #32]
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	701a      	strb	r2, [r3, #0]
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	61fb      	str	r3, [r7, #28]
 800550e:	2300      	movs	r3, #0
 8005510:	61bb      	str	r3, [r7, #24]
 8005512:	e00b      	b.n	800552c <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	b2da      	uxtb	r2, r3
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	1c59      	adds	r1, r3, #1
 800551c:	61f9      	str	r1, [r7, #28]
 800551e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	701a      	strb	r2, [r3, #0]
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	09db      	lsrs	r3, r3, #7
 800552a:	61bb      	str	r3, [r7, #24]
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	2b7f      	cmp	r3, #127	; 0x7f
 8005530:	d8f0      	bhi.n	8005514 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	61fa      	str	r2, [r7, #28]
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	701a      	strb	r2, [r3, #0]
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005542:	2215      	movs	r2, #21
 8005544:	68f9      	ldr	r1, [r7, #12]
 8005546:	6938      	ldr	r0, [r7, #16]
 8005548:	f7ff face 	bl	8004ae8 <_SendPacket>
  RECORD_END();
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f383 8811 	msr	BASEPRI, r3
}
 8005552:	bf00      	nop
 8005554:	3748      	adds	r7, #72	; 0x48
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20003620 	.word	0x20003620
 8005560:	200035f0 	.word	0x200035f0

08005564 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005568:	4b07      	ldr	r3, [pc, #28]	; (8005588 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d008      	beq.n	8005582 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005570:	4b05      	ldr	r3, [pc, #20]	; (8005588 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800557a:	4b03      	ldr	r3, [pc, #12]	; (8005588 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	4798      	blx	r3
  }
}
 8005582:	bf00      	nop
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	200035f0 	.word	0x200035f0

0800558c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005594:	f3ef 8311 	mrs	r3, BASEPRI
 8005598:	f04f 0120 	mov.w	r1, #32
 800559c:	f381 8811 	msr	BASEPRI, r1
 80055a0:	617b      	str	r3, [r7, #20]
 80055a2:	480b      	ldr	r0, [pc, #44]	; (80055d0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80055a4:	f7ff f9c0 	bl	8004928 <_PreparePacket>
 80055a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80055aa:	2280      	movs	r2, #128	; 0x80
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	6938      	ldr	r0, [r7, #16]
 80055b0:	f7ff f96e 	bl	8004890 <_EncodeStr>
 80055b4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80055b6:	220e      	movs	r2, #14
 80055b8:	68f9      	ldr	r1, [r7, #12]
 80055ba:	6938      	ldr	r0, [r7, #16]
 80055bc:	f7ff fa94 	bl	8004ae8 <_SendPacket>
  RECORD_END();
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f383 8811 	msr	BASEPRI, r3
}
 80055c6:	bf00      	nop
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20003620 	.word	0x20003620

080055d4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80055d4:	b590      	push	{r4, r7, lr}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80055da:	4b15      	ldr	r3, [pc, #84]	; (8005630 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d01a      	beq.n	8005618 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80055e2:	4b13      	ldr	r3, [pc, #76]	; (8005630 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d015      	beq.n	8005618 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80055ec:	4b10      	ldr	r3, [pc, #64]	; (8005630 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4798      	blx	r3
 80055f4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80055f8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80055fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055fe:	f04f 0200 	mov.w	r2, #0
 8005602:	f04f 0300 	mov.w	r3, #0
 8005606:	000a      	movs	r2, r1
 8005608:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800560a:	4613      	mov	r3, r2
 800560c:	461a      	mov	r2, r3
 800560e:	4621      	mov	r1, r4
 8005610:	200d      	movs	r0, #13
 8005612:	f7ff fbe3 	bl	8004ddc <SEGGER_SYSVIEW_RecordU32x2>
 8005616:	e006      	b.n	8005626 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005618:	4b06      	ldr	r3, [pc, #24]	; (8005634 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4619      	mov	r1, r3
 800561e:	200c      	movs	r0, #12
 8005620:	f7ff fba0 	bl	8004d64 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005624:	bf00      	nop
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	bd90      	pop	{r4, r7, pc}
 800562e:	bf00      	nop
 8005630:	200035f0 	.word	0x200035f0
 8005634:	e0001004 	.word	0xe0001004

08005638 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800563e:	f3ef 8311 	mrs	r3, BASEPRI
 8005642:	f04f 0120 	mov.w	r1, #32
 8005646:	f381 8811 	msr	BASEPRI, r1
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	4819      	ldr	r0, [pc, #100]	; (80056b4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800564e:	f7ff f96b 	bl	8004928 <_PreparePacket>
 8005652:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005658:	4b17      	ldr	r3, [pc, #92]	; (80056b8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005660:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	613b      	str	r3, [r7, #16]
 800566a:	e00b      	b.n	8005684 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	b2da      	uxtb	r2, r3
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	1c59      	adds	r1, r3, #1
 8005674:	6179      	str	r1, [r7, #20]
 8005676:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800567a:	b2d2      	uxtb	r2, r2
 800567c:	701a      	strb	r2, [r3, #0]
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	09db      	lsrs	r3, r3, #7
 8005682:	613b      	str	r3, [r7, #16]
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	2b7f      	cmp	r3, #127	; 0x7f
 8005688:	d8f0      	bhi.n	800566c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	1c5a      	adds	r2, r3, #1
 800568e:	617a      	str	r2, [r7, #20]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	701a      	strb	r2, [r3, #0]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800569a:	2202      	movs	r2, #2
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	68b8      	ldr	r0, [r7, #8]
 80056a0:	f7ff fa22 	bl	8004ae8 <_SendPacket>
  RECORD_END();
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f383 8811 	msr	BASEPRI, r3
}
 80056aa:	bf00      	nop
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20003620 	.word	0x20003620
 80056b8:	e000ed04 	.word	0xe000ed04

080056bc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80056c2:	f3ef 8311 	mrs	r3, BASEPRI
 80056c6:	f04f 0120 	mov.w	r1, #32
 80056ca:	f381 8811 	msr	BASEPRI, r1
 80056ce:	607b      	str	r3, [r7, #4]
 80056d0:	4807      	ldr	r0, [pc, #28]	; (80056f0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80056d2:	f7ff f929 	bl	8004928 <_PreparePacket>
 80056d6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80056d8:	2203      	movs	r2, #3
 80056da:	6839      	ldr	r1, [r7, #0]
 80056dc:	6838      	ldr	r0, [r7, #0]
 80056de:	f7ff fa03 	bl	8004ae8 <_SendPacket>
  RECORD_END();
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f383 8811 	msr	BASEPRI, r3
}
 80056e8:	bf00      	nop
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	20003620 	.word	0x20003620

080056f4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80056fa:	f3ef 8311 	mrs	r3, BASEPRI
 80056fe:	f04f 0120 	mov.w	r1, #32
 8005702:	f381 8811 	msr	BASEPRI, r1
 8005706:	607b      	str	r3, [r7, #4]
 8005708:	4807      	ldr	r0, [pc, #28]	; (8005728 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800570a:	f7ff f90d 	bl	8004928 <_PreparePacket>
 800570e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005710:	2212      	movs	r2, #18
 8005712:	6839      	ldr	r1, [r7, #0]
 8005714:	6838      	ldr	r0, [r7, #0]
 8005716:	f7ff f9e7 	bl	8004ae8 <_SendPacket>
  RECORD_END();
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f383 8811 	msr	BASEPRI, r3
}
 8005720:	bf00      	nop
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	20003620 	.word	0x20003620

0800572c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005732:	f3ef 8311 	mrs	r3, BASEPRI
 8005736:	f04f 0120 	mov.w	r1, #32
 800573a:	f381 8811 	msr	BASEPRI, r1
 800573e:	607b      	str	r3, [r7, #4]
 8005740:	4807      	ldr	r0, [pc, #28]	; (8005760 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005742:	f7ff f8f1 	bl	8004928 <_PreparePacket>
 8005746:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005748:	2211      	movs	r2, #17
 800574a:	6839      	ldr	r1, [r7, #0]
 800574c:	6838      	ldr	r0, [r7, #0]
 800574e:	f7ff f9cb 	bl	8004ae8 <_SendPacket>
  RECORD_END();
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f383 8811 	msr	BASEPRI, r3
}
 8005758:	bf00      	nop
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	20003620 	.word	0x20003620

08005764 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005764:	b580      	push	{r7, lr}
 8005766:	b088      	sub	sp, #32
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800576c:	f3ef 8311 	mrs	r3, BASEPRI
 8005770:	f04f 0120 	mov.w	r1, #32
 8005774:	f381 8811 	msr	BASEPRI, r1
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	481a      	ldr	r0, [pc, #104]	; (80057e4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800577c:	f7ff f8d4 	bl	8004928 <_PreparePacket>
 8005780:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005786:	4b18      	ldr	r3, [pc, #96]	; (80057e8 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	089b      	lsrs	r3, r3, #2
 8005790:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	61fb      	str	r3, [r7, #28]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	61bb      	str	r3, [r7, #24]
 800579a:	e00b      	b.n	80057b4 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	1c59      	adds	r1, r3, #1
 80057a4:	61f9      	str	r1, [r7, #28]
 80057a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	701a      	strb	r2, [r3, #0]
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	09db      	lsrs	r3, r3, #7
 80057b2:	61bb      	str	r3, [r7, #24]
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	2b7f      	cmp	r3, #127	; 0x7f
 80057b8:	d8f0      	bhi.n	800579c <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	61fa      	str	r2, [r7, #28]
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	701a      	strb	r2, [r3, #0]
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80057ca:	2208      	movs	r2, #8
 80057cc:	68f9      	ldr	r1, [r7, #12]
 80057ce:	6938      	ldr	r0, [r7, #16]
 80057d0:	f7ff f98a 	bl	8004ae8 <_SendPacket>
  RECORD_END();
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f383 8811 	msr	BASEPRI, r3
}
 80057da:	bf00      	nop
 80057dc:	3720      	adds	r7, #32
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20003620 	.word	0x20003620
 80057e8:	200035f0 	.word	0x200035f0

080057ec <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b088      	sub	sp, #32
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80057f4:	f3ef 8311 	mrs	r3, BASEPRI
 80057f8:	f04f 0120 	mov.w	r1, #32
 80057fc:	f381 8811 	msr	BASEPRI, r1
 8005800:	617b      	str	r3, [r7, #20]
 8005802:	481a      	ldr	r0, [pc, #104]	; (800586c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005804:	f7ff f890 	bl	8004928 <_PreparePacket>
 8005808:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800580e:	4b18      	ldr	r3, [pc, #96]	; (8005870 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	089b      	lsrs	r3, r3, #2
 8005818:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	61fb      	str	r3, [r7, #28]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	61bb      	str	r3, [r7, #24]
 8005822:	e00b      	b.n	800583c <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	b2da      	uxtb	r2, r3
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	1c59      	adds	r1, r3, #1
 800582c:	61f9      	str	r1, [r7, #28]
 800582e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	09db      	lsrs	r3, r3, #7
 800583a:	61bb      	str	r3, [r7, #24]
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	2b7f      	cmp	r3, #127	; 0x7f
 8005840:	d8f0      	bhi.n	8005824 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	61fa      	str	r2, [r7, #28]
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	701a      	strb	r2, [r3, #0]
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005852:	2204      	movs	r2, #4
 8005854:	68f9      	ldr	r1, [r7, #12]
 8005856:	6938      	ldr	r0, [r7, #16]
 8005858:	f7ff f946 	bl	8004ae8 <_SendPacket>
  RECORD_END();
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f383 8811 	msr	BASEPRI, r3
}
 8005862:	bf00      	nop
 8005864:	3720      	adds	r7, #32
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	20003620 	.word	0x20003620
 8005870:	200035f0 	.word	0x200035f0

08005874 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800587c:	f3ef 8311 	mrs	r3, BASEPRI
 8005880:	f04f 0120 	mov.w	r1, #32
 8005884:	f381 8811 	msr	BASEPRI, r1
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	481a      	ldr	r0, [pc, #104]	; (80058f4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800588c:	f7ff f84c 	bl	8004928 <_PreparePacket>
 8005890:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005896:	4b18      	ldr	r3, [pc, #96]	; (80058f8 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	089b      	lsrs	r3, r3, #2
 80058a0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	61fb      	str	r3, [r7, #28]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	61bb      	str	r3, [r7, #24]
 80058aa:	e00b      	b.n	80058c4 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	1c59      	adds	r1, r3, #1
 80058b4:	61f9      	str	r1, [r7, #28]
 80058b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	701a      	strb	r2, [r3, #0]
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	09db      	lsrs	r3, r3, #7
 80058c2:	61bb      	str	r3, [r7, #24]
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	2b7f      	cmp	r3, #127	; 0x7f
 80058c8:	d8f0      	bhi.n	80058ac <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	61fa      	str	r2, [r7, #28]
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80058da:	2206      	movs	r2, #6
 80058dc:	68f9      	ldr	r1, [r7, #12]
 80058de:	6938      	ldr	r0, [r7, #16]
 80058e0:	f7ff f902 	bl	8004ae8 <_SendPacket>
  RECORD_END();
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f383 8811 	msr	BASEPRI, r3
}
 80058ea:	bf00      	nop
 80058ec:	3720      	adds	r7, #32
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	20003620 	.word	0x20003620
 80058f8:	200035f0 	.word	0x200035f0

080058fc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08a      	sub	sp, #40	; 0x28
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005906:	f3ef 8311 	mrs	r3, BASEPRI
 800590a:	f04f 0120 	mov.w	r1, #32
 800590e:	f381 8811 	msr	BASEPRI, r1
 8005912:	617b      	str	r3, [r7, #20]
 8005914:	4827      	ldr	r0, [pc, #156]	; (80059b4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005916:	f7ff f807 	bl	8004928 <_PreparePacket>
 800591a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005920:	4b25      	ldr	r3, [pc, #148]	; (80059b8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	089b      	lsrs	r3, r3, #2
 800592a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	627b      	str	r3, [r7, #36]	; 0x24
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	623b      	str	r3, [r7, #32]
 8005934:	e00b      	b.n	800594e <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	b2da      	uxtb	r2, r3
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	1c59      	adds	r1, r3, #1
 800593e:	6279      	str	r1, [r7, #36]	; 0x24
 8005940:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005944:	b2d2      	uxtb	r2, r2
 8005946:	701a      	strb	r2, [r3, #0]
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	09db      	lsrs	r3, r3, #7
 800594c:	623b      	str	r3, [r7, #32]
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	2b7f      	cmp	r3, #127	; 0x7f
 8005952:	d8f0      	bhi.n	8005936 <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	1c5a      	adds	r2, r3, #1
 8005958:	627a      	str	r2, [r7, #36]	; 0x24
 800595a:	6a3a      	ldr	r2, [r7, #32]
 800595c:	b2d2      	uxtb	r2, r2
 800595e:	701a      	strb	r2, [r3, #0]
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	61fb      	str	r3, [r7, #28]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	61bb      	str	r3, [r7, #24]
 800596c:	e00b      	b.n	8005986 <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	b2da      	uxtb	r2, r3
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	1c59      	adds	r1, r3, #1
 8005976:	61f9      	str	r1, [r7, #28]
 8005978:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800597c:	b2d2      	uxtb	r2, r2
 800597e:	701a      	strb	r2, [r3, #0]
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	09db      	lsrs	r3, r3, #7
 8005984:	61bb      	str	r3, [r7, #24]
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	2b7f      	cmp	r3, #127	; 0x7f
 800598a:	d8f0      	bhi.n	800596e <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	61fa      	str	r2, [r7, #28]
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	701a      	strb	r2, [r3, #0]
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800599c:	2207      	movs	r2, #7
 800599e:	68f9      	ldr	r1, [r7, #12]
 80059a0:	6938      	ldr	r0, [r7, #16]
 80059a2:	f7ff f8a1 	bl	8004ae8 <_SendPacket>
  RECORD_END();
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f383 8811 	msr	BASEPRI, r3
}
 80059ac:	bf00      	nop
 80059ae:	3728      	adds	r7, #40	; 0x28
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	20003620 	.word	0x20003620
 80059b8:	200035f0 	.word	0x200035f0

080059bc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80059c4:	4b04      	ldr	r3, [pc, #16]	; (80059d8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	089b      	lsrs	r3, r3, #2
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bc80      	pop	{r7}
 80059d6:	4770      	bx	lr
 80059d8:	200035f0 	.word	0x200035f0

080059dc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08c      	sub	sp, #48	; 0x30
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	4603      	mov	r3, r0
 80059e4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80059e6:	4b3b      	ldr	r3, [pc, #236]	; (8005ad4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d06d      	beq.n	8005aca <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80059ee:	4b39      	ldr	r3, [pc, #228]	; (8005ad4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80059f4:	2300      	movs	r3, #0
 80059f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80059f8:	e008      	b.n	8005a0c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80059fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d007      	beq.n	8005a16 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a08:	3301      	adds	r3, #1
 8005a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a0c:	79fb      	ldrb	r3, [r7, #7]
 8005a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d3f2      	bcc.n	80059fa <SEGGER_SYSVIEW_SendModule+0x1e>
 8005a14:	e000      	b.n	8005a18 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005a16:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d055      	beq.n	8005aca <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a1e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a22:	f04f 0120 	mov.w	r1, #32
 8005a26:	f381 8811 	msr	BASEPRI, r1
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	482a      	ldr	r0, [pc, #168]	; (8005ad8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005a2e:	f7fe ff7b 	bl	8004928 <_PreparePacket>
 8005a32:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a3c:	79fb      	ldrb	r3, [r7, #7]
 8005a3e:	623b      	str	r3, [r7, #32]
 8005a40:	e00b      	b.n	8005a5a <SEGGER_SYSVIEW_SendModule+0x7e>
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	1c59      	adds	r1, r3, #1
 8005a4a:	6279      	str	r1, [r7, #36]	; 0x24
 8005a4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a50:	b2d2      	uxtb	r2, r2
 8005a52:	701a      	strb	r2, [r3, #0]
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	09db      	lsrs	r3, r3, #7
 8005a58:	623b      	str	r3, [r7, #32]
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a5e:	d8f0      	bhi.n	8005a42 <SEGGER_SYSVIEW_SendModule+0x66>
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	1c5a      	adds	r2, r3, #1
 8005a64:	627a      	str	r2, [r7, #36]	; 0x24
 8005a66:	6a3a      	ldr	r2, [r7, #32]
 8005a68:	b2d2      	uxtb	r2, r2
 8005a6a:	701a      	strb	r2, [r3, #0]
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	61fb      	str	r3, [r7, #28]
 8005a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	61bb      	str	r3, [r7, #24]
 8005a7a:	e00b      	b.n	8005a94 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	1c59      	adds	r1, r3, #1
 8005a84:	61f9      	str	r1, [r7, #28]
 8005a86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a8a:	b2d2      	uxtb	r2, r2
 8005a8c:	701a      	strb	r2, [r3, #0]
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	09db      	lsrs	r3, r3, #7
 8005a92:	61bb      	str	r3, [r7, #24]
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	2b7f      	cmp	r3, #127	; 0x7f
 8005a98:	d8f0      	bhi.n	8005a7c <SEGGER_SYSVIEW_SendModule+0xa0>
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	61fa      	str	r2, [r7, #28]
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	701a      	strb	r2, [r3, #0]
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2280      	movs	r2, #128	; 0x80
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f7fe feec 	bl	8004890 <_EncodeStr>
 8005ab8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005aba:	2216      	movs	r2, #22
 8005abc:	68f9      	ldr	r1, [r7, #12]
 8005abe:	6938      	ldr	r0, [r7, #16]
 8005ac0:	f7ff f812 	bl	8004ae8 <_SendPacket>
      RECORD_END();
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005aca:	bf00      	nop
 8005acc:	3730      	adds	r7, #48	; 0x30
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	20003618 	.word	0x20003618
 8005ad8:	20003620 	.word	0x20003620

08005adc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005ae2:	4b0c      	ldr	r3, [pc, #48]	; (8005b14 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00f      	beq.n	8005b0a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005aea:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1f2      	bne.n	8005af0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005b0a:	bf00      	nop
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	20003618 	.word	0x20003618

08005b18 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005b1e:	f3ef 8311 	mrs	r3, BASEPRI
 8005b22:	f04f 0120 	mov.w	r1, #32
 8005b26:	f381 8811 	msr	BASEPRI, r1
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	4817      	ldr	r0, [pc, #92]	; (8005b8c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005b2e:	f7fe fefb 	bl	8004928 <_PreparePacket>
 8005b32:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	4b14      	ldr	r3, [pc, #80]	; (8005b90 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	613b      	str	r3, [r7, #16]
 8005b42:	e00b      	b.n	8005b5c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	1c59      	adds	r1, r3, #1
 8005b4c:	6179      	str	r1, [r7, #20]
 8005b4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	09db      	lsrs	r3, r3, #7
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b60:	d8f0      	bhi.n	8005b44 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	617a      	str	r2, [r7, #20]
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	701a      	strb	r2, [r3, #0]
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005b72:	221b      	movs	r2, #27
 8005b74:	6879      	ldr	r1, [r7, #4]
 8005b76:	68b8      	ldr	r0, [r7, #8]
 8005b78:	f7fe ffb6 	bl	8004ae8 <_SendPacket>
  RECORD_END();
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f383 8811 	msr	BASEPRI, r3
}
 8005b82:	bf00      	nop
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20003620 	.word	0x20003620
 8005b90:	2000361c 	.word	0x2000361c

08005b94 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08a      	sub	sp, #40	; 0x28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b9c:	f3ef 8311 	mrs	r3, BASEPRI
 8005ba0:	f04f 0120 	mov.w	r1, #32
 8005ba4:	f381 8811 	msr	BASEPRI, r1
 8005ba8:	617b      	str	r3, [r7, #20]
 8005baa:	4827      	ldr	r0, [pc, #156]	; (8005c48 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005bac:	f7fe febc 	bl	8004928 <_PreparePacket>
 8005bb0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005bb2:	2280      	movs	r2, #128	; 0x80
 8005bb4:	6879      	ldr	r1, [r7, #4]
 8005bb6:	6938      	ldr	r0, [r7, #16]
 8005bb8:	f7fe fe6a 	bl	8004890 <_EncodeStr>
 8005bbc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	623b      	str	r3, [r7, #32]
 8005bc6:	e00b      	b.n	8005be0 <SEGGER_SYSVIEW_Warn+0x4c>
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	1c59      	adds	r1, r3, #1
 8005bd0:	6279      	str	r1, [r7, #36]	; 0x24
 8005bd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	701a      	strb	r2, [r3, #0]
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	09db      	lsrs	r3, r3, #7
 8005bde:	623b      	str	r3, [r7, #32]
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	2b7f      	cmp	r3, #127	; 0x7f
 8005be4:	d8f0      	bhi.n	8005bc8 <SEGGER_SYSVIEW_Warn+0x34>
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	1c5a      	adds	r2, r3, #1
 8005bea:	627a      	str	r2, [r7, #36]	; 0x24
 8005bec:	6a3a      	ldr	r2, [r7, #32]
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	701a      	strb	r2, [r3, #0]
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	61fb      	str	r3, [r7, #28]
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	61bb      	str	r3, [r7, #24]
 8005bfe:	e00b      	b.n	8005c18 <SEGGER_SYSVIEW_Warn+0x84>
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	1c59      	adds	r1, r3, #1
 8005c08:	61f9      	str	r1, [r7, #28]
 8005c0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c0e:	b2d2      	uxtb	r2, r2
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	09db      	lsrs	r3, r3, #7
 8005c16:	61bb      	str	r3, [r7, #24]
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c1c:	d8f0      	bhi.n	8005c00 <SEGGER_SYSVIEW_Warn+0x6c>
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	1c5a      	adds	r2, r3, #1
 8005c22:	61fa      	str	r2, [r7, #28]
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	b2d2      	uxtb	r2, r2
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005c2e:	221a      	movs	r2, #26
 8005c30:	68f9      	ldr	r1, [r7, #12]
 8005c32:	6938      	ldr	r0, [r7, #16]
 8005c34:	f7fe ff58 	bl	8004ae8 <_SendPacket>
  RECORD_END();
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f383 8811 	msr	BASEPRI, r3
}
 8005c3e:	bf00      	nop
 8005c40:	3728      	adds	r7, #40	; 0x28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	20003620 	.word	0x20003620

08005c4c <__libc_init_array>:
 8005c4c:	b570      	push	{r4, r5, r6, lr}
 8005c4e:	2600      	movs	r6, #0
 8005c50:	4d0c      	ldr	r5, [pc, #48]	; (8005c84 <__libc_init_array+0x38>)
 8005c52:	4c0d      	ldr	r4, [pc, #52]	; (8005c88 <__libc_init_array+0x3c>)
 8005c54:	1b64      	subs	r4, r4, r5
 8005c56:	10a4      	asrs	r4, r4, #2
 8005c58:	42a6      	cmp	r6, r4
 8005c5a:	d109      	bne.n	8005c70 <__libc_init_array+0x24>
 8005c5c:	f000 f83e 	bl	8005cdc <_init>
 8005c60:	2600      	movs	r6, #0
 8005c62:	4d0a      	ldr	r5, [pc, #40]	; (8005c8c <__libc_init_array+0x40>)
 8005c64:	4c0a      	ldr	r4, [pc, #40]	; (8005c90 <__libc_init_array+0x44>)
 8005c66:	1b64      	subs	r4, r4, r5
 8005c68:	10a4      	asrs	r4, r4, #2
 8005c6a:	42a6      	cmp	r6, r4
 8005c6c:	d105      	bne.n	8005c7a <__libc_init_array+0x2e>
 8005c6e:	bd70      	pop	{r4, r5, r6, pc}
 8005c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c74:	4798      	blx	r3
 8005c76:	3601      	adds	r6, #1
 8005c78:	e7ee      	b.n	8005c58 <__libc_init_array+0xc>
 8005c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c7e:	4798      	blx	r3
 8005c80:	3601      	adds	r6, #1
 8005c82:	e7f2      	b.n	8005c6a <__libc_init_array+0x1e>
 8005c84:	08005e14 	.word	0x08005e14
 8005c88:	08005e14 	.word	0x08005e14
 8005c8c:	08005e14 	.word	0x08005e14
 8005c90:	08005e18 	.word	0x08005e18

08005c94 <memcmp>:
 8005c94:	b530      	push	{r4, r5, lr}
 8005c96:	2400      	movs	r4, #0
 8005c98:	3901      	subs	r1, #1
 8005c9a:	42a2      	cmp	r2, r4
 8005c9c:	d101      	bne.n	8005ca2 <memcmp+0xe>
 8005c9e:	2000      	movs	r0, #0
 8005ca0:	e005      	b.n	8005cae <memcmp+0x1a>
 8005ca2:	5d03      	ldrb	r3, [r0, r4]
 8005ca4:	3401      	adds	r4, #1
 8005ca6:	5d0d      	ldrb	r5, [r1, r4]
 8005ca8:	42ab      	cmp	r3, r5
 8005caa:	d0f6      	beq.n	8005c9a <memcmp+0x6>
 8005cac:	1b58      	subs	r0, r3, r5
 8005cae:	bd30      	pop	{r4, r5, pc}

08005cb0 <memcpy>:
 8005cb0:	440a      	add	r2, r1
 8005cb2:	4291      	cmp	r1, r2
 8005cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cb8:	d100      	bne.n	8005cbc <memcpy+0xc>
 8005cba:	4770      	bx	lr
 8005cbc:	b510      	push	{r4, lr}
 8005cbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cc2:	4291      	cmp	r1, r2
 8005cc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cc8:	d1f9      	bne.n	8005cbe <memcpy+0xe>
 8005cca:	bd10      	pop	{r4, pc}

08005ccc <memset>:
 8005ccc:	4603      	mov	r3, r0
 8005cce:	4402      	add	r2, r0
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d100      	bne.n	8005cd6 <memset+0xa>
 8005cd4:	4770      	bx	lr
 8005cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8005cda:	e7f9      	b.n	8005cd0 <memset+0x4>

08005cdc <_init>:
 8005cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cde:	bf00      	nop
 8005ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce2:	bc08      	pop	{r3}
 8005ce4:	469e      	mov	lr, r3
 8005ce6:	4770      	bx	lr

08005ce8 <_fini>:
 8005ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cea:	bf00      	nop
 8005cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cee:	bc08      	pop	{r3}
 8005cf0:	469e      	mov	lr, r3
 8005cf2:	4770      	bx	lr
